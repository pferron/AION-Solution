/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// InspectorModel
    /// </summary>
    [DataContract]
    public partial class InspectorModel :  IEquatable<InspectorModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectorModel" /> class.
        /// </summary>
        /// <param name="department">department.</param>
        /// <param name="email">The inspector&#39;s email address..</param>
        /// <param name="firstName">The inspector&#39;s first name..</param>
        /// <param name="id">The inspector id..</param>
        /// <param name="lastName">The inspector&#39;s last name..</param>
        /// <param name="middleName">The inspector&#39;s middle name..</param>
        /// <param name="mobilePhone">The inspector&#39;s mobile phone number..</param>
        /// <param name="preferredChannel">The method by which the inspector prefers to be notified, by phone for example..</param>
        public InspectorModel(InspectorModelDepartment department = default(InspectorModelDepartment), string email = default(string), string firstName = default(string), string id = default(string), string lastName = default(string), string middleName = default(string), string mobilePhone = default(string), string preferredChannel = default(string))
        {
            this.Department = department;
            this.Email = email;
            this.FirstName = firstName;
            this.Id = id;
            this.LastName = lastName;
            this.MiddleName = middleName;
            this.MobilePhone = mobilePhone;
            this.PreferredChannel = preferredChannel;
        }
        
        /// <summary>
        /// Gets or Sets Department
        /// </summary>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public InspectorModelDepartment Department { get; set; }

        /// <summary>
        /// The inspector&#39;s email address.
        /// </summary>
        /// <value>The inspector&#39;s email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The inspector&#39;s first name.
        /// </summary>
        /// <value>The inspector&#39;s first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The inspector id.
        /// </summary>
        /// <value>The inspector id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The inspector&#39;s last name.
        /// </summary>
        /// <value>The inspector&#39;s last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The inspector&#39;s middle name.
        /// </summary>
        /// <value>The inspector&#39;s middle name.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The inspector&#39;s mobile phone number.
        /// </summary>
        /// <value>The inspector&#39;s mobile phone number.</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// The method by which the inspector prefers to be notified, by phone for example.
        /// </summary>
        /// <value>The method by which the inspector prefers to be notified, by phone for example.</value>
        [DataMember(Name="preferredChannel", EmitDefaultValue=false)]
        public string PreferredChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectorModel {\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  PreferredChannel: ").Append(PreferredChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectorModel);
        }

        /// <summary>
        /// Returns true if InspectorModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectorModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.PreferredChannel == input.PreferredChannel ||
                    (this.PreferredChannel != null &&
                    this.PreferredChannel.Equals(input.PreferredChannel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.PreferredChannel != null)
                    hashCode = hashCode * 59 + this.PreferredChannel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
