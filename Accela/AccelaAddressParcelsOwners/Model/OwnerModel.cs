/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAddressParcelsOwners.Client.SwaggerDateConverter;

namespace AccelaAddressParcelsOwners.Model
{
    /// <summary>
    /// OwnerModel
    /// </summary>
    [DataContract]
    public partial class OwnerModel :  IEquatable<OwnerModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OwnerModel" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="email">The contact&#39;s email address..</param>
        /// <param name="fax">The fax number for the contact..</param>
        /// <param name="firstName">The contact&#39;s first name. This field is only active when the Contact Type selected is Individual..</param>
        /// <param name="fullName">The contact&#39;s full name. This field is only active when the Contact Type selected is Individual..</param>
        /// <param name="id">The owner system id assigned by the Civic Platform server..</param>
        /// <param name="isPrimary">Indicates whether or not to designate the owner as the primary owner..</param>
        /// <param name="lastName">The last name (surname)..</param>
        /// <param name="mailAddress">mailAddress.</param>
        /// <param name="middleName">The contact&#39;s middle name..</param>
        /// <param name="parcelId">The unique Id generated for a parcel..</param>
        /// <param name="phone">The telephone number of the owner..</param>
        /// <param name="phoneCountryCode">The country code for the assoicated phone number..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="status">status.</param>
        /// <param name="structureName">The name of the full or partial structure or establishment..</param>
        /// <param name="structureType">The type of structure or establishment.</param>
        /// <param name="taxId">The owner&#39;s tax ID number..</param>
        /// <param name="title">The individual&#39;s business title..</param>
        public OwnerModel(OwnerAddressModel address = default(OwnerAddressModel), string email = default(string), string fax = default(string), string firstName = default(string), string fullName = default(string), long? id = default(long?), string isPrimary = default(string), string lastName = default(string), OwnerAddressModel mailAddress = default(OwnerAddressModel), string middleName = default(string), string parcelId = default(string), string phone = default(string), string phoneCountryCode = default(string), RecordIdModel recordId = default(RecordIdModel), OwnerModelStatus status = default(OwnerModelStatus), string structureName = default(string), string structureType = default(string), string taxId = default(string), string title = default(string))
        {
            this.Address = address;
            this.Email = email;
            this.Fax = fax;
            this.FirstName = firstName;
            this.FullName = fullName;
            this.Id = id;
            this.IsPrimary = isPrimary;
            this.LastName = lastName;
            this.MailAddress = mailAddress;
            this.MiddleName = middleName;
            this.ParcelId = parcelId;
            this.Phone = phone;
            this.PhoneCountryCode = phoneCountryCode;
            this.RecordId = recordId;
            this.Status = status;
            this.StructureName = structureName;
            this.StructureType = structureType;
            this.TaxId = taxId;
            this.Title = title;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public OwnerAddressModel Address { get; set; }

        /// <summary>
        /// The contact&#39;s email address.
        /// </summary>
        /// <value>The contact&#39;s email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The fax number for the contact.
        /// </summary>
        /// <value>The fax number for the contact.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// The contact&#39;s first name. This field is only active when the Contact Type selected is Individual.
        /// </summary>
        /// <value>The contact&#39;s first name. This field is only active when the Contact Type selected is Individual.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The contact&#39;s full name. This field is only active when the Contact Type selected is Individual.
        /// </summary>
        /// <value>The contact&#39;s full name. This field is only active when the Contact Type selected is Individual.</value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// The owner system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The owner system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Indicates whether or not to designate the owner as the primary owner.
        /// </summary>
        /// <value>Indicates whether or not to designate the owner as the primary owner.</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public string IsPrimary { get; set; }

        /// <summary>
        /// The last name (surname).
        /// </summary>
        /// <value>The last name (surname).</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// Gets or Sets MailAddress
        /// </summary>
        [DataMember(Name="mailAddress", EmitDefaultValue=false)]
        public OwnerAddressModel MailAddress { get; set; }

        /// <summary>
        /// The contact&#39;s middle name.
        /// </summary>
        /// <value>The contact&#39;s middle name.</value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The unique Id generated for a parcel.
        /// </summary>
        /// <value>The unique Id generated for a parcel.</value>
        [DataMember(Name="parcelId", EmitDefaultValue=false)]
        public string ParcelId { get; set; }

        /// <summary>
        /// The telephone number of the owner.
        /// </summary>
        /// <value>The telephone number of the owner.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// The country code for the assoicated phone number.
        /// </summary>
        /// <value>The country code for the assoicated phone number.</value>
        [DataMember(Name="phoneCountryCode", EmitDefaultValue=false)]
        public string PhoneCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public OwnerModelStatus Status { get; set; }

        /// <summary>
        /// The name of the full or partial structure or establishment.
        /// </summary>
        /// <value>The name of the full or partial structure or establishment.</value>
        [DataMember(Name="structureName", EmitDefaultValue=false)]
        public string StructureName { get; set; }

        /// <summary>
        /// The type of structure or establishment
        /// </summary>
        /// <value>The type of structure or establishment</value>
        [DataMember(Name="structureType", EmitDefaultValue=false)]
        public string StructureType { get; set; }

        /// <summary>
        /// The owner&#39;s tax ID number.
        /// </summary>
        /// <value>The owner&#39;s tax ID number.</value>
        [DataMember(Name="taxId", EmitDefaultValue=false)]
        public string TaxId { get; set; }

        /// <summary>
        /// The individual&#39;s business title.
        /// </summary>
        /// <value>The individual&#39;s business title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OwnerModel {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  MailAddress: ").Append(MailAddress).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  ParcelId: ").Append(ParcelId).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneCountryCode: ").Append(PhoneCountryCode).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StructureName: ").Append(StructureName).Append("\n");
            sb.Append("  StructureType: ").Append(StructureType).Append("\n");
            sb.Append("  TaxId: ").Append(TaxId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OwnerModel);
        }

        /// <summary>
        /// Returns true if OwnerModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OwnerModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OwnerModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.MailAddress == input.MailAddress ||
                    (this.MailAddress != null &&
                    this.MailAddress.Equals(input.MailAddress))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.ParcelId == input.ParcelId ||
                    (this.ParcelId != null &&
                    this.ParcelId.Equals(input.ParcelId))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PhoneCountryCode == input.PhoneCountryCode ||
                    (this.PhoneCountryCode != null &&
                    this.PhoneCountryCode.Equals(input.PhoneCountryCode))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StructureName == input.StructureName ||
                    (this.StructureName != null &&
                    this.StructureName.Equals(input.StructureName))
                ) && 
                (
                    this.StructureType == input.StructureType ||
                    (this.StructureType != null &&
                    this.StructureType.Equals(input.StructureType))
                ) && 
                (
                    this.TaxId == input.TaxId ||
                    (this.TaxId != null &&
                    this.TaxId.Equals(input.TaxId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.MailAddress != null)
                    hashCode = hashCode * 59 + this.MailAddress.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.ParcelId != null)
                    hashCode = hashCode * 59 + this.ParcelId.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PhoneCountryCode != null)
                    hashCode = hashCode * 59 + this.PhoneCountryCode.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StructureName != null)
                    hashCode = hashCode * 59 + this.StructureName.GetHashCode();
                if (this.StructureType != null)
                    hashCode = hashCode * 59 + this.StructureType.GetHashCode();
                if (this.TaxId != null)
                    hashCode = hashCode * 59 + this.TaxId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
