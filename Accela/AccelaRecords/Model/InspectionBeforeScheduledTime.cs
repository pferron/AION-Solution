/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// Specifies the number of days or hours before the scheduled time on the inspection date.
    /// </summary>
    [DataContract]
    public partial class InspectionBeforeScheduledTime :  IEquatable<InspectionBeforeScheduledTime>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionBeforeScheduledTime" /> class.
        /// </summary>
        /// <param name="days">Inspections can only be cancelled within this number of days before the scheduled time on the inspection date..</param>
        /// <param name="hours">Inspections can only be cancelled within this number of hours before the scheduled time on the inspection date..</param>
        /// <param name="time">Inspections can only be cancelled within the number of specified days or hours before this time (\&quot;hh:mm AM|PM\&quot;) on the inspection date..</param>
        public InspectionBeforeScheduledTime(long? days = default(long?), long? hours = default(long?), string time = default(string))
        {
            this.Days = days;
            this.Hours = hours;
            this.Time = time;
        }
        
        /// <summary>
        /// Inspections can only be cancelled within this number of days before the scheduled time on the inspection date.
        /// </summary>
        /// <value>Inspections can only be cancelled within this number of days before the scheduled time on the inspection date.</value>
        [DataMember(Name="days", EmitDefaultValue=false)]
        public long? Days { get; set; }

        /// <summary>
        /// Inspections can only be cancelled within this number of hours before the scheduled time on the inspection date.
        /// </summary>
        /// <value>Inspections can only be cancelled within this number of hours before the scheduled time on the inspection date.</value>
        [DataMember(Name="hours", EmitDefaultValue=false)]
        public long? Hours { get; set; }

        /// <summary>
        /// Inspections can only be cancelled within the number of specified days or hours before this time (\&quot;hh:mm AM|PM\&quot;) on the inspection date.
        /// </summary>
        /// <value>Inspections can only be cancelled within the number of specified days or hours before this time (\&quot;hh:mm AM|PM\&quot;) on the inspection date.</value>
        [DataMember(Name="time", EmitDefaultValue=false)]
        public string Time { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionBeforeScheduledTime {\n");
            sb.Append("  Days: ").Append(Days).Append("\n");
            sb.Append("  Hours: ").Append(Hours).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectionBeforeScheduledTime);
        }

        /// <summary>
        /// Returns true if InspectionBeforeScheduledTime instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectionBeforeScheduledTime to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionBeforeScheduledTime input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Days == input.Days ||
                    (this.Days != null &&
                    this.Days.Equals(input.Days))
                ) && 
                (
                    this.Hours == input.Hours ||
                    (this.Hours != null &&
                    this.Hours.Equals(input.Hours))
                ) && 
                (
                    this.Time == input.Time ||
                    (this.Time != null &&
                    this.Time.Equals(input.Time))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Days != null)
                    hashCode = hashCode * 59 + this.Days.GetHashCode();
                if (this.Hours != null)
                    hashCode = hashCode * 59 + this.Hours.GetHashCode();
                if (this.Time != null)
                    hashCode = hashCode * 59 + this.Time.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
