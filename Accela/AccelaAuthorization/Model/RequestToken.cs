/* 
 * Authentication
 *
 * Construct's OAuth2 APIs for generating API access tokens. For an overview, see [Construct API Authentication](../construct-apiAuth.html).
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using System.Threading;
using SwaggerDateConverter = AccelaAuthorization.Client.SwaggerDateConverter;

namespace AccelaAuthorization.Model
{
    /// <summary>
    /// RequestToken
    /// </summary>
    [DataContract]
    public partial class RequestToken : IEquatable<RequestToken>, IValidatableObject
    {
        /// <summary>
        /// Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character.
        /// </summary>
        /// <value>Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GrantTypeEnum
        {
            /// <summary>
            /// Enum Authorizationcode for value: authorization_code
            /// </summary>
            [EnumMember(Value = "authorization_code")]
            Authorizationcode = 0,
            /// <summary>
            /// Enum Password for value: password
            /// </summary>
            [EnumMember(Value = "password")]
            Password = 1,
            /// <summary>
            /// Enum Refreshtoken for value: refresh_token
            /// </summary>
            [EnumMember(Value = "refresh_token")]
            Refreshtoken = 2
        }
        ///// <summary>
        ///// Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character.
        ///// </summary>
        ///// <value>Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character.</value>
        //[DataMember(Name="grant_type", EmitDefaultValue=false)]
        //public GrantTypeEnum GrantType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestToken" /> class.
        /// </summary>
        /// <param name="clientId">The app ID value from [Construct Developer Portal](https://developer.accela.com). (required).</param>
        /// <param name="clientSecret">The app secret value from [Construct Developer Portal](https://developer.accela.com). (required).</param>
        /// <param name="grantType">Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character. (required).</param>
        /// <param name="code">The authorization code obtained from the preceding [/oauth2/authorize](#operation/oauth2.authorize) request.  **Note**: code is required only when calling this API with grant_type&#x3D;autorhization_code for [Authorization Code Flow](../construct-authCodeFlow.html).   **Note**: The code should be URL-encoded, if you are using tools or libraries which will auto-encode the code, you need to pass the code under decoded.  **Note**: The code can be used no more than one time, the client should apply the rule during exchange access token. (required).</param>
        /// <param name="redirectUri">The URI that is used to redirect to the client with an access token.  **Note**: redirect_uri is required only when calling this API with grant_type&#x3D;autorhization_code for [Authorization Code Flow](../construct-authCodeFlow.html).   **Note**: The value of redirect_uri must match the redirect_uri used in the preceding [/oauth2/authorize](#operation/oauth2.authorize) request. (required).</param>
        /// <param name="username">For a **citizen app**, the user name is the Civic ID. For an **agency app**, the user name is the Civic Platform account.  **Note**: username is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html).  (required).</param>
        /// <param name="password">For a **citizen app**, the user name is the Civic ID password. For an **agency app**, the user name is the Civic Platform password.  **Note**: username is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html).  (required).</param>
        /// <param name="scope">The scope of the resources that the client requests. Enter a list of APIs scope names separated by spaces. Get the scope names from the [Construct API Reference](./api-index.html).  **Note**: scope is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). .</param>
        /// <param name="agencyName">The agency name defined in [Construct Administrator Portal](https://admin.accela.com). APIs such as [Get All Agencies](./api-agencies.html#operation/v4.get.agencies), [Get Agency](./api-agencies.html#operation/v4.get.agencies.name), and [Search Agencies](./api-search.html#operation/v4.post.search.agencies) return valid agency names.   **Note**: agency_name is used only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). For an **agency app**, agency_name is required. For a **citizen app**, agency_name is optional. (required).</param>
        /// <param name="environment">The Construct environment name, such as \&quot;PROD\&quot; and \&quot;TEST\&quot;. The [Get All Agency Environments](./api-agencies.html#operation/v4.get.agencies.name.environments) API returns a list of configured environments available for a specific agency. The [Get Environment Status](./api-agencies.html#operation/v4.get.agencies.name.environments.env.status) checks connectivity with the Agency/Environment..  **Note**: scope is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html).  (required).</param>
        /// <param name="refreshToken">The refresh token value obtained in the prior access token API request.  **Note**: refresh_token is required only when calling this API to refresh the token for both [Authorization Code Flow](../construct-authCodeFlow.html) and [Password Credential Login](../construct-passwordCredentialLogin.html). .</param>
        /// <param name="state">An opaque value that the client uses for maintaining the state between the request and callback. Enter a unique value. This can be used for [Cross-Site Request Forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) protection.  This parameter is not used when refreshing a token.  **Note**: state is used and optional only when calling this API with grant_type&#x3D;authorization_code for [Authorization Code Flow](../construct-authCodeFlow.html). .</param>
        public RequestToken(string clientId = default(string), string clientSecret = default(string), GrantTypeEnum grantType = default(GrantTypeEnum), string code = default(string), string redirectUri = default(string), string username = default(string), string password = default(string), string scope = default(string), string agencyName = default(string), string environment = default(string), string refreshToken = default(string), string state = default(string))
        {
            // to ensure "clientId" is required (not null)
            if (clientId == null)
            {
                throw new InvalidDataException("clientId is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.ClientId = clientId;
            }
            // to ensure "clientSecret" is required (not null)
            if (clientSecret == null)
            {
                throw new InvalidDataException("clientSecret is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.ClientSecret = clientSecret;
            }
            // to ensure "grantType" is required (not null)
            if (grantType == null)
            {
                throw new InvalidDataException("grantType is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.GrantType = grantType;
            }
            // to ensure "code" is required (not null)
            if (code == null)
            {
                //     throw new InvalidDataException("code is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.Code = code;
            }
            // to ensure "redirectUri" is required (not null)
            if (redirectUri == null)
            {
                //throw new InvalidDataException("redirectUri is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.RedirectUri = redirectUri;
            }
            // to ensure "username" is required (not null)
            if (username == null)
            {
                throw new InvalidDataException("username is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.Username = username;
            }
            // to ensure "password" is required (not null)
            if (password == null)
            {
                throw new InvalidDataException("password is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.Password = password;
            }
            // to ensure "agencyName" is required (not null)
            if (agencyName == null)
            {
                throw new InvalidDataException("agencyName is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.AgencyName = agencyName;
            }
            // to ensure "environment" is required (not null)
            if (environment == null)
            {
                throw new InvalidDataException("environment is a required property for RequestToken and cannot be null");
            }
            else
            {
                this.Environment = environment;
            }
            this.Scope = scope;
            this.RefreshToken = refreshToken;
            this.State = state;
        }

        /// <summary>
        /// The app ID value from [Construct Developer Portal](https://developer.accela.com).
        /// </summary>
        /// <value>The app ID value from [Construct Developer Portal](https://developer.accela.com).</value>
        [DataMember(Name = "client_id", EmitDefaultValue = false)]
        public string ClientId { get; set; }

        /// <summary>
        /// The app secret value from [Construct Developer Portal](https://developer.accela.com).
        /// </summary>
        /// <value>The app secret value from [Construct Developer Portal](https://developer.accela.com).</value>
        [DataMember(Name = "client_secret", EmitDefaultValue = false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character.
        /// </summary>
        /// <value>Specifies whether the request is for an authorization code, password credential access token, or refresh token. Valid values:  Values:    authorization_code - Request to exchange the given authorization code with an access token. Used with [Authorization Code Flow](../construct-authCodeFlow.html).    password - Request authentication via userid and password credential. See [Password Credential Login](../construct-passwordCredentialLogin.html).    refresh_token - Request to refresh the token.   **Note**: Make sure the grant_type value does not contain any space character.</value>
        [DataMember(Name = "grant_type", EmitDefaultValue = false)]
        public GrantTypeEnum GrantType { get; set; }

        /// <summary>
        /// The authorization code obtained from the preceding [/oauth2/authorize](#operation/oauth2.authorize) request.  **Note**: code is required only when calling this API with grant_type&#x3D;autorhization_code for [Authorization Code Flow](../construct-authCodeFlow.html).   **Note**: The code should be URL-encoded, if you are using tools or libraries which will auto-encode the code, you need to pass the code under decoded.  **Note**: The code can be used no more than one time, the client should apply the rule during exchange access token.
        /// </summary>
        /// <value>The authorization code obtained from the preceding [/oauth2/authorize](#operation/oauth2.authorize) request.  **Note**: code is required only when calling this API with grant_type&#x3D;autorhization_code for [Authorization Code Flow](../construct-authCodeFlow.html).   **Note**: The code should be URL-encoded, if you are using tools or libraries which will auto-encode the code, you need to pass the code under decoded.  **Note**: The code can be used no more than one time, the client should apply the rule during exchange access token.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// The URI that is used to redirect to the client with an access token.  **Note**: redirect_uri is required only when calling this API with grant_type&#x3D;autorhization_code for [Authorization Code Flow](../construct-authCodeFlow.html).   **Note**: The value of redirect_uri must match the redirect_uri used in the preceding [/oauth2/authorize](#operation/oauth2.authorize) request.
        /// </summary>
        /// <value>The URI that is used to redirect to the client with an access token.  **Note**: redirect_uri is required only when calling this API with grant_type&#x3D;autorhization_code for [Authorization Code Flow](../construct-authCodeFlow.html).   **Note**: The value of redirect_uri must match the redirect_uri used in the preceding [/oauth2/authorize](#operation/oauth2.authorize) request.</value>
        [DataMember(Name = "redirect_uri", EmitDefaultValue = false)]
        public string RedirectUri { get; set; }

        /// <summary>
        /// For a **citizen app**, the user name is the Civic ID. For an **agency app**, the user name is the Civic Platform account.  **Note**: username is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). 
        /// </summary>
        /// <value>For a **citizen app**, the user name is the Civic ID. For an **agency app**, the user name is the Civic Platform account.  **Note**: username is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). </value>
        [DataMember(Name = "username", EmitDefaultValue = false)]
        public string Username { get; set; }

        /// <summary>
        /// For a **citizen app**, the user name is the Civic ID password. For an **agency app**, the user name is the Civic Platform password.  **Note**: username is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). 
        /// </summary>
        /// <value>For a **citizen app**, the user name is the Civic ID password. For an **agency app**, the user name is the Civic Platform password.  **Note**: username is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). </value>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// The scope of the resources that the client requests. Enter a list of APIs scope names separated by spaces. Get the scope names from the [Construct API Reference](./api-index.html).  **Note**: scope is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). 
        /// </summary>
        /// <value>The scope of the resources that the client requests. Enter a list of APIs scope names separated by spaces. Get the scope names from the [Construct API Reference](./api-index.html).  **Note**: scope is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). </value>
        [DataMember(Name = "scope", EmitDefaultValue = false)]
        public string Scope { get; set; }

        /// <summary>
        /// The agency name defined in [Construct Administrator Portal](https://admin.accela.com). APIs such as [Get All Agencies](./api-agencies.html#operation/v4.get.agencies), [Get Agency](./api-agencies.html#operation/v4.get.agencies.name), and [Search Agencies](./api-search.html#operation/v4.post.search.agencies) return valid agency names.   **Note**: agency_name is used only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). For an **agency app**, agency_name is required. For a **citizen app**, agency_name is optional.
        /// </summary>
        /// <value>The agency name defined in [Construct Administrator Portal](https://admin.accela.com). APIs such as [Get All Agencies](./api-agencies.html#operation/v4.get.agencies), [Get Agency](./api-agencies.html#operation/v4.get.agencies.name), and [Search Agencies](./api-search.html#operation/v4.post.search.agencies) return valid agency names.   **Note**: agency_name is used only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). For an **agency app**, agency_name is required. For a **citizen app**, agency_name is optional.</value>
        [DataMember(Name = "agency_name", EmitDefaultValue = false)]
        public string AgencyName { get; set; }

        /// <summary>
        /// The Construct environment name, such as \&quot;PROD\&quot; and \&quot;TEST\&quot;. The [Get All Agency Environments](./api-agencies.html#operation/v4.get.agencies.name.environments) API returns a list of configured environments available for a specific agency. The [Get Environment Status](./api-agencies.html#operation/v4.get.agencies.name.environments.env.status) checks connectivity with the Agency/Environment..  **Note**: scope is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). 
        /// </summary>
        /// <value>The Construct environment name, such as \&quot;PROD\&quot; and \&quot;TEST\&quot;. The [Get All Agency Environments](./api-agencies.html#operation/v4.get.agencies.name.environments) API returns a list of configured environments available for a specific agency. The [Get Environment Status](./api-agencies.html#operation/v4.get.agencies.name.environments.env.status) checks connectivity with the Agency/Environment..  **Note**: scope is required only when calling this API with grant_type&#x3D;password for [Password Credential Login](../construct-passwordCredentialLogin.html). </value>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public string Environment { get; set; }

        /// <summary>
        /// The refresh token value obtained in the prior access token API request.  **Note**: refresh_token is required only when calling this API to refresh the token for both [Authorization Code Flow](../construct-authCodeFlow.html) and [Password Credential Login](../construct-passwordCredentialLogin.html). 
        /// </summary>
        /// <value>The refresh token value obtained in the prior access token API request.  **Note**: refresh_token is required only when calling this API to refresh the token for both [Authorization Code Flow](../construct-authCodeFlow.html) and [Password Credential Login](../construct-passwordCredentialLogin.html). </value>
        [DataMember(Name = "refresh_token", EmitDefaultValue = false)]
        public string RefreshToken { get; set; }

        /// <summary>
        /// An opaque value that the client uses for maintaining the state between the request and callback. Enter a unique value. This can be used for [Cross-Site Request Forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) protection.  This parameter is not used when refreshing a token.  **Note**: state is used and optional only when calling this API with grant_type&#x3D;authorization_code for [Authorization Code Flow](../construct-authCodeFlow.html). 
        /// </summary>
        /// <value>An opaque value that the client uses for maintaining the state between the request and callback. Enter a unique value. This can be used for [Cross-Site Request Forgery](http://en.wikipedia.org/wiki/Cross-site_request_forgery) (CSRF) protection.  This parameter is not used when refreshing a token.  **Note**: state is used and optional only when calling this API with grant_type&#x3D;authorization_code for [Authorization Code Flow](../construct-authCodeFlow.html). </value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestToken {\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  GrantType: ").Append(GrantType).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  AgencyName: ").Append(AgencyName).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  RefreshToken: ").Append(RefreshToken).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public string VToBodyString()
        {
            var sb = new StringBuilder();
            // sb.Append("{");
            sb.Append("client_id:" + ClientId + "\n");
            sb.Append("client_secret:" + ClientSecret + "\n");
            sb.Append("grant_type:" + GrantType.ToString().ToLower() + "\n");
            if (!String.IsNullOrEmpty(Code))
            {
                sb.Append("code:" + Code + "\n");
            }

            if (!String.IsNullOrEmpty(RedirectUri))
            {
                sb.Append("redirect_uri:" + Code + "\n");
            }

            sb.Append("username:" + Username + "\n");
            sb.Append("password:" + Password + "\n");
            sb.Append("scope:" + Scope + "\n");
            sb.Append("agency_name:" + AgencyName + "\n");
            sb.Append("environment:" + Environment + "\n");
            if (!String.IsNullOrEmpty(RefreshToken))
            {
                sb.Append("refresh_token:" + RefreshToken + "\n");
            }

            if (!String.IsNullOrEmpty(State))
            {
                sb.Append("state:" + State + "\n");
            }

            // sb.Append("}");
            return sb.ToString();
        }


        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestToken);
        }

        /// <summary>
        /// Returns true if RequestToken instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestToken to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestToken input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ClientId == input.ClientId ||
                    (this.ClientId != null &&
                    this.ClientId.Equals(input.ClientId))
                ) &&
                (
                    this.ClientSecret == input.ClientSecret ||
                    (this.ClientSecret != null &&
                    this.ClientSecret.Equals(input.ClientSecret))
                ) &&
                (
                    this.GrantType == input.GrantType ||
                    (this.GrantType != null &&
                    this.GrantType.Equals(input.GrantType))
                ) &&
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.RedirectUri == input.RedirectUri ||
                    (this.RedirectUri != null &&
                    this.RedirectUri.Equals(input.RedirectUri))
                ) &&
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) &&
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) &&
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                ) &&
                (
                    this.AgencyName == input.AgencyName ||
                    (this.AgencyName != null &&
                    this.AgencyName.Equals(input.AgencyName))
                ) &&
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) &&
                (
                    this.RefreshToken == input.RefreshToken ||
                    (this.RefreshToken != null &&
                    this.RefreshToken.Equals(input.RefreshToken))
                ) &&
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClientId != null)
                    hashCode = hashCode * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hashCode = hashCode * 59 + this.ClientSecret.GetHashCode();
                if (this.GrantType != null)
                    hashCode = hashCode * 59 + this.GrantType.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.RedirectUri != null)
                    hashCode = hashCode * 59 + this.RedirectUri.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                if (this.AgencyName != null)
                    hashCode = hashCode * 59 + this.AgencyName.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.RefreshToken != null)
                    hashCode = hashCode * 59 + this.RefreshToken.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
