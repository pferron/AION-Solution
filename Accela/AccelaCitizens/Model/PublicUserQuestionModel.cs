/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// PublicUserQuestionModel
    /// </summary>
    [DataContract]
    public partial class PublicUserQuestionModel :  IEquatable<PublicUserQuestionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicUserQuestionModel" /> class.
        /// </summary>
        /// <param name="answer">The answer to the security question for password reset..</param>
        /// <param name="order">The order of the security question..</param>
        /// <param name="question">The security question for password reset..</param>
        public PublicUserQuestionModel(string answer = default(string), string order = default(string), string question = default(string))
        {
            this.Answer = answer;
            this.Order = order;
            this.Question = question;
        }
        
        /// <summary>
        /// The answer to the security question for password reset.
        /// </summary>
        /// <value>The answer to the security question for password reset.</value>
        [DataMember(Name="answer", EmitDefaultValue=false)]
        public string Answer { get; set; }

        /// <summary>
        /// The order of the security question.
        /// </summary>
        /// <value>The order of the security question.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public string Order { get; set; }

        /// <summary>
        /// The security question for password reset.
        /// </summary>
        /// <value>The security question for password reset.</value>
        [DataMember(Name="question", EmitDefaultValue=false)]
        public string Question { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicUserQuestionModel {\n");
            sb.Append("  Answer: ").Append(Answer).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Question: ").Append(Question).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicUserQuestionModel);
        }

        /// <summary>
        /// Returns true if PublicUserQuestionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicUserQuestionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicUserQuestionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Answer == input.Answer ||
                    (this.Answer != null &&
                    this.Answer.Equals(input.Answer))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Question == input.Question ||
                    (this.Question != null &&
                    this.Question.Equals(input.Question))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Answer != null)
                    hashCode = hashCode * 59 + this.Answer.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Question != null)
                    hashCode = hashCode * 59 + this.Question.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
