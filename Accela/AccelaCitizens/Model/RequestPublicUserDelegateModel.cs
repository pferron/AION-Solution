/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// RequestPublicUserDelegateModel
    /// </summary>
    [DataContract]
    public partial class RequestPublicUserDelegateModel :  IEquatable<RequestPublicUserDelegateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestPublicUserDelegateModel" /> class.
        /// </summary>
        /// <param name="invitationMessage">The invitation message sent to the delegate..</param>
        /// <param name="name">The delegate&#39;s name..</param>
        /// <param name="permissions">permissions.</param>
        /// <param name="userName">The delegate&#39;s login name..</param>
        public RequestPublicUserDelegateModel(string invitationMessage = default(string), string name = default(string), List<PublicUserDelegatePermissionModel> permissions = default(List<PublicUserDelegatePermissionModel>), string userName = default(string))
        {
            this.InvitationMessage = invitationMessage;
            this.Name = name;
            this.Permissions = permissions;
            this.UserName = userName;
        }
        
        /// <summary>
        /// The invitation message sent to the delegate.
        /// </summary>
        /// <value>The invitation message sent to the delegate.</value>
        [DataMember(Name="invitationMessage", EmitDefaultValue=false)]
        public string InvitationMessage { get; set; }

        /// <summary>
        /// The delegate&#39;s name.
        /// </summary>
        /// <value>The delegate&#39;s name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PublicUserDelegatePermissionModel> Permissions { get; set; }

        /// <summary>
        /// The delegate&#39;s login name.
        /// </summary>
        /// <value>The delegate&#39;s login name.</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestPublicUserDelegateModel {\n");
            sb.Append("  InvitationMessage: ").Append(InvitationMessage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestPublicUserDelegateModel);
        }

        /// <summary>
        /// Returns true if RequestPublicUserDelegateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestPublicUserDelegateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestPublicUserDelegateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.InvitationMessage == input.InvitationMessage ||
                    (this.InvitationMessage != null &&
                    this.InvitationMessage.Equals(input.InvitationMessage))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InvitationMessage != null)
                    hashCode = hashCode * 59 + this.InvitationMessage.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
