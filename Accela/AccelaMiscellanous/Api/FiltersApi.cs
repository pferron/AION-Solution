/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaMiscellanous.Client;
using AccelaMiscellanous.Model;

namespace AccelaMiscellanous.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFiltersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Filters
        /// </summary>
        /// <remarks>
        /// Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseFilterModelArray</returns>
        ResponseFilterModelArray V4GetFilters (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Filters
        /// </summary>
        /// <remarks>
        /// Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseFilterModelArray</returns>
        ApiResponse<ResponseFilterModelArray> V4GetFiltersWithHttpInfo (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Get Filter Results
        /// </summary>
        /// <remarks>
        /// Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>List&lt;ResponseFilterResults&gt;</returns>
        List<ResponseFilterResults> V4PostFiltersIdResults (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Filter Results
        /// </summary>
        /// <remarks>
        /// Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseFilterResults&gt;</returns>
        ApiResponse<List<ResponseFilterResults>> V4PostFiltersIdResultsWithHttpInfo (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Filters
        /// </summary>
        /// <remarks>
        /// Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseFilterModelArray</returns>
        System.Threading.Tasks.Task<ResponseFilterModelArray> V4GetFiltersAsync (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Filters
        /// </summary>
        /// <remarks>
        /// Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseFilterModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseFilterModelArray>> V4GetFiltersAsyncWithHttpInfo (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Get Filter Results
        /// </summary>
        /// <remarks>
        /// Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of List&lt;ResponseFilterResults&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseFilterResults>> V4PostFiltersIdResultsAsync (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Filter Results
        /// </summary>
        /// <remarks>
        /// Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseFilterResults&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseFilterResults>>> V4PostFiltersIdResultsAsyncWithHttpInfo (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FiltersApi : IFiltersApi
    {
        private AccelaMiscellanous.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FiltersApi(String basePath)
        {
            this.Configuration = new AccelaMiscellanous.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaMiscellanous.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FiltersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FiltersApi(AccelaMiscellanous.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaMiscellanous.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaMiscellanous.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaMiscellanous.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaMiscellanous.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Filters Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseFilterModelArray</returns>
        public ResponseFilterModelArray V4GetFilters (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseFilterModelArray> localVarResponse = V4GetFiltersWithHttpInfo(contentType, authorization, type, module, offset, limit, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Filters Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseFilterModelArray</returns>
        public ApiResponse< ResponseFilterModelArray > V4GetFiltersWithHttpInfo (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling FiltersApi->V4GetFilters");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FiltersApi->V4GetFilters");

            var localVarPath = "/v4/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseFilterModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseFilterModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseFilterModelArray)));
        }

        /// <summary>
        /// Get All Filters Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseFilterModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseFilterModelArray> V4GetFiltersAsync (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseFilterModelArray> localVarResponse = await V4GetFiltersAsyncWithHttpInfo(contentType, authorization, type, module, offset, limit, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Filters Returns Civic Platform search filters (previously known as \&quot;quick queries\&quot; in the Civic Platform application). This API returns global filters and custom filters that the currently logged in user has permissions in the requested type and module. Include the {type} URI parameter to get either a record, inspection, or workflow task filters. **API Endpoint**:  GET /v4/filters **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by Civic Platform filter type.  (optional)</param>
        /// <param name="module">Filter by Civic Platform module. If module is not specified, the default module is the currently logged-in user&#39;s default Civic Platform module.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="limit">Search result size limit.  **Added in Civic Platform version**: 9.2.0 (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseFilterModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseFilterModelArray>> V4GetFiltersAsyncWithHttpInfo (string contentType, string authorization, string type = null, string module = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling FiltersApi->V4GetFilters");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FiltersApi->V4GetFilters");

            var localVarPath = "/v4/filters";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetFilters", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseFilterModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseFilterModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseFilterModelArray)));
        }

        /// <summary>
        /// Get Filter Results Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>List&lt;ResponseFilterResults&gt;</returns>
        public List<ResponseFilterResults> V4PostFiltersIdResults (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<List<ResponseFilterResults>> localVarResponse = V4PostFiltersIdResultsWithHttpInfo(contentType, authorization, id, body, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Filter Results Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseFilterResults&gt;</returns>
        public ApiResponse< List<ResponseFilterResults> > V4PostFiltersIdResultsWithHttpInfo (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling FiltersApi->V4PostFiltersIdResults");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FiltersApi->V4PostFiltersIdResults");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->V4PostFiltersIdResults");

            var localVarPath = "/v4/filters/{id}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostFiltersIdResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseFilterResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseFilterResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseFilterResults>)));
        }

        /// <summary>
        /// Get Filter Results Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of List&lt;ResponseFilterResults&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseFilterResults>> V4PostFiltersIdResultsAsync (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<List<ResponseFilterResults>> localVarResponse = await V4PostFiltersIdResultsAsyncWithHttpInfo(contentType, authorization, id, body, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Filter Results Returns the search results of a given search filter (also known as \&quot;Quick Queries\&quot; or \&quot;Saved Searches\&quot;). Starting with Civic Platform 9.2.0, Get Filter Results supports the following fixed format parameters for all filter types (Filter parameters are configured in Civic Platform Administration Tool &gt; Data Filter.):  &lt;br/&gt;$$TODAY$$ &lt;br/&gt;$$TODAY+N$$ &lt;br/&gt;$$MODULE$$ &lt;br/&gt;$$USERID$$ &lt;br/&gt;**Note**: The $$MODULE$$ fixed format parameter is not available for inspection filters in the Civic Platform Admin Tool. To specify a module for an inspection filter, use the \&quot;module\&quot; field in the request payload.  **API Endpoint**:  POST /v4/filters/{id}/results  **Scope**:  filters  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the filter to fetch.</param>
        /// <param name="body">Contains optional filter parameters. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseFilterResults&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResponseFilterResults>>> V4PostFiltersIdResultsAsyncWithHttpInfo (string contentType, string authorization, long? id, Body body = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling FiltersApi->V4PostFiltersIdResults");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling FiltersApi->V4PostFiltersIdResults");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling FiltersApi->V4PostFiltersIdResults");

            var localVarPath = "/v4/filters/{id}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostFiltersIdResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseFilterResults>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseFilterResults>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseFilterResults>)));
        }

    }
}
