/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectorsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Inspectors
        /// </summary>
        /// <remarks>
        /// Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectorModelArray</returns>
        ResponseInspectorModelArray V4GetInspectors (string contentType, string authorization, string department = null, string lang = null);

        /// <summary>
        /// Get All Inspectors
        /// </summary>
        /// <remarks>
        /// Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectorModelArray</returns>
        ApiResponse<ResponseInspectorModelArray> V4GetInspectorsWithHttpInfo (string contentType, string authorization, string department = null, string lang = null);
        /// <summary>
        /// Get Inspector
        /// </summary>
        /// <remarks>
        /// Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectorModel</returns>
        ResponseInspectorModel V4GetInspectorsId (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get Inspector
        /// </summary>
        /// <remarks>
        /// Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectorModel</returns>
        ApiResponse<ResponseInspectorModel> V4GetInspectorsIdWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Inspectors
        /// </summary>
        /// <remarks>
        /// Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectorModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectorModelArray> V4GetInspectorsAsync (string contentType, string authorization, string department = null, string lang = null);

        /// <summary>
        /// Get All Inspectors
        /// </summary>
        /// <remarks>
        /// Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectorModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectorModelArray>> V4GetInspectorsAsyncWithHttpInfo (string contentType, string authorization, string department = null, string lang = null);
        /// <summary>
        /// Get Inspector
        /// </summary>
        /// <remarks>
        /// Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectorModel</returns>
        System.Threading.Tasks.Task<ResponseInspectorModel> V4GetInspectorsIdAsync (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get Inspector
        /// </summary>
        /// <remarks>
        /// Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectorModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectorModel>> V4GetInspectorsIdAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectorsApi : IInspectorsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectorsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectorsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectorsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Inspectors Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectorModelArray</returns>
        public ResponseInspectorModelArray V4GetInspectors (string contentType, string authorization, string department = null, string lang = null)
        {
             ApiResponse<ResponseInspectorModelArray> localVarResponse = V4GetInspectorsWithHttpInfo(contentType, authorization, department, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspectors Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectorModelArray</returns>
        public ApiResponse< ResponseInspectorModelArray > V4GetInspectorsWithHttpInfo (string contentType, string authorization, string department = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectorsApi->V4GetInspectors");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectorsApi->V4GetInspectors");

            var localVarPath = "/v4/inspectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (department != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "department", department)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectorModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectorModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectorModelArray)));
        }

        /// <summary>
        /// Get All Inspectors Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectorModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectorModelArray> V4GetInspectorsAsync (string contentType, string authorization, string department = null, string lang = null)
        {
             ApiResponse<ResponseInspectorModelArray> localVarResponse = await V4GetInspectorsAsyncWithHttpInfo(contentType, authorization, department, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspectors Gets all the inspectors in the agency.   ** API Endpoint ** : GET /v4/inspectors    ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="department">Filter by department code.For example, &#39;HEALTH/DCA/SUPER/NA/NA/NA/INTAKE&#39; (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectorModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectorModelArray>> V4GetInspectorsAsyncWithHttpInfo (string contentType, string authorization, string department = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectorsApi->V4GetInspectors");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectorsApi->V4GetInspectors");

            var localVarPath = "/v4/inspectors";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (department != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "department", department)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectors", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectorModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectorModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectorModelArray)));
        }

        /// <summary>
        /// Get Inspector Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectorModel</returns>
        public ResponseInspectorModel V4GetInspectorsId (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseInspectorModel> localVarResponse = V4GetInspectorsIdWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspector Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectorModel</returns>
        public ApiResponse< ResponseInspectorModel > V4GetInspectorsIdWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectorsApi->V4GetInspectorsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectorsApi->V4GetInspectorsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectorsApi->V4GetInspectorsId");

            var localVarPath = "/v4/inspectors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectorsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectorModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectorModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectorModel)));
        }

        /// <summary>
        /// Get Inspector Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectorModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectorModel> V4GetInspectorsIdAsync (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseInspectorModel> localVarResponse = await V4GetInspectorsIdAsyncWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspector Gets information about an inspector.   ** API Endpoint ** : GET /v4/inspectors/{id}  ** Scope ** : inspections   ** App Type ** : Agency   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.2  
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspector to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectorModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectorModel>> V4GetInspectorsIdAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectorsApi->V4GetInspectorsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectorsApi->V4GetInspectorsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectorsApi->V4GetInspectorsId");

            var localVarPath = "/v4/inspectors/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectorsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectorModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectorModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectorModel)));
        }

    }
}
