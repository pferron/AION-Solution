/* 
 * Contacts and Professionals
 *
 * The Contacts and Professionals APIs enable apps to manage reference contacts and licensed professionals.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaContactsAndProfessionals.Client;
using AccelaContactsAndProfessionals.Model;

namespace AccelaContactsAndProfessionals.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFormsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Custom Forms for Contact
        /// </summary>
        /// <remarks>
        /// Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        ResponseCustomAttributeModelArray V4GetContactsIdCustomForms (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get All Custom Forms for Contact
        /// </summary>
        /// <remarks>
        /// Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        ApiResponse<ResponseCustomAttributeModelArray> V4GetContactsIdCustomFormsWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get Custom Form Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetContactsIdCustomFormsFormIdMeta (string contentType, string authorization, string id, string formId, string lang = null);

        /// <summary>
        /// Get Custom Form Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetContactsIdCustomFormsFormIdMetaWithHttpInfo (string contentType, string authorization, string id, string formId, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetContactsIdCustomFormsMeta (string contentType, string authorization, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetContactsIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null);
        /// <summary>
        /// Update Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutContactsIdCustomForms (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null);

        /// <summary>
        /// Update Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutContactsIdCustomFormsWithHttpInfo (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Custom Forms for Contact
        /// </summary>
        /// <remarks>
        /// Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetContactsIdCustomFormsAsync (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get All Custom Forms for Contact
        /// </summary>
        /// <remarks>
        /// Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetContactsIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get Custom Form Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsIdCustomFormsFormIdMetaAsync (string contentType, string authorization, string id, string formId, string lang = null);

        /// <summary>
        /// Get Custom Form Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsIdCustomFormsFormIdMetaAsyncWithHttpInfo (string contentType, string authorization, string id, string formId, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsIdCustomFormsMetaAsync (string contentType, string authorization, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null);
        /// <summary>
        /// Update Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutContactsIdCustomFormsAsync (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null);

        /// <summary>
        /// Update Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutContactsIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsCustomFormsApi : IContactsCustomFormsApi
    {
        private AccelaContactsAndProfessionals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFormsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsCustomFormsApi(String basePath)
        {
            this.Configuration = new AccelaContactsAndProfessionals.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFormsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsCustomFormsApi(AccelaContactsAndProfessionals.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaContactsAndProfessionals.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaContactsAndProfessionals.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaContactsAndProfessionals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Custom Forms for Contact Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        public ResponseCustomAttributeModelArray V4GetContactsIdCustomForms (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = V4GetContactsIdCustomFormsWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms for Contact Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        public ApiResponse< ResponseCustomAttributeModelArray > V4GetContactsIdCustomFormsWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4GetContactsIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4GetContactsIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4GetContactsIdCustomForms");

            var localVarPath = "/v4/contacts/{id}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms for Contact Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetContactsIdCustomFormsAsync (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = await V4GetContactsIdCustomFormsAsyncWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms for Contact Gets all custom forms associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetContactsIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4GetContactsIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4GetContactsIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4GetContactsIdCustomForms");

            var localVarPath = "/v4/contacts/{id}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get Custom Form Metadata for Contact Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetContactsIdCustomFormsFormIdMeta (string contentType, string authorization, string id, string formId, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetContactsIdCustomFormsFormIdMetaWithHttpInfo(contentType, authorization, id, formId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Form Metadata for Contact Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetContactsIdCustomFormsFormIdMetaWithHttpInfo (string contentType, string authorization, string id, string formId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");

            var localVarPath = "/v4/contacts/{id}/customForms/{formId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.Configuration.ApiClient.ParameterToString(formId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsIdCustomFormsFormIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get Custom Form Metadata for Contact Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsIdCustomFormsFormIdMetaAsync (string contentType, string authorization, string id, string formId, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetContactsIdCustomFormsFormIdMetaAsyncWithHttpInfo(contentType, authorization, id, formId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Form Metadata for Contact Gets the metadata associated with the specified custom form for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/{formId}/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsIdCustomFormsFormIdMetaAsyncWithHttpInfo (string contentType, string authorization, string id, string formId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsFormIdMeta");

            var localVarPath = "/v4/contacts/{id}/customForms/{formId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.Configuration.ApiClient.ParameterToString(formId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsIdCustomFormsFormIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Contact Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetContactsIdCustomFormsMeta (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetContactsIdCustomFormsMetaWithHttpInfo(contentType, authorization, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Contact Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetContactsIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsMeta");

            var localVarPath = "/v4/contacts/{id}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Contact Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsIdCustomFormsMetaAsync (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetContactsIdCustomFormsMetaAsyncWithHttpInfo(contentType, authorization, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms Metadata for Contact Gets the metadata associated with all custom forms for the contact. **API Endpoint**:  GET /v4/contacts/{id}/customForms/meta  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4GetContactsIdCustomFormsMeta");

            var localVarPath = "/v4/contacts/{id}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Update Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutContactsIdCustomForms (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutContactsIdCustomFormsWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutContactsIdCustomFormsWithHttpInfo (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");

            var localVarPath = "/v4/contacts/{id}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutContactsIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutContactsIdCustomFormsAsync (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutContactsIdCustomFormsAsyncWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/contacts/{id}/customForms  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the contact to fetch.</param>
        /// <param name="body">Custom forms information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;}]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutContactsIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string id, List<CustomFormModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsCustomFormsApi->V4PutContactsIdCustomForms");

            var localVarPath = "/v4/contacts/{id}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutContactsIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
