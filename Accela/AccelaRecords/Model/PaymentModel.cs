/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// PaymentModel
    /// </summary>
    [DataContract]
    public partial class PaymentModel :  IEquatable<PaymentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentModel" /> class.
        /// </summary>
        /// <param name="amount">The amount of a payment transaction or account balance..</param>
        /// <param name="amountNotAllocated">The payment amount which has not been allocated..</param>
        /// <param name="cashierId">The unique ID associated with the cashier..</param>
        /// <param name="id">The payment system id assigned by the Civic Platform server..</param>
        /// <param name="paymentDate">The date a payment was entered into the system..</param>
        /// <param name="paymentMethod">Describes the method of payment, for example; credit card, cash, debit card, and so forth..</param>
        /// <param name="paymentStatus">Indicates whether or not a payment has been made in full..</param>
        /// <param name="receiptId">The unique ID generated for the recipient..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="transactionCode">An industry standard code that identifies the type of transaction..</param>
        /// <param name="transactionId">A unique number, assigned by the system, that indentifies the transaction..</param>
        public PaymentModel(double? amount = default(double?), double? amountNotAllocated = default(double?), string cashierId = default(string), long? id = default(long?), DateTime? paymentDate = default(DateTime?), string paymentMethod = default(string), string paymentStatus = default(string), long? receiptId = default(long?), RecordIdModel recordId = default(RecordIdModel), string transactionCode = default(string), long? transactionId = default(long?))
        {
            this.Amount = amount;
            this.AmountNotAllocated = amountNotAllocated;
            this.CashierId = cashierId;
            this.Id = id;
            this.PaymentDate = paymentDate;
            this.PaymentMethod = paymentMethod;
            this.PaymentStatus = paymentStatus;
            this.ReceiptId = receiptId;
            this.RecordId = recordId;
            this.TransactionCode = transactionCode;
            this.TransactionId = transactionId;
        }
        
        /// <summary>
        /// The amount of a payment transaction or account balance.
        /// </summary>
        /// <value>The amount of a payment transaction or account balance.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// The payment amount which has not been allocated.
        /// </summary>
        /// <value>The payment amount which has not been allocated.</value>
        [DataMember(Name="amountNotAllocated", EmitDefaultValue=false)]
        public double? AmountNotAllocated { get; set; }

        /// <summary>
        /// The unique ID associated with the cashier.
        /// </summary>
        /// <value>The unique ID associated with the cashier.</value>
        [DataMember(Name="cashierId", EmitDefaultValue=false)]
        public string CashierId { get; set; }

        /// <summary>
        /// The payment system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The payment system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The date a payment was entered into the system.
        /// </summary>
        /// <value>The date a payment was entered into the system.</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Describes the method of payment, for example; credit card, cash, debit card, and so forth.
        /// </summary>
        /// <value>Describes the method of payment, for example; credit card, cash, debit card, and so forth.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public string PaymentMethod { get; set; }

        /// <summary>
        /// Indicates whether or not a payment has been made in full.
        /// </summary>
        /// <value>Indicates whether or not a payment has been made in full.</value>
        [DataMember(Name="paymentStatus", EmitDefaultValue=false)]
        public string PaymentStatus { get; set; }

        /// <summary>
        /// The unique ID generated for the recipient.
        /// </summary>
        /// <value>The unique ID generated for the recipient.</value>
        [DataMember(Name="receiptId", EmitDefaultValue=false)]
        public long? ReceiptId { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// An industry standard code that identifies the type of transaction.
        /// </summary>
        /// <value>An industry standard code that identifies the type of transaction.</value>
        [DataMember(Name="transactionCode", EmitDefaultValue=false)]
        public string TransactionCode { get; set; }

        /// <summary>
        /// A unique number, assigned by the system, that indentifies the transaction.
        /// </summary>
        /// <value>A unique number, assigned by the system, that indentifies the transaction.</value>
        [DataMember(Name="transactionId", EmitDefaultValue=false)]
        public long? TransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountNotAllocated: ").Append(AmountNotAllocated).Append("\n");
            sb.Append("  CashierId: ").Append(CashierId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentStatus: ").Append(PaymentStatus).Append("\n");
            sb.Append("  ReceiptId: ").Append(ReceiptId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  TransactionCode: ").Append(TransactionCode).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentModel);
        }

        /// <summary>
        /// Returns true if PaymentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AmountNotAllocated == input.AmountNotAllocated ||
                    (this.AmountNotAllocated != null &&
                    this.AmountNotAllocated.Equals(input.AmountNotAllocated))
                ) && 
                (
                    this.CashierId == input.CashierId ||
                    (this.CashierId != null &&
                    this.CashierId.Equals(input.CashierId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentStatus == input.PaymentStatus ||
                    (this.PaymentStatus != null &&
                    this.PaymentStatus.Equals(input.PaymentStatus))
                ) && 
                (
                    this.ReceiptId == input.ReceiptId ||
                    (this.ReceiptId != null &&
                    this.ReceiptId.Equals(input.ReceiptId))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.TransactionCode == input.TransactionCode ||
                    (this.TransactionCode != null &&
                    this.TransactionCode.Equals(input.TransactionCode))
                ) && 
                (
                    this.TransactionId == input.TransactionId ||
                    (this.TransactionId != null &&
                    this.TransactionId.Equals(input.TransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AmountNotAllocated != null)
                    hashCode = hashCode * 59 + this.AmountNotAllocated.GetHashCode();
                if (this.CashierId != null)
                    hashCode = hashCode * 59 + this.CashierId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentStatus != null)
                    hashCode = hashCode * 59 + this.PaymentStatus.GetHashCode();
                if (this.ReceiptId != null)
                    hashCode = hashCode * 59 + this.ReceiptId.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.TransactionCode != null)
                    hashCode = hashCode * 59 + this.TransactionCode.GetHashCode();
                if (this.TransactionId != null)
                    hashCode = hashCode * 59 + this.TransactionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
