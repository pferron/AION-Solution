/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// CitizenProfileModel
    /// </summary>
    [DataContract]
    public partial class CitizenProfileModel :  IEquatable<CitizenProfileModel>, IValidatableObject
    {
        /// <summary>
        /// The citizen user&#39;s role
        /// </summary>
        /// <value>The citizen user&#39;s role</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum CONTRACTINSPECTOR for value: CONTRACT_INSPECTOR
            /// </summary>
            [EnumMember(Value = "CONTRACT_INSPECTOR")]
            CONTRACTINSPECTOR = 1,
            
            /// <summary>
            /// Enum CITIZEN for value: CITIZEN
            /// </summary>
            [EnumMember(Value = "CITIZEN")]
            CITIZEN = 2,
            
            /// <summary>
            /// Enum AUTHAGENTCLERK for value: AUTH_AGENT_CLERK
            /// </summary>
            [EnumMember(Value = "AUTH_AGENT_CLERK")]
            AUTHAGENTCLERK = 3,
            
            /// <summary>
            /// Enum AUTHAGENT for value: AUTH_AGENT
            /// </summary>
            [EnumMember(Value = "AUTH_AGENT")]
            AUTHAGENT = 4,
            
            /// <summary>
            /// Enum SELFCERTIFIEDINSPECTOR for value: SELF_CERTIFIED_INSPECTOR
            /// </summary>
            [EnumMember(Value = "SELF_CERTIFIED_INSPECTOR")]
            SELFCERTIFIEDINSPECTOR = 5
        }

        /// <summary>
        /// The citizen user&#39;s role
        /// </summary>
        /// <value>The citizen user&#39;s role</value>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenProfileModel" /> class.
        /// </summary>
        /// <param name="email">The citizen user&#39;s email address..</param>
        /// <param name="id">The user id assigned by the Civic Platform server..</param>
        /// <param name="loginName">The citizen user&#39;s login name..</param>
        /// <param name="mobilePhone">The citizen user&#39;s 10-digit cell phone number..</param>
        /// <param name="receiveSMS">Indicates whether or not the user prefers to receive SMS messages..</param>
        /// <param name="registerDate">The citizen user&#39;s registration date..</param>
        /// <param name="role">The citizen user&#39;s role.</param>
        public CitizenProfileModel(string email = default(string), long? id = default(long?), string loginName = default(string), string mobilePhone = default(string), string receiveSMS = default(string), DateTime? registerDate = default(DateTime?), RoleEnum? role = default(RoleEnum?))
        {
            this.Email = email;
            this.Id = id;
            this.LoginName = loginName;
            this.MobilePhone = mobilePhone;
            this.ReceiveSMS = receiveSMS;
            this.RegisterDate = registerDate;
            this.Role = role;
        }
        
        /// <summary>
        /// The citizen user&#39;s email address.
        /// </summary>
        /// <value>The citizen user&#39;s email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The user id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The user id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The citizen user&#39;s login name.
        /// </summary>
        /// <value>The citizen user&#39;s login name.</value>
        [DataMember(Name="loginName", EmitDefaultValue=false)]
        public string LoginName { get; set; }

        /// <summary>
        /// The citizen user&#39;s 10-digit cell phone number.
        /// </summary>
        /// <value>The citizen user&#39;s 10-digit cell phone number.</value>
        [DataMember(Name="mobilePhone", EmitDefaultValue=false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// Indicates whether or not the user prefers to receive SMS messages.
        /// </summary>
        /// <value>Indicates whether or not the user prefers to receive SMS messages.</value>
        [DataMember(Name="receiveSMS", EmitDefaultValue=false)]
        public string ReceiveSMS { get; set; }

        /// <summary>
        /// The citizen user&#39;s registration date.
        /// </summary>
        /// <value>The citizen user&#39;s registration date.</value>
        [DataMember(Name="registerDate", EmitDefaultValue=false)]
        public DateTime? RegisterDate { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CitizenProfileModel {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  ReceiveSMS: ").Append(ReceiveSMS).Append("\n");
            sb.Append("  RegisterDate: ").Append(RegisterDate).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CitizenProfileModel);
        }

        /// <summary>
        /// Returns true if CitizenProfileModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CitizenProfileModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CitizenProfileModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LoginName == input.LoginName ||
                    (this.LoginName != null &&
                    this.LoginName.Equals(input.LoginName))
                ) && 
                (
                    this.MobilePhone == input.MobilePhone ||
                    (this.MobilePhone != null &&
                    this.MobilePhone.Equals(input.MobilePhone))
                ) && 
                (
                    this.ReceiveSMS == input.ReceiveSMS ||
                    (this.ReceiveSMS != null &&
                    this.ReceiveSMS.Equals(input.ReceiveSMS))
                ) && 
                (
                    this.RegisterDate == input.RegisterDate ||
                    (this.RegisterDate != null &&
                    this.RegisterDate.Equals(input.RegisterDate))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LoginName != null)
                    hashCode = hashCode * 59 + this.LoginName.GetHashCode();
                if (this.MobilePhone != null)
                    hashCode = hashCode * 59 + this.MobilePhone.GetHashCode();
                if (this.ReceiveSMS != null)
                    hashCode = hashCode * 59 + this.ReceiveSMS.GetHashCode();
                if (this.RegisterDate != null)
                    hashCode = hashCode * 59 + this.RegisterDate.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
