/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Record Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteRecordsRecordIdDocumentsDocumentIds (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null);

        /// <summary>
        /// Delete Record Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteRecordsRecordIdDocumentsDocumentIdsWithHttpInfo (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null);
        /// <summary>
        /// Get All Document Categories for Record
        /// </summary>
        /// <remarks>
        /// Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentTypeModelArray</returns>
        ResponseDocumentTypeModelArray V4GetRecordsRecordIdDocumentCategories (string contentType, string authorization, string recordId, string lang = null);

        /// <summary>
        /// Get All Document Categories for Record
        /// </summary>
        /// <remarks>
        /// Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentTypeModelArray</returns>
        ApiResponse<ResponseDocumentTypeModelArray> V4GetRecordsRecordIdDocumentCategoriesWithHttpInfo (string contentType, string authorization, string recordId, string lang = null);
        /// <summary>
        /// Get All Documents for Record
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        ResponseDocumentModelArray V4GetRecordsRecordIdDocuments (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Documents for Record
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        ApiResponse<ResponseDocumentModelArray> V4GetRecordsRecordIdDocumentsWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Create Record Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostRecordsRecordIdDocuments (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Record Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostRecordsRecordIdDocumentsWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Record Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdDocumentsDocumentIdsAsync (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null);

        /// <summary>
        /// Delete Record Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdDocumentsDocumentIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null);
        /// <summary>
        /// Get All Document Categories for Record
        /// </summary>
        /// <remarks>
        /// Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseDocumentTypeModelArray> V4GetRecordsRecordIdDocumentCategoriesAsync (string contentType, string authorization, string recordId, string lang = null);

        /// <summary>
        /// Get All Document Categories for Record
        /// </summary>
        /// <remarks>
        /// Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentTypeModelArray>> V4GetRecordsRecordIdDocumentCategoriesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string lang = null);
        /// <summary>
        /// Get All Documents for Record
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetRecordsRecordIdDocumentsAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Documents for Record
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetRecordsRecordIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Create Record Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdDocumentsAsync (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Record Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsDocumentsApi : IRecordsDocumentsApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsDocumentsApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsDocumentsApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Record Documents Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteRecordsRecordIdDocumentsDocumentIds (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteRecordsRecordIdDocumentsDocumentIdsWithHttpInfo(contentType, authorization, recordId, documentIds, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Record Documents Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteRecordsRecordIdDocumentsDocumentIdsWithHttpInfo (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'documentIds' is set
            if (documentIds == null)
                throw new ApiException(400, "Missing required parameter 'documentIds' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");

            var localVarPath = "/v4/records/{recordId}/documents/{documentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (documentIds != null) localVarPathParams.Add("documentIds", this.Configuration.ApiClient.ParameterToString(documentIds)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdDocumentsDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Record Documents Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdDocumentsDocumentIdsAsync (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteRecordsRecordIdDocumentsDocumentIdsAsyncWithHttpInfo(contentType, authorization, recordId, documentIds, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Record Documents Deletes documents attached to a record. **API Endpoint**:  DELETE /v4/records/{recordId}/documents/{documentIds}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdDocumentsDocumentIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string documentIds, string userId, string password, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'documentIds' is set
            if (documentIds == null)
                throw new ApiException(400, "Missing required parameter 'documentIds' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling RecordsDocumentsApi->V4DeleteRecordsRecordIdDocumentsDocumentIds");

            var localVarPath = "/v4/records/{recordId}/documents/{documentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (documentIds != null) localVarPathParams.Add("documentIds", this.Configuration.ApiClient.ParameterToString(documentIds)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdDocumentsDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Document Categories for Record Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentTypeModelArray</returns>
        public ResponseDocumentTypeModelArray V4GetRecordsRecordIdDocumentCategories (string contentType, string authorization, string recordId, string lang = null)
        {
             ApiResponse<ResponseDocumentTypeModelArray> localVarResponse = V4GetRecordsRecordIdDocumentCategoriesWithHttpInfo(contentType, authorization, recordId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Document Categories for Record Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentTypeModelArray</returns>
        public ApiResponse< ResponseDocumentTypeModelArray > V4GetRecordsRecordIdDocumentCategoriesWithHttpInfo (string contentType, string authorization, string recordId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocumentCategories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocumentCategories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocumentCategories");

            var localVarPath = "/v4/records/{recordId}/documentCategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdDocumentCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentTypeModelArray)));
        }

        /// <summary>
        /// Get All Document Categories for Record Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentTypeModelArray> V4GetRecordsRecordIdDocumentCategoriesAsync (string contentType, string authorization, string recordId, string lang = null)
        {
             ApiResponse<ResponseDocumentTypeModelArray> localVarResponse = await V4GetRecordsRecordIdDocumentCategoriesAsyncWithHttpInfo(contentType, authorization, recordId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Document Categories for Record Gets the document types associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documentCategories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentTypeModelArray>> V4GetRecordsRecordIdDocumentCategoriesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocumentCategories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocumentCategories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocumentCategories");

            var localVarPath = "/v4/records/{recordId}/documentCategories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdDocumentCategories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentTypeModelArray)));
        }

        /// <summary>
        /// Get All Documents for Record Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        public ResponseDocumentModelArray V4GetRecordsRecordIdDocuments (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = V4GetRecordsRecordIdDocumentsWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Documents for Record Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        public ApiResponse< ResponseDocumentModelArray > V4GetRecordsRecordIdDocumentsWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocuments");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocuments");

            var localVarPath = "/v4/records/{recordId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Get All Documents for Record Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetRecordsRecordIdDocumentsAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = await V4GetRecordsRecordIdDocumentsAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Documents for Record Gets the documents associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/documents  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetRecordsRecordIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocuments");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4GetRecordsRecordIdDocuments");

            var localVarPath = "/v4/records/{recordId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Create Record Documents Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostRecordsRecordIdDocuments (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostRecordsRecordIdDocumentsWithHttpInfo(contentType, authorization, recordId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Record Documents Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostRecordsRecordIdDocumentsWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'fileInfo' is set
            if (fileInfo == null)
                throw new ApiException(400, "Missing required parameter 'fileInfo' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");

            var localVarPath = "/v4/records/{recordId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Record Documents Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdDocumentsAsync (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostRecordsRecordIdDocumentsAsyncWithHttpInfo(contentType, authorization, recordId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Record Documents Creates one or more document attachments for the specified record. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. See the example for details. **API Endpoint**:  POST /v4/records/{recordId}/documents   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group (optional)</param>
        /// <param name="category">The document category (optional)</param>
        /// <param name="userId">The EDMS Adapter User ID. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");
            // verify the required parameter 'fileInfo' is set
            if (fileInfo == null)
                throw new ApiException(400, "Missing required parameter 'fileInfo' when calling RecordsDocumentsApi->V4PostRecordsRecordIdDocuments");

            var localVarPath = "/v4/records/{recordId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                contentType
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
