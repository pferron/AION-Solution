/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsContactsCustomTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Custom Tables for Record Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        ResponseTableModelArray V4GetRecordsRecordIdContactsContactIdCustomTables (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Record Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        ApiResponse<ResponseTableModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdContactsContactIdCustomTablesMeta (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        ApiResponse<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get Metadata of a Record Contact Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Metadata of a Record Contact Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        ApiResponse<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutRecordsRecordIdContactsContactIdCustomTables (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutRecordsRecordIdContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Custom Tables for Record Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        System.Threading.Tasks.Task<ResponseTableModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesAsync (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Record Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetRecordsRecordIdContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesMetaAsync (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdContactsContactIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get Metadata of a Record Contact Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaAsync (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Metadata of a Record Contact Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdContactsContactIdCustomTablesAsync (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsContactsCustomTablesApi : IRecordsContactsCustomTablesApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContactsCustomTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsContactsCustomTablesApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContactsCustomTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsContactsCustomTablesApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Custom Tables for Record Contact Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        public ResponseTableModelArray V4GetRecordsRecordIdContactsContactIdCustomTables (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomTablesWithHttpInfo(contentType, authorization, recordId, contactId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables for Record Contact Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        public ApiResponse< ResponseTableModelArray > V4GetRecordsRecordIdContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables for Record Contact Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTableModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesAsync (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdCustomTablesAsyncWithHttpInfo(contentType, authorization, recordId, contactId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables for Record Contact Gets the custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetRecordsRecordIdContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        public ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdContactsContactIdCustomTablesMeta (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomTablesMetaWithHttpInfo(contentType, authorization, recordId, contactId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        public ApiResponse< ResponseCustomFormSubgroupModelArray > V4GetRecordsRecordIdContactsContactIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesMetaAsync (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdCustomTablesMetaAsyncWithHttpInfo(contentType, authorization, recordId, contactId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Metadata of All Record Contact Custom Tables Gets the metadata of all custom tables associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdContactsContactIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get Metadata of a Record Contact Custom Table Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        public ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaWithHttpInfo(contentType, authorization, recordId, contactId, tableId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Metadata of a Record Contact Custom Table Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        public ApiResponse< ResponseCustomFormSubgroupModelArray > V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get Metadata of a Record Contact Custom Table Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaAsync (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaAsyncWithHttpInfo(contentType, authorization, recordId, contactId, tableId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Metadata of a Record Contact Custom Table Gets the metadata of a specified custom table associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="tableId">The custom table ID to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling RecordsContactsCustomTablesApi->V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutRecordsRecordIdContactsContactIdCustomTables (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutRecordsRecordIdContactsContactIdCustomTablesWithHttpInfo(contentType, authorization, recordId, contactId, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutRecordsRecordIdContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdContactsContactIdCustomTablesAsync (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutRecordsRecordIdContactsContactIdCustomTablesAsyncWithHttpInfo(contentType, authorization, recordId, contactId, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom tables for the specified record contact. The request body is an array of custom tables, each with the custom table id and an array of rows. Use this API to add, update and delete rows from an existing custom table. (Custom tables are defined in Civic Platform.) Note that the modified custom table data only applies to the transactional record contact, not the reference contact. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customTables  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom table information to be updated. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<TableModel> body = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomTablesApi->V4PutRecordsRecordIdContactsContactIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
