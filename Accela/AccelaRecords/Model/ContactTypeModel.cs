/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// ContactTypeModel
    /// </summary>
    [DataContract]
    public partial class ContactTypeModel :  IEquatable<ContactTypeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactTypeModel" /> class.
        /// </summary>
        /// <param name="maxOccurance">The maximum number of times a contact type is used..</param>
        /// <param name="minOccurance">The minimum number of times a contact type is used..</param>
        /// <param name="value">The contact type value..</param>
        public ContactTypeModel(long? maxOccurance = default(long?), long? minOccurance = default(long?), string value = default(string))
        {
            this.MaxOccurance = maxOccurance;
            this.MinOccurance = minOccurance;
            this.Value = value;
        }
        
        /// <summary>
        /// The maximum number of times a contact type is used.
        /// </summary>
        /// <value>The maximum number of times a contact type is used.</value>
        [DataMember(Name="maxOccurance", EmitDefaultValue=false)]
        public long? MaxOccurance { get; set; }

        /// <summary>
        /// The minimum number of times a contact type is used.
        /// </summary>
        /// <value>The minimum number of times a contact type is used.</value>
        [DataMember(Name="minOccurance", EmitDefaultValue=false)]
        public long? MinOccurance { get; set; }

        /// <summary>
        /// The contact type value.
        /// </summary>
        /// <value>The contact type value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactTypeModel {\n");
            sb.Append("  MaxOccurance: ").Append(MaxOccurance).Append("\n");
            sb.Append("  MinOccurance: ").Append(MinOccurance).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactTypeModel);
        }

        /// <summary>
        /// Returns true if ContactTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxOccurance == input.MaxOccurance ||
                    (this.MaxOccurance != null &&
                    this.MaxOccurance.Equals(input.MaxOccurance))
                ) && 
                (
                    this.MinOccurance == input.MinOccurance ||
                    (this.MinOccurance != null &&
                    this.MinOccurance.Equals(input.MinOccurance))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MaxOccurance != null)
                    hashCode = hashCode * 59 + this.MaxOccurance.GetHashCode();
                if (this.MinOccurance != null)
                    hashCode = hashCode * 59 + this.MinOccurance.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
