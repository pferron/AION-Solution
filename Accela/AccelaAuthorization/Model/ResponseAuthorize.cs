/* 
 * Authentication
 *
 * Construct's OAuth2 APIs for generating API access tokens. For an overview, see [Construct API Authentication](../construct-apiAuth.html).
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAuthorization.Client.SwaggerDateConverter;

namespace AccelaAuthorization.Model
{
    /// <summary>
    /// ResponseAuthorize
    /// </summary>
    [DataContract]
        public partial class ResponseAuthorize :  IEquatable<ResponseAuthorize>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseAuthorize" /> class.
        /// </summary>
        /// <param name="code">The authorization code (for an authorization code flow request where response_type&#x3D;code). The client app uses the authorization code to exchange for an access token..</param>
        /// <param name="environment">The environment name that the user selected when signing into the app (for an authorization code flow request where response_type&#x3D;code).   For an implicit flow request where response_type&#x3D;token, environment is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        /// <param name="agencyName">The agency name that the user entered when signing into the app (for an authorization code flow request where response_type&#x3D;code).   For an implicit flow request where response_type&#x3D;token, agency_name is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        /// <param name="state">The exact value received from the client (for an authorization code flow request where response_type&#x3D;code). Check this value against original state value sent in the request to verify and protect against CSRF.   For an implicit flow request where response_type&#x3D;token, state is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        /// <param name="accessToken">The issued user access token (for an implicit flow request where response_type&#x3D;token). access_token is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        /// <param name="tokenType">The type of the token issued (for an implicit flow request where response_type&#x3D;token). token_type is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        /// <param name="expiresIn">The lifetime in seconds of the access token (for an implicit flow request where response_type&#x3D;token). For example, the value \&quot;3600\&quot; denotes that the access token will expire in one hour from the time the response was generated. expires_in is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        /// <param name="scope">The scope of the resources authenticated by the authorization server (for an implicit flow request where response_type&#x3D;token). scope is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. .</param>
        public ResponseAuthorize(string code = default(string), string environment = default(string), string agencyName = default(string), string state = default(string), string accessToken = default(string), string tokenType = default(string), string expiresIn = default(string), string scope = default(string))
        {
            this.Code = code;
            this.Environment = environment;
            this.AgencyName = agencyName;
            this.State = state;
            this.AccessToken = accessToken;
            this.TokenType = tokenType;
            this.ExpiresIn = expiresIn;
            this.Scope = scope;
        }
        
        /// <summary>
        /// The authorization code (for an authorization code flow request where response_type&#x3D;code). The client app uses the authorization code to exchange for an access token.
        /// </summary>
        /// <value>The authorization code (for an authorization code flow request where response_type&#x3D;code). The client app uses the authorization code to exchange for an access token.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The environment name that the user selected when signing into the app (for an authorization code flow request where response_type&#x3D;code).   For an implicit flow request where response_type&#x3D;token, environment is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The environment name that the user selected when signing into the app (for an authorization code flow request where response_type&#x3D;code).   For an implicit flow request where response_type&#x3D;token, environment is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string Environment { get; set; }

        /// <summary>
        /// The agency name that the user entered when signing into the app (for an authorization code flow request where response_type&#x3D;code).   For an implicit flow request where response_type&#x3D;token, agency_name is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The agency name that the user entered when signing into the app (for an authorization code flow request where response_type&#x3D;code).   For an implicit flow request where response_type&#x3D;token, agency_name is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="agency_name", EmitDefaultValue=false)]
        public string AgencyName { get; set; }

        /// <summary>
        /// The exact value received from the client (for an authorization code flow request where response_type&#x3D;code). Check this value against original state value sent in the request to verify and protect against CSRF.   For an implicit flow request where response_type&#x3D;token, state is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The exact value received from the client (for an authorization code flow request where response_type&#x3D;code). Check this value against original state value sent in the request to verify and protect against CSRF.   For an implicit flow request where response_type&#x3D;token, state is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The issued user access token (for an implicit flow request where response_type&#x3D;token). access_token is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The issued user access token (for an implicit flow request where response_type&#x3D;token). access_token is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="access_token", EmitDefaultValue=false)]
        public string AccessToken { get; set; }

        /// <summary>
        /// The type of the token issued (for an implicit flow request where response_type&#x3D;token). token_type is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The type of the token issued (for an implicit flow request where response_type&#x3D;token). token_type is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="token_type", EmitDefaultValue=false)]
        public string TokenType { get; set; }

        /// <summary>
        /// The lifetime in seconds of the access token (for an implicit flow request where response_type&#x3D;token). For example, the value \&quot;3600\&quot; denotes that the access token will expire in one hour from the time the response was generated. expires_in is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The lifetime in seconds of the access token (for an implicit flow request where response_type&#x3D;token). For example, the value \&quot;3600\&quot; denotes that the access token will expire in one hour from the time the response was generated. expires_in is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="expires_in", EmitDefaultValue=false)]
        public string ExpiresIn { get; set; }

        /// <summary>
        /// The scope of the resources authenticated by the authorization server (for an implicit flow request where response_type&#x3D;token). scope is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. 
        /// </summary>
        /// <value>The scope of the resources authenticated by the authorization server (for an implicit flow request where response_type&#x3D;token). scope is returned as a parameter in the redirection URI using the \&quot;application/x-www-form-urlencoded\&quot; format. </value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseAuthorize {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Environment: ").Append(Environment).Append("\n");
            sb.Append("  AgencyName: ").Append(AgencyName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
            sb.Append("  TokenType: ").Append(TokenType).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseAuthorize);
        }

        /// <summary>
        /// Returns true if ResponseAuthorize instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseAuthorize to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseAuthorize input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Environment == input.Environment ||
                    (this.Environment != null &&
                    this.Environment.Equals(input.Environment))
                ) && 
                (
                    this.AgencyName == input.AgencyName ||
                    (this.AgencyName != null &&
                    this.AgencyName.Equals(input.AgencyName))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.AccessToken == input.AccessToken ||
                    (this.AccessToken != null &&
                    this.AccessToken.Equals(input.AccessToken))
                ) && 
                (
                    this.TokenType == input.TokenType ||
                    (this.TokenType != null &&
                    this.TokenType.Equals(input.TokenType))
                ) && 
                (
                    this.ExpiresIn == input.ExpiresIn ||
                    (this.ExpiresIn != null &&
                    this.ExpiresIn.Equals(input.ExpiresIn))
                ) && 
                (
                    this.Scope == input.Scope ||
                    (this.Scope != null &&
                    this.Scope.Equals(input.Scope))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Environment != null)
                    hashCode = hashCode * 59 + this.Environment.GetHashCode();
                if (this.AgencyName != null)
                    hashCode = hashCode * 59 + this.AgencyName.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.AccessToken != null)
                    hashCode = hashCode * 59 + this.AccessToken.GetHashCode();
                if (this.TokenType != null)
                    hashCode = hashCode * 59 + this.TokenType.GetHashCode();
                if (this.ExpiresIn != null)
                    hashCode = hashCode * 59 + this.ExpiresIn.GetHashCode();
                if (this.Scope != null)
                    hashCode = hashCode * 59 + this.Scope.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
