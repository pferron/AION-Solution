/* 
 * Documents
 *
 * Document and DocumentReview APIs
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaDocuments.Client;
using AccelaDocuments.Model;

namespace AccelaDocuments.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 V4GetDocumentsDocumentIdDownload (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> V4GetDocumentsDocumentIdDownloadWithHttpInfo (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Get Image Document Thumbnail
        /// </summary>
        /// <remarks>
        /// Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>byte[]</returns>
        byte[] V4GetDocumentsDocumentIdThumbnail (string contentType, string authorization, string documentId, int? height = null, int? width = null);

        /// <summary>
        /// Get Image Document Thumbnail
        /// </summary>
        /// <remarks>
        /// Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> V4GetDocumentsDocumentIdThumbnailWithHttpInfo (string contentType, string authorization, string documentId, int? height = null, int? width = null);
        /// <summary>
        /// Get Documents
        /// </summary>
        /// <remarks>
        /// Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        ResponseDocumentModelArray V4GetDocumentsDocumentIds (string contentType, string authorization, string documentIds, string fields = null, string lang = null);

        /// <summary>
        /// Get Documents
        /// </summary>
        /// <remarks>
        /// Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        ApiResponse<ResponseDocumentModelArray> V4GetDocumentsDocumentIdsWithHttpInfo (string contentType, string authorization, string documentIds, string fields = null, string lang = null);
        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModel</returns>
        ResponseDocumentModel V4PutDocumentsDocumentId (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null);

        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModel</returns>
        ApiResponse<ResponseDocumentModel> V4PutDocumentsDocumentIdWithHttpInfo (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> V4GetDocumentsDocumentIdDownloadAsync (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Download Document
        /// </summary>
        /// <remarks>
        /// Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V4GetDocumentsDocumentIdDownloadAsyncWithHttpInfo (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Get Image Document Thumbnail
        /// </summary>
        /// <remarks>
        /// Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> V4GetDocumentsDocumentIdThumbnailAsync (string contentType, string authorization, string documentId, int? height = null, int? width = null);

        /// <summary>
        /// Get Image Document Thumbnail
        /// </summary>
        /// <remarks>
        /// Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> V4GetDocumentsDocumentIdThumbnailAsyncWithHttpInfo (string contentType, string authorization, string documentId, int? height = null, int? width = null);
        /// <summary>
        /// Get Documents
        /// </summary>
        /// <remarks>
        /// Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetDocumentsDocumentIdsAsync (string contentType, string authorization, string documentIds, string fields = null, string lang = null);

        /// <summary>
        /// Get Documents
        /// </summary>
        /// <remarks>
        /// Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetDocumentsDocumentIdsAsyncWithHttpInfo (string contentType, string authorization, string documentIds, string fields = null, string lang = null);
        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModel</returns>
        System.Threading.Tasks.Task<ResponseDocumentModel> V4PutDocumentsDocumentIdAsync (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null);

        /// <summary>
        /// Update Document
        /// </summary>
        /// <remarks>
        /// Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModel>> V4PutDocumentsDocumentIdAsyncWithHttpInfo (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DocumentsApi : IDocumentsApi
    {
        private AccelaDocuments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new AccelaDocuments.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentsApi()
        {
            this.Configuration = AccelaDocuments.Client.Configuration.Default;

            ExceptionFactory = AccelaDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(AccelaDocuments.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaDocuments.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaDocuments.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaDocuments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Download Document Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 V4GetDocumentsDocumentIdDownload (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = V4GetDocumentsDocumentIdDownloadWithHttpInfo(contentType, authorization, documentId, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Download Document Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > V4GetDocumentsDocumentIdDownloadWithHttpInfo (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4GetDocumentsDocumentIdDownload");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4GetDocumentsDocumentIdDownload");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->V4GetDocumentsDocumentIdDownload");

            var localVarPath = "/v4/documents/{documentId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentsDocumentIdDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Download Document Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> V4GetDocumentsDocumentIdDownloadAsync (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await V4GetDocumentsDocumentIdDownloadAsyncWithHttpInfo(contentType, authorization, documentId, userId, password, lang);
            return localVarResponse.Data;


        }

        /// <summary>
        /// Download Document Downloads the requested document. **API Endpoint**:  GET /v4/documents/{documentId}/download  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="userId">The EDMS userid for user level authentication. (optional)</param>
        /// <param name="password">The EDMS password for user level authentication. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V4GetDocumentsDocumentIdDownloadAsyncWithHttpInfo (string contentType, string authorization, string documentId, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4GetDocumentsDocumentIdDownload");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4GetDocumentsDocumentIdDownload");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->V4GetDocumentsDocumentIdDownload");

            var localVarPath = "/v4/documents/{documentId}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentsDocumentIdDownload", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get Image Document Thumbnail Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>byte[]</returns>
        public byte[] V4GetDocumentsDocumentIdThumbnail (string contentType, string authorization, string documentId, int? height = null, int? width = null)
        {
             ApiResponse<byte[]> localVarResponse = V4GetDocumentsDocumentIdThumbnailWithHttpInfo(contentType, authorization, documentId, height, width);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Image Document Thumbnail Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > V4GetDocumentsDocumentIdThumbnailWithHttpInfo (string contentType, string authorization, string documentId, int? height = null, int? width = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4GetDocumentsDocumentIdThumbnail");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4GetDocumentsDocumentIdThumbnail");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->V4GetDocumentsDocumentIdThumbnail");

            var localVarPath = "/v4/documents/{documentId}/thumbnail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentsDocumentIdThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get Image Document Thumbnail Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> V4GetDocumentsDocumentIdThumbnailAsync (string contentType, string authorization, string documentId, int? height = null, int? width = null)
        {
             ApiResponse<byte[]> localVarResponse = await V4GetDocumentsDocumentIdThumbnailAsyncWithHttpInfo(contentType, authorization, documentId, height, width);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Image Document Thumbnail Gets the thumbnail for the requested {documentId} of an image file. **API Endpoint**:  GET /v4/documents/{documentId}/thumbnail  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="height">The height of the thumbnail. (optional)</param>
        /// <param name="width">The width of the thumbnail. (optional)</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> V4GetDocumentsDocumentIdThumbnailAsyncWithHttpInfo (string contentType, string authorization, string documentId, int? height = null, int? width = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4GetDocumentsDocumentIdThumbnail");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4GetDocumentsDocumentIdThumbnail");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->V4GetDocumentsDocumentIdThumbnail");

            var localVarPath = "/v4/documents/{documentId}/thumbnail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (height != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "height", height)); // query parameter
            if (width != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "width", width)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentsDocumentIdThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Get Documents Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        public ResponseDocumentModelArray V4GetDocumentsDocumentIds (string contentType, string authorization, string documentIds, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = V4GetDocumentsDocumentIdsWithHttpInfo(contentType, authorization, documentIds, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Documents Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        public ApiResponse< ResponseDocumentModelArray > V4GetDocumentsDocumentIdsWithHttpInfo (string contentType, string authorization, string documentIds, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4GetDocumentsDocumentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4GetDocumentsDocumentIds");
            // verify the required parameter 'documentIds' is set
            if (documentIds == null)
                throw new ApiException(400, "Missing required parameter 'documentIds' when calling DocumentsApi->V4GetDocumentsDocumentIds");

            var localVarPath = "/v4/documents/{documentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentIds != null) localVarPathParams.Add("documentIds", this.Configuration.ApiClient.ParameterToString(documentIds)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentsDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Get Documents Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetDocumentsDocumentIdsAsync (string contentType, string authorization, string documentIds, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = await V4GetDocumentsDocumentIdsAsyncWithHttpInfo(contentType, authorization, documentIds, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Documents Gets a list of requested documents. **API Endpoint**:  GET /v4/documents/{documentIds}  **Scope**:  documents  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentIds">Comma-delimited document ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetDocumentsDocumentIdsAsyncWithHttpInfo (string contentType, string authorization, string documentIds, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4GetDocumentsDocumentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4GetDocumentsDocumentIds");
            // verify the required parameter 'documentIds' is set
            if (documentIds == null)
                throw new ApiException(400, "Missing required parameter 'documentIds' when calling DocumentsApi->V4GetDocumentsDocumentIds");

            var localVarPath = "/v4/documents/{documentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentIds != null) localVarPathParams.Add("documentIds", this.Configuration.ApiClient.ParameterToString(documentIds)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentsDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Update Document Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModel</returns>
        public ResponseDocumentModel V4PutDocumentsDocumentId (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModel> localVarResponse = V4PutDocumentsDocumentIdWithHttpInfo(contentType, authorization, documentId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Document Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModel</returns>
        public ApiResponse< ResponseDocumentModel > V4PutDocumentsDocumentIdWithHttpInfo (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4PutDocumentsDocumentId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4PutDocumentsDocumentId");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->V4PutDocumentsDocumentId");

            var localVarPath = "/v4/Documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutDocumentsDocumentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModel)));
        }

        /// <summary>
        /// Update Document Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModel</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentModel> V4PutDocumentsDocumentIdAsync (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModel> localVarResponse = await V4PutDocumentsDocumentIdAsyncWithHttpInfo(contentType, authorization, documentId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Document Updates the specified document. **API Endpoint**:  PUT /v4/documents/{documentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="body">Document request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModel>> V4PutDocumentsDocumentIdAsyncWithHttpInfo (string contentType, string authorization, string documentId, DocumentModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentsApi->V4PutDocumentsDocumentId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->V4PutDocumentsDocumentId");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentsApi->V4PutDocumentsDocumentId");

            var localVarPath = "/v4/Documents/{documentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                contentType
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutDocumentsDocumentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModel)));
        }

    }
}
