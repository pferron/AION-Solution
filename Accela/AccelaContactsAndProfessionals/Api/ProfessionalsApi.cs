/* 
 * Contacts and Professionals
 *
 * The Contacts and Professionals APIs enable apps to manage reference contacts and licensed professionals.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaContactsAndProfessionals.Client;
using AccelaContactsAndProfessionals.Model;

namespace AccelaContactsAndProfessionals.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProfessionalsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Professionals
        /// </summary>
        /// <remarks>
        /// Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseLicenseModelArray</returns>
        ResponseLicenseModelArray V4GetProfessionals (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Professionals
        /// </summary>
        /// <remarks>
        /// Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseLicenseModelArray</returns>
        ApiResponse<ResponseLicenseModelArray> V4GetProfessionalsWithHttpInfo (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Professionals
        /// </summary>
        /// <remarks>
        /// Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseLicenseModelArray</returns>
        ResponseLicenseModelArray V4GetProfessionalsIds (string contentType, string authorization, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Get Professionals
        /// </summary>
        /// <remarks>
        /// Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseLicenseModelArray</returns>
        ApiResponse<ResponseLicenseModelArray> V4GetProfessionalsIdsWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Professionals
        /// </summary>
        /// <remarks>
        /// Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseLicenseModelArray</returns>
        System.Threading.Tasks.Task<ResponseLicenseModelArray> V4GetProfessionalsAsync (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Professionals
        /// </summary>
        /// <remarks>
        /// Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseLicenseModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseLicenseModelArray>> V4GetProfessionalsAsyncWithHttpInfo (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Professionals
        /// </summary>
        /// <remarks>
        /// Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseLicenseModelArray</returns>
        System.Threading.Tasks.Task<ResponseLicenseModelArray> V4GetProfessionalsIdsAsync (string contentType, string authorization, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Get Professionals
        /// </summary>
        /// <remarks>
        /// Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseLicenseModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseLicenseModelArray>> V4GetProfessionalsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProfessionalsApi : IProfessionalsApi
    {
        private AccelaContactsAndProfessionals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfessionalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProfessionalsApi(String basePath)
        {
            this.Configuration = new AccelaContactsAndProfessionals.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProfessionalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProfessionalsApi(AccelaContactsAndProfessionals.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaContactsAndProfessionals.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaContactsAndProfessionals.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaContactsAndProfessionals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Professionals Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseLicenseModelArray</returns>
        public ResponseLicenseModelArray V4GetProfessionals (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseLicenseModelArray> localVarResponse = V4GetProfessionalsWithHttpInfo(contentType, authorization, id, licenseType, licenseNumber, licenseState, state, country, firstName, middleName, lastName, email, addressLine1, addressLine2, addressLine3, businessLicense, businessName, city, licenseExpirationDate, licenseIssueDate, lastRenewalDate, title, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Professionals Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseLicenseModelArray</returns>
        public ApiResponse< ResponseLicenseModelArray > V4GetProfessionalsWithHttpInfo (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ProfessionalsApi->V4GetProfessionals");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProfessionalsApi->V4GetProfessionals");

            var localVarPath = "/v4/professionals/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (licenseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseType", licenseType)); // query parameter
            if (licenseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseNumber", licenseNumber)); // query parameter
            if (licenseState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseState", licenseState)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (addressLine1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressLine1", addressLine1)); // query parameter
            if (addressLine2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressLine2", addressLine2)); // query parameter
            if (addressLine3 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressLine3", addressLine3)); // query parameter
            if (businessLicense != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessLicense", businessLicense)); // query parameter
            if (businessName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessName", businessName)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (licenseExpirationDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseExpirationDate", licenseExpirationDate)); // query parameter
            if (licenseIssueDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseIssueDate", licenseIssueDate)); // query parameter
            if (lastRenewalDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastRenewalDate", lastRenewalDate)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetProfessionals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseLicenseModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseLicenseModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseLicenseModelArray)));
        }

        /// <summary>
        /// Get All Professionals Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseLicenseModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseLicenseModelArray> V4GetProfessionalsAsync (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseLicenseModelArray> localVarResponse = await V4GetProfessionalsAsyncWithHttpInfo(contentType, authorization, id, licenseType, licenseNumber, licenseState, state, country, firstName, middleName, lastName, email, addressLine1, addressLine2, addressLine3, businessLicense, businessName, city, licenseExpirationDate, licenseIssueDate, lastRenewalDate, title, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Professionals Gets all professionals in the agency database. **API Endpoint**:  GET /v4/professionals/  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">Filter by License ID (optional)</param>
        /// <param name="licenseType">Filter by License Type (optional)</param>
        /// <param name="licenseNumber">Filter by License Number (optional)</param>
        /// <param name="licenseState">Filter by License State (optional)</param>
        /// <param name="state">Filter by Address State (optional)</param>
        /// <param name="country">Filter by Country (optional)</param>
        /// <param name="firstName">Filter by License Contact First Name (optional)</param>
        /// <param name="middleName">Filter by License Contact Middle Name (optional)</param>
        /// <param name="lastName">Filter by License Contact Last Name (optional)</param>
        /// <param name="email">Filter by Email (optional)</param>
        /// <param name="addressLine1">Filter by first line of address. (optional)</param>
        /// <param name="addressLine2">Filter by second line of address. (optional)</param>
        /// <param name="addressLine3">Filter by third line of address. (optional)</param>
        /// <param name="businessLicense">Filter by Business License (optional)</param>
        /// <param name="businessName">Filter by Business Name (optional)</param>
        /// <param name="city">Filter by City (optional)</param>
        /// <param name="licenseExpirationDate">Filter by License Expiration Date (optional)</param>
        /// <param name="licenseIssueDate">Filter by License Issue Date (optional)</param>
        /// <param name="lastRenewalDate">Filter by License Last Renewal Date (optional)</param>
        /// <param name="title">Filter by Title (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseLicenseModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseLicenseModelArray>> V4GetProfessionalsAsyncWithHttpInfo (string contentType, string authorization, string id = null, string licenseType = null, string licenseNumber = null, string licenseState = null, string state = null, string country = null, string firstName = null, string middleName = null, string lastName = null, string email = null, string addressLine1 = null, string addressLine2 = null, string addressLine3 = null, string businessLicense = null, string businessName = null, string city = null, string licenseExpirationDate = null, string licenseIssueDate = null, string lastRenewalDate = null, string title = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ProfessionalsApi->V4GetProfessionals");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProfessionalsApi->V4GetProfessionals");

            var localVarPath = "/v4/professionals/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (licenseType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseType", licenseType)); // query parameter
            if (licenseNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseNumber", licenseNumber)); // query parameter
            if (licenseState != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseState", licenseState)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (addressLine1 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressLine1", addressLine1)); // query parameter
            if (addressLine2 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressLine2", addressLine2)); // query parameter
            if (addressLine3 != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "addressLine3", addressLine3)); // query parameter
            if (businessLicense != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessLicense", businessLicense)); // query parameter
            if (businessName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "businessName", businessName)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (licenseExpirationDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseExpirationDate", licenseExpirationDate)); // query parameter
            if (licenseIssueDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "licenseIssueDate", licenseIssueDate)); // query parameter
            if (lastRenewalDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastRenewalDate", lastRenewalDate)); // query parameter
            if (title != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "title", title)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetProfessionals", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseLicenseModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseLicenseModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseLicenseModelArray)));
        }

        /// <summary>
        /// Get Professionals Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseLicenseModelArray</returns>
        public ResponseLicenseModelArray V4GetProfessionalsIds (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseLicenseModelArray> localVarResponse = V4GetProfessionalsIdsWithHttpInfo(contentType, authorization, ids, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Professionals Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseLicenseModelArray</returns>
        public ApiResponse< ResponseLicenseModelArray > V4GetProfessionalsIdsWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ProfessionalsApi->V4GetProfessionalsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProfessionalsApi->V4GetProfessionalsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ProfessionalsApi->V4GetProfessionalsIds");

            var localVarPath = "/v4/professionals/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetProfessionalsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseLicenseModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseLicenseModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseLicenseModelArray)));
        }

        /// <summary>
        /// Get Professionals Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseLicenseModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseLicenseModelArray> V4GetProfessionalsIdsAsync (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseLicenseModelArray> localVarResponse = await V4GetProfessionalsIdsAsyncWithHttpInfo(contentType, authorization, ids, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Professionals Gets information for one or more specified professionals. **API Endpoint**:  GET /v4/professionals/{ids}  **Scope**:  professionals  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of professionals to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseLicenseModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseLicenseModelArray>> V4GetProfessionalsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ProfessionalsApi->V4GetProfessionalsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ProfessionalsApi->V4GetProfessionalsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling ProfessionalsApi->V4GetProfessionalsIds");

            var localVarPath = "/v4/professionals/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetProfessionalsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseLicenseModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseLicenseModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseLicenseModelArray)));
        }

    }
}
