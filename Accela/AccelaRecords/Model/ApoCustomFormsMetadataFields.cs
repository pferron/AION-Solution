/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// Describes the metadata of a custom field.  Added in Civic Platform version: 9.2.0
    /// </summary>
    [DataContract]
    public partial class ApoCustomFormsMetadataFields :  IEquatable<ApoCustomFormsMetadataFields>, IValidatableObject
    {
        /// <summary>
        /// The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values.
        /// </summary>
        /// <value>The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeEnum
        {
            
            /// <summary>
            /// Enum Number for value: Number
            /// </summary>
            [EnumMember(Value = "Number")]
            Number = 1,
            
            /// <summary>
            /// Enum Text for value: Text
            /// </summary>
            [EnumMember(Value = "Text")]
            Text = 2,
            
            /// <summary>
            /// Enum Date for value: Date
            /// </summary>
            [EnumMember(Value = "Date")]
            Date = 3,
            
            /// <summary>
            /// Enum Radio for value: Radio
            /// </summary>
            [EnumMember(Value = "Radio")]
            Radio = 4,
            
            /// <summary>
            /// Enum DropdownList for value: DropdownList
            /// </summary>
            [EnumMember(Value = "DropdownList")]
            DropdownList = 5
        }

        /// <summary>
        /// The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values.
        /// </summary>
        /// <value>The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values.</value>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        public DataTypeEnum? DataType { get; set; }
        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Indicates whether or not a citizen user can see this field.
        /// </summary>
        /// <value>Indicates whether or not a citizen user can see this field.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsPublicVisibleEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not a citizen user can see this field.
        /// </summary>
        /// <value>Indicates whether or not a citizen user can see this field.</value>
        [DataMember(Name="isPublicVisible", EmitDefaultValue=false)]
        public IsPublicVisibleEnum? IsPublicVisible { get; set; }
        /// <summary>
        /// Indicates whether or not the field is searchable.
        /// </summary>
        /// <value>Indicates whether or not the field is searchable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRecordSearchableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the field is searchable.
        /// </summary>
        /// <value>Indicates whether or not the field is searchable.</value>
        [DataMember(Name="isRecordSearchable", EmitDefaultValue=false)]
        public IsRecordSearchableEnum? IsRecordSearchable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApoCustomFormsMetadataFields" /> class.
        /// </summary>
        /// <param name="id">The unique custom field id..</param>
        /// <param name="name">The field name..</param>
        /// <param name="description">Describes the usage or purpose of the custom field..</param>
        /// <param name="label">label.</param>
        /// <param name="dataType">The field data type. If the custom field is a DropdownList, the options[] array contains the list of possible values, or the sharedDropdownListName specifies the name of a shared dropdown list containing the possible values..</param>
        /// <param name="defaultValue">Any default value for the custom field..</param>
        /// <param name="displayOrder">The display order of the field on the custom form..</param>
        /// <param name="unit">The unit of measure of a numeric custom field..</param>
        /// <param name="isRequired">Indicates whether or not the field is required..</param>
        /// <param name="isPublicVisible">Indicates whether or not a citizen user can see this field..</param>
        /// <param name="isRecordSearchable">Indicates whether or not the field is searchable..</param>
        /// <param name="maxLength">The field maximum length..</param>
        /// <param name="options">Contains possible field values, if the field is a dropdown field type..</param>
        /// <param name="sharedDropdownListName">The name of the shared dropdown list, if the field is a dropdown field type..</param>
        public ApoCustomFormsMetadataFields(long? id = default(long?), string name = default(string), string description = default(string), ApoCustomFormsMetadataFieldsLabel label = default(ApoCustomFormsMetadataFieldsLabel), DataTypeEnum? dataType = default(DataTypeEnum?), string defaultValue = default(string), long? displayOrder = default(long?), string unit = default(string), IsRequiredEnum? isRequired = default(IsRequiredEnum?), IsPublicVisibleEnum? isPublicVisible = default(IsPublicVisibleEnum?), IsRecordSearchableEnum? isRecordSearchable = default(IsRecordSearchableEnum?), long? maxLength = default(long?), List<ApoCustomFormsMetadataFieldsOptions> options = default(List<ApoCustomFormsMetadataFieldsOptions>), string sharedDropdownListName = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Label = label;
            this.DataType = dataType;
            this.DefaultValue = defaultValue;
            this.DisplayOrder = displayOrder;
            this.Unit = unit;
            this.IsRequired = isRequired;
            this.IsPublicVisible = isPublicVisible;
            this.IsRecordSearchable = isRecordSearchable;
            this.MaxLength = maxLength;
            this.Options = options;
            this.SharedDropdownListName = sharedDropdownListName;
        }
        
        /// <summary>
        /// The unique custom field id.
        /// </summary>
        /// <value>The unique custom field id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The field name.
        /// </summary>
        /// <value>The field name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Describes the usage or purpose of the custom field.
        /// </summary>
        /// <value>Describes the usage or purpose of the custom field.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public ApoCustomFormsMetadataFieldsLabel Label { get; set; }


        /// <summary>
        /// Any default value for the custom field.
        /// </summary>
        /// <value>Any default value for the custom field.</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The display order of the field on the custom form.
        /// </summary>
        /// <value>The display order of the field on the custom form.</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        /// The unit of measure of a numeric custom field.
        /// </summary>
        /// <value>The unit of measure of a numeric custom field.</value>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public string Unit { get; set; }




        /// <summary>
        /// The field maximum length.
        /// </summary>
        /// <value>The field maximum length.</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public long? MaxLength { get; set; }

        /// <summary>
        /// Contains possible field values, if the field is a dropdown field type.
        /// </summary>
        /// <value>Contains possible field values, if the field is a dropdown field type.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<ApoCustomFormsMetadataFieldsOptions> Options { get; set; }

        /// <summary>
        /// The name of the shared dropdown list, if the field is a dropdown field type.
        /// </summary>
        /// <value>The name of the shared dropdown list, if the field is a dropdown field type.</value>
        [DataMember(Name="sharedDropdownListName", EmitDefaultValue=false)]
        public string SharedDropdownListName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApoCustomFormsMetadataFields {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsPublicVisible: ").Append(IsPublicVisible).Append("\n");
            sb.Append("  IsRecordSearchable: ").Append(IsRecordSearchable).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  SharedDropdownListName: ").Append(SharedDropdownListName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApoCustomFormsMetadataFields);
        }

        /// <summary>
        /// Returns true if ApoCustomFormsMetadataFields instances are equal
        /// </summary>
        /// <param name="input">Instance of ApoCustomFormsMetadataFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApoCustomFormsMetadataFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IsPublicVisible == input.IsPublicVisible ||
                    (this.IsPublicVisible != null &&
                    this.IsPublicVisible.Equals(input.IsPublicVisible))
                ) && 
                (
                    this.IsRecordSearchable == input.IsRecordSearchable ||
                    (this.IsRecordSearchable != null &&
                    this.IsRecordSearchable.Equals(input.IsRecordSearchable))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.SharedDropdownListName == input.SharedDropdownListName ||
                    (this.SharedDropdownListName != null &&
                    this.SharedDropdownListName.Equals(input.SharedDropdownListName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.IsPublicVisible != null)
                    hashCode = hashCode * 59 + this.IsPublicVisible.GetHashCode();
                if (this.IsRecordSearchable != null)
                    hashCode = hashCode * 59 + this.IsRecordSearchable.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.SharedDropdownListName != null)
                    hashCode = hashCode * 59 + this.SharedDropdownListName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
