/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// RequestActivityAddModel
    /// </summary>
    [DataContract]
    public partial class RequestActivityAddModel :  IEquatable<RequestActivityAddModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestActivityAddModel" /> class.
        /// </summary>
        /// <param name="activityStatus">activityStatus.</param>
        /// <param name="assignedDepartment">assignedDepartment.</param>
        /// <param name="assignedUser">assignedUser.</param>
        /// <param name="description">The activity description.</param>
        /// <param name="dueDate">The desired completion date of the task..</param>
        /// <param name="name">The activity name..</param>
        /// <param name="priority">priority.</param>
        /// <param name="startDate">The activity start date..</param>
        /// <param name="type">type.</param>
        public RequestActivityAddModel(ActivityModelActivityStatus activityStatus = default(ActivityModelActivityStatus), ActivityModelAssignedDepartment assignedDepartment = default(ActivityModelAssignedDepartment), ActivityModelAssignedUser assignedUser = default(ActivityModelAssignedUser), string description = default(string), DateTime? dueDate = default(DateTime?), string name = default(string), ActivityModelPriority priority = default(ActivityModelPriority), DateTime? startDate = default(DateTime?), ActivityModelType type = default(ActivityModelType))
        {
            this.ActivityStatus = activityStatus;
            this.AssignedDepartment = assignedDepartment;
            this.AssignedUser = assignedUser;
            this.Description = description;
            this.DueDate = dueDate;
            this.Name = name;
            this.Priority = priority;
            this.StartDate = startDate;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets ActivityStatus
        /// </summary>
        [DataMember(Name="activityStatus", EmitDefaultValue=false)]
        public ActivityModelActivityStatus ActivityStatus { get; set; }

        /// <summary>
        /// Gets or Sets AssignedDepartment
        /// </summary>
        [DataMember(Name="assignedDepartment", EmitDefaultValue=false)]
        public ActivityModelAssignedDepartment AssignedDepartment { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUser
        /// </summary>
        [DataMember(Name="assignedUser", EmitDefaultValue=false)]
        public ActivityModelAssignedUser AssignedUser { get; set; }

        /// <summary>
        /// The activity description
        /// </summary>
        /// <value>The activity description</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The desired completion date of the task.
        /// </summary>
        /// <value>The desired completion date of the task.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The activity name.
        /// </summary>
        /// <value>The activity name.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public ActivityModelPriority Priority { get; set; }

        /// <summary>
        /// The activity start date.
        /// </summary>
        /// <value>The activity start date.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ActivityModelType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestActivityAddModel {\n");
            sb.Append("  ActivityStatus: ").Append(ActivityStatus).Append("\n");
            sb.Append("  AssignedDepartment: ").Append(AssignedDepartment).Append("\n");
            sb.Append("  AssignedUser: ").Append(AssignedUser).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestActivityAddModel);
        }

        /// <summary>
        /// Returns true if RequestActivityAddModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestActivityAddModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestActivityAddModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActivityStatus == input.ActivityStatus ||
                    (this.ActivityStatus != null &&
                    this.ActivityStatus.Equals(input.ActivityStatus))
                ) && 
                (
                    this.AssignedDepartment == input.AssignedDepartment ||
                    (this.AssignedDepartment != null &&
                    this.AssignedDepartment.Equals(input.AssignedDepartment))
                ) && 
                (
                    this.AssignedUser == input.AssignedUser ||
                    (this.AssignedUser != null &&
                    this.AssignedUser.Equals(input.AssignedUser))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActivityStatus != null)
                    hashCode = hashCode * 59 + this.ActivityStatus.GetHashCode();
                if (this.AssignedDepartment != null)
                    hashCode = hashCode * 59 + this.AssignedDepartment.GetHashCode();
                if (this.AssignedUser != null)
                    hashCode = hashCode * 59 + this.AssignedUser.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.StartDate != null)
                    hashCode = hashCode * 59 + this.StartDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
