/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// CreditCardLastFourDigitsModel
    /// </summary>
    [DataContract]
        public partial class CreditCardLastFourDigitsModel :  IEquatable<CreditCardLastFourDigitsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditCardLastFourDigitsModel" /> class.
        /// </summary>
        /// <param name="billingAddress">billingAddress.</param>
        /// <param name="businessName">A secondary business name for the applicable individual..</param>
        /// <param name="cardNumberLastDigits">The last 4 digits of the credit card number..</param>
        /// <param name="cardType">The credit card type. For example, Visa, American Express, or Discover..</param>
        /// <param name="holderName">The check holder&#x27;s name..</param>
        public CreditCardLastFourDigitsModel(BillingAddressV4V4PutPaymentsId billingAddress = default(BillingAddressV4V4PutPaymentsId), string businessName = default(string), string cardNumberLastDigits = default(string), string cardType = default(string), string holderName = default(string))
        {
            this.BillingAddress = billingAddress;
            this.BusinessName = businessName;
            this.CardNumberLastDigits = cardNumberLastDigits;
            this.CardType = cardType;
            this.HolderName = holderName;
        }
        
        /// <summary>
        /// Gets or Sets BillingAddress
        /// </summary>
        [DataMember(Name="billingAddress", EmitDefaultValue=false)]
        public BillingAddressV4V4PutPaymentsId BillingAddress { get; set; }

        /// <summary>
        /// A secondary business name for the applicable individual.
        /// </summary>
        /// <value>A secondary business name for the applicable individual.</value>
        [DataMember(Name="businessName", EmitDefaultValue=false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// The last 4 digits of the credit card number.
        /// </summary>
        /// <value>The last 4 digits of the credit card number.</value>
        [DataMember(Name="cardNumberLastDigits", EmitDefaultValue=false)]
        public string CardNumberLastDigits { get; set; }

        /// <summary>
        /// The credit card type. For example, Visa, American Express, or Discover.
        /// </summary>
        /// <value>The credit card type. For example, Visa, American Express, or Discover.</value>
        [DataMember(Name="cardType", EmitDefaultValue=false)]
        public string CardType { get; set; }

        /// <summary>
        /// The check holder&#x27;s name.
        /// </summary>
        /// <value>The check holder&#x27;s name.</value>
        [DataMember(Name="holderName", EmitDefaultValue=false)]
        public string HolderName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditCardLastFourDigitsModel {\n");
            sb.Append("  BillingAddress: ").Append(BillingAddress).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  CardNumberLastDigits: ").Append(CardNumberLastDigits).Append("\n");
            sb.Append("  CardType: ").Append(CardType).Append("\n");
            sb.Append("  HolderName: ").Append(HolderName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditCardLastFourDigitsModel);
        }

        /// <summary>
        /// Returns true if CreditCardLastFourDigitsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditCardLastFourDigitsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditCardLastFourDigitsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BillingAddress == input.BillingAddress ||
                    (this.BillingAddress != null &&
                    this.BillingAddress.Equals(input.BillingAddress))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.CardNumberLastDigits == input.CardNumberLastDigits ||
                    (this.CardNumberLastDigits != null &&
                    this.CardNumberLastDigits.Equals(input.CardNumberLastDigits))
                ) && 
                (
                    this.CardType == input.CardType ||
                    (this.CardType != null &&
                    this.CardType.Equals(input.CardType))
                ) && 
                (
                    this.HolderName == input.HolderName ||
                    (this.HolderName != null &&
                    this.HolderName.Equals(input.HolderName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BillingAddress != null)
                    hashCode = hashCode * 59 + this.BillingAddress.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.CardNumberLastDigits != null)
                    hashCode = hashCode * 59 + this.CardNumberLastDigits.GetHashCode();
                if (this.CardType != null)
                    hashCode = hashCode * 59 + this.CardType.GetHashCode();
                if (this.HolderName != null)
                    hashCode = hashCode * 59 + this.HolderName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
