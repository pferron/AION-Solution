/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// UserPINModel
    /// </summary>
    [DataContract]
    public partial class UserPINModel :  IEquatable<UserPINModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserPINModel" /> class.
        /// </summary>
        /// <param name="active">Indicates whether or not the account is active. If the account is not activated, the user cannot login Accela Citizen Access..</param>
        /// <param name="agentId">The ID of the associated agent of the logged-in user..</param>
        /// <param name="serviceProviderCode">The agency id..</param>
        /// <param name="status">The citizen userid status..</param>
        /// <param name="userId">The citizen userid..</param>
        public UserPINModel(string active = default(string), string agentId = default(string), string serviceProviderCode = default(string), string status = default(string), long? userId = default(long?))
        {
            this.Active = active;
            this.AgentId = agentId;
            this.ServiceProviderCode = serviceProviderCode;
            this.Status = status;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Indicates whether or not the account is active. If the account is not activated, the user cannot login Accela Citizen Access.
        /// </summary>
        /// <value>Indicates whether or not the account is active. If the account is not activated, the user cannot login Accela Citizen Access.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public string Active { get; set; }

        /// <summary>
        /// The ID of the associated agent of the logged-in user.
        /// </summary>
        /// <value>The ID of the associated agent of the logged-in user.</value>
        [DataMember(Name="agentId", EmitDefaultValue=false)]
        public string AgentId { get; set; }

        /// <summary>
        /// The agency id.
        /// </summary>
        /// <value>The agency id.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// The citizen userid status.
        /// </summary>
        /// <value>The citizen userid status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The citizen userid.
        /// </summary>
        /// <value>The citizen userid.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public long? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPINModel {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  AgentId: ").Append(AgentId).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserPINModel);
        }

        /// <summary>
        /// Returns true if UserPINModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserPINModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPINModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.AgentId == input.AgentId ||
                    (this.AgentId != null &&
                    this.AgentId.Equals(input.AgentId))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.AgentId != null)
                    hashCode = hashCode * 59 + this.AgentId.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
