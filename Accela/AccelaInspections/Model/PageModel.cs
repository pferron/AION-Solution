/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// PageModel
    /// </summary>
    [DataContract]
    public partial class PageModel :  IEquatable<PageModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PageModel" /> class.
        /// </summary>
        /// <param name="offset">The requested offset start..</param>
        /// <param name="limit">The requested result limit..</param>
        /// <param name="total">The total number of records found..</param>
        /// <param name="hasmore">true if there are more results to fetch; false if all results have been fetched..</param>
        public PageModel(int? offset = default(int?), int? limit = default(int?), int? total = default(int?), bool? hasmore = default(bool?))
        {
            this.Offset = offset;
            this.Limit = limit;
            this.Total = total;
            this.Hasmore = hasmore;
        }
        
        /// <summary>
        /// The requested offset start.
        /// </summary>
        /// <value>The requested offset start.</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }

        /// <summary>
        /// The requested result limit.
        /// </summary>
        /// <value>The requested result limit.</value>
        [DataMember(Name="limit", EmitDefaultValue=false)]
        public int? Limit { get; set; }

        /// <summary>
        /// The total number of records found.
        /// </summary>
        /// <value>The total number of records found.</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }

        /// <summary>
        /// true if there are more results to fetch; false if all results have been fetched.
        /// </summary>
        /// <value>true if there are more results to fetch; false if all results have been fetched.</value>
        [DataMember(Name="hasmore", EmitDefaultValue=false)]
        public bool? Hasmore { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageModel {\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Hasmore: ").Append(Hasmore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PageModel);
        }

        /// <summary>
        /// Returns true if PageModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PageModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Offset == input.Offset ||
                    (this.Offset != null &&
                    this.Offset.Equals(input.Offset))
                ) && 
                (
                    this.Limit == input.Limit ||
                    (this.Limit != null &&
                    this.Limit.Equals(input.Limit))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.Hasmore == input.Hasmore ||
                    (this.Hasmore != null &&
                    this.Hasmore.Equals(input.Hasmore))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Offset != null)
                    hashCode = hashCode * 59 + this.Offset.GetHashCode();
                if (this.Limit != null)
                    hashCode = hashCode * 59 + this.Limit.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.Hasmore != null)
                    hashCode = hashCode * 59 + this.Hasmore.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
