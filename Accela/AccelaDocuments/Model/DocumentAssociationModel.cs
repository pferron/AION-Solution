/* 
 * Documents
 *
 * Document and DocumentReview APIs
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaDocuments.Client.SwaggerDateConverter;

namespace AccelaDocuments.Model
{
    /// <summary>
    /// DocumentAssociationModel
    /// </summary>
    [DataContract]
        public partial class DocumentAssociationModel :  IEquatable<DocumentAssociationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentAssociationModel" /> class.
        /// </summary>
        /// <param name="department">The department responsible for the document review task..</param>
        /// <param name="discipline">The inspection discipline related to the document review..</param>
        /// <param name="staff">The staff responsible for the document review task..</param>
        /// <param name="status">status.</param>
        public DocumentAssociationModel(string department = default(string), string discipline = default(string), string staff = default(string), DocumentAssociationModelStatus status = default(DocumentAssociationModelStatus))
        {
            this.Department = department;
            this.Discipline = discipline;
            this.Staff = staff;
            this.Status = status;
        }
        
        /// <summary>
        /// The department responsible for the document review task.
        /// </summary>
        /// <value>The department responsible for the document review task.</value>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public string Department { get; set; }

        /// <summary>
        /// The inspection discipline related to the document review.
        /// </summary>
        /// <value>The inspection discipline related to the document review.</value>
        [DataMember(Name="discipline", EmitDefaultValue=false)]
        public string Discipline { get; set; }

        /// <summary>
        /// The staff responsible for the document review task.
        /// </summary>
        /// <value>The staff responsible for the document review task.</value>
        [DataMember(Name="staff", EmitDefaultValue=false)]
        public string Staff { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public DocumentAssociationModelStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentAssociationModel {\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Discipline: ").Append(Discipline).Append("\n");
            sb.Append("  Staff: ").Append(Staff).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentAssociationModel);
        }

        /// <summary>
        /// Returns true if DocumentAssociationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentAssociationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentAssociationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Discipline == input.Discipline ||
                    (this.Discipline != null &&
                    this.Discipline.Equals(input.Discipline))
                ) && 
                (
                    this.Staff == input.Staff ||
                    (this.Staff != null &&
                    this.Staff.Equals(input.Staff))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Discipline != null)
                    hashCode = hashCode * 59 + this.Discipline.GetHashCode();
                if (this.Staff != null)
                    hashCode = hashCode * 59 + this.Staff.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
