/* 
 * Assets and Assessments
 *
 * The Assets and Assessments APIs enable apps to manage assets and their related condition assessments.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAssetsAndAssessments.Client.SwaggerDateConverter;

namespace AccelaAssetsAndAssessments.Model
{
    /// <summary>
    /// AssetConditionAssessmentModel
    /// </summary>
    [DataContract]
        public partial class AssetConditionAssessmentModel :  IEquatable<AssetConditionAssessmentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetConditionAssessmentModel" /> class.
        /// </summary>
        /// <param name="asset">asset.</param>
        /// <param name="assetCAID">The asset condition assessment ID..</param>
        /// <param name="assignedToDepartment">The department responsible for the assessment..</param>
        /// <param name="attributes">attributes.</param>
        /// <param name="comments">The name of the inspector performing the assessment..</param>
        /// <param name="inspectorFullName"> The unique identifier of the inspector..</param>
        /// <param name="inspectorId">The inspector id..</param>
        /// <param name="scheduledDate">The scheduled assessment date, in yyyy-mm-dd format..</param>
        /// <param name="scheduledTime">The scheduled assessment time, in hh:mm AM/PM format..</param>
        /// <param name="status">The assessment status..</param>
        /// <param name="timeSpent">The number of hours spent on the assessment..</param>
        /// <param name="type">The type of assessment..</param>
        public AssetConditionAssessmentModel(AssetDescriptionModel asset = default(AssetDescriptionModel), long? assetCAID = default(long?), string assignedToDepartment = default(string), CustomAttributeModel attributes = default(CustomAttributeModel), string comments = default(string), string inspectorFullName = default(string), string inspectorId = default(string), DateTime? scheduledDate = default(DateTime?), string scheduledTime = default(string), string status = default(string), double? timeSpent = default(double?), string type = default(string))
        {
            this.Asset = asset;
            this.AssetCAID = assetCAID;
            this.AssignedToDepartment = assignedToDepartment;
            this.Attributes = attributes;
            this.Comments = comments;
            this.InspectorFullName = inspectorFullName;
            this.InspectorId = inspectorId;
            this.ScheduledDate = scheduledDate;
            this.ScheduledTime = scheduledTime;
            this.Status = status;
            this.TimeSpent = timeSpent;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets Asset
        /// </summary>
        [DataMember(Name="asset", EmitDefaultValue=false)]
        public AssetDescriptionModel Asset { get; set; }

        /// <summary>
        /// The asset condition assessment ID.
        /// </summary>
        /// <value>The asset condition assessment ID.</value>
        [DataMember(Name="assetCAID", EmitDefaultValue=false)]
        public long? AssetCAID { get; set; }

        /// <summary>
        /// The department responsible for the assessment.
        /// </summary>
        /// <value>The department responsible for the assessment.</value>
        [DataMember(Name="assignedToDepartment", EmitDefaultValue=false)]
        public string AssignedToDepartment { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public CustomAttributeModel Attributes { get; set; }

        /// <summary>
        /// The name of the inspector performing the assessment.
        /// </summary>
        /// <value>The name of the inspector performing the assessment.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        ///  The unique identifier of the inspector.
        /// </summary>
        /// <value> The unique identifier of the inspector.</value>
        [DataMember(Name="inspectorFullName", EmitDefaultValue=false)]
        public string InspectorFullName { get; set; }

        /// <summary>
        /// The inspector id.
        /// </summary>
        /// <value>The inspector id.</value>
        [DataMember(Name="inspectorId", EmitDefaultValue=false)]
        public string InspectorId { get; set; }

        /// <summary>
        /// The scheduled assessment date, in yyyy-mm-dd format.
        /// </summary>
        /// <value>The scheduled assessment date, in yyyy-mm-dd format.</value>
        [DataMember(Name="scheduledDate", EmitDefaultValue=false)]
        public DateTime? ScheduledDate { get; set; }

        /// <summary>
        /// The scheduled assessment time, in hh:mm AM/PM format.
        /// </summary>
        /// <value>The scheduled assessment time, in hh:mm AM/PM format.</value>
        [DataMember(Name="scheduledTime", EmitDefaultValue=false)]
        public string ScheduledTime { get; set; }

        /// <summary>
        /// The assessment status.
        /// </summary>
        /// <value>The assessment status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The number of hours spent on the assessment.
        /// </summary>
        /// <value>The number of hours spent on the assessment.</value>
        [DataMember(Name="timeSpent", EmitDefaultValue=false)]
        public double? TimeSpent { get; set; }

        /// <summary>
        /// The type of assessment.
        /// </summary>
        /// <value>The type of assessment.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetConditionAssessmentModel {\n");
            sb.Append("  Asset: ").Append(Asset).Append("\n");
            sb.Append("  AssetCAID: ").Append(AssetCAID).Append("\n");
            sb.Append("  AssignedToDepartment: ").Append(AssignedToDepartment).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  InspectorFullName: ").Append(InspectorFullName).Append("\n");
            sb.Append("  InspectorId: ").Append(InspectorId).Append("\n");
            sb.Append("  ScheduledDate: ").Append(ScheduledDate).Append("\n");
            sb.Append("  ScheduledTime: ").Append(ScheduledTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetConditionAssessmentModel);
        }

        /// <summary>
        /// Returns true if AssetConditionAssessmentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetConditionAssessmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetConditionAssessmentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Asset == input.Asset ||
                    (this.Asset != null &&
                    this.Asset.Equals(input.Asset))
                ) && 
                (
                    this.AssetCAID == input.AssetCAID ||
                    (this.AssetCAID != null &&
                    this.AssetCAID.Equals(input.AssetCAID))
                ) && 
                (
                    this.AssignedToDepartment == input.AssignedToDepartment ||
                    (this.AssignedToDepartment != null &&
                    this.AssignedToDepartment.Equals(input.AssignedToDepartment))
                ) && 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.InspectorFullName == input.InspectorFullName ||
                    (this.InspectorFullName != null &&
                    this.InspectorFullName.Equals(input.InspectorFullName))
                ) && 
                (
                    this.InspectorId == input.InspectorId ||
                    (this.InspectorId != null &&
                    this.InspectorId.Equals(input.InspectorId))
                ) && 
                (
                    this.ScheduledDate == input.ScheduledDate ||
                    (this.ScheduledDate != null &&
                    this.ScheduledDate.Equals(input.ScheduledDate))
                ) && 
                (
                    this.ScheduledTime == input.ScheduledTime ||
                    (this.ScheduledTime != null &&
                    this.ScheduledTime.Equals(input.ScheduledTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TimeSpent == input.TimeSpent ||
                    (this.TimeSpent != null &&
                    this.TimeSpent.Equals(input.TimeSpent))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Asset != null)
                    hashCode = hashCode * 59 + this.Asset.GetHashCode();
                if (this.AssetCAID != null)
                    hashCode = hashCode * 59 + this.AssetCAID.GetHashCode();
                if (this.AssignedToDepartment != null)
                    hashCode = hashCode * 59 + this.AssignedToDepartment.GetHashCode();
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.InspectorFullName != null)
                    hashCode = hashCode * 59 + this.InspectorFullName.GetHashCode();
                if (this.InspectorId != null)
                    hashCode = hashCode * 59 + this.InspectorId.GetHashCode();
                if (this.ScheduledDate != null)
                    hashCode = hashCode * 59 + this.ScheduledDate.GetHashCode();
                if (this.ScheduledTime != null)
                    hashCode = hashCode * 59 + this.ScheduledTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TimeSpent != null)
                    hashCode = hashCode * 59 + this.TimeSpent.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
