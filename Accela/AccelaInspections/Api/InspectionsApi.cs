/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Related Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteInspectionsIdRelatedChildIds (string contentType, string authorization, string id, string childIds, string lang = null);

        /// <summary>
        /// Delete Related Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteInspectionsIdRelatedChildIdsWithHttpInfo (string contentType, string authorization, string id, string childIds, string lang = null);
        /// <summary>
        /// Delete Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteInspectionsIds (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteInspectionsIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Cancel Inspections
        /// </summary>
        /// <remarks>
        /// Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteInspectionsIdsCancel (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Cancel Inspections
        /// </summary>
        /// <remarks>
        /// Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteInspectionsIdsCancelWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Get All Inspections
        /// </summary>
        /// <remarks>
        /// Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModelArray</returns>
        ResponseInspectionModelArray V4GetInspections (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null);

        /// <summary>
        /// Get All Inspections
        /// </summary>
        /// <remarks>
        /// Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModelArray</returns>
        ApiResponse<ResponseInspectionModelArray> V4GetInspectionsWithHttpInfo (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null);
        /// <summary>
        /// Get All Available Dates for Inspection
        /// </summary>
        /// <remarks>
        /// Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>List&lt;DateTime?&gt;</returns>
        List<DateTime?> V4GetInspectionsAvailableDates (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Available Dates for Inspection
        /// </summary>
        /// <remarks>
        /// Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of List&lt;DateTime?&gt;</returns>
        ApiResponse<List<DateTime?>> V4GetInspectionsAvailableDatesWithHttpInfo (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Check Inspection Availability
        /// </summary>
        /// <remarks>
        /// Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionAvailabilityArray</returns>
        ResponseInspectionAvailabilityArray V4GetInspectionsCheckAvailability (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null);

        /// <summary>
        /// Check Inspection Availability
        /// </summary>
        /// <remarks>
        /// Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionAvailabilityArray</returns>
        ApiResponse<ResponseInspectionAvailabilityArray> V4GetInspectionsCheckAvailabilityWithHttpInfo (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Related Inspections
        /// </summary>
        /// <remarks>
        /// Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>List&lt;ResponseInspectionRelatedModelArray&gt;</returns>
        List<ResponseInspectionRelatedModelArray> V4GetInspectionsIdRelated (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Related Inspections
        /// </summary>
        /// <remarks>
        /// Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseInspectionRelatedModelArray&gt;</returns>
        ApiResponse<List<ResponseInspectionRelatedModelArray>> V4GetInspectionsIdRelatedWithHttpInfo (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspections
        /// </summary>
        /// <remarks>
        /// Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModelArray</returns>
        ResponseInspectionModelArray V4GetInspectionsIds (string contentType, string authorization, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspections
        /// </summary>
        /// <remarks>
        /// Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModelArray</returns>
        ApiResponse<ResponseInspectionModelArray> V4GetInspectionsIdsWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null);
        /// <summary>
        /// Get All Comments for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionCommentModelArray</returns>
        ResponseInspectionCommentModelArray V4GetInspectionsInspectionIdComments (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Comments for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionCommentModelArray</returns>
        ApiResponse<ResponseInspectionCommentModelArray> V4GetInspectionsInspectionIdCommentsWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModelArray</returns>
        ResponseInspectionModelArray V4GetInspectionsInspectionIdsHistories (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModelArray</returns>
        ApiResponse<ResponseInspectionModelArray> V4GetInspectionsInspectionIdsHistoriesWithHttpInfo (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null);
        /// <summary>
        /// Create Related Inspections
        /// </summary>
        /// <remarks>
        /// Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostInspectionsIdRelated (string contentType, string authorization, long? id, List<long?> body, string lang = null);

        /// <summary>
        /// Create Related Inspections
        /// </summary>
        /// <remarks>
        /// Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostInspectionsIdRelatedWithHttpInfo (string contentType, string authorization, long? id, List<long?> body, string lang = null);
        /// <summary>
        /// Schedule Inspection
        /// </summary>
        /// <remarks>
        /// Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        ResponseInspectionModel V4PostInspectionsSchedule (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null);

        /// <summary>
        /// Schedule Inspection
        /// </summary>
        /// <remarks>
        /// Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        ApiResponse<ResponseInspectionModel> V4PostInspectionsScheduleWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null);
        /// <summary>
        /// Update Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        ResponseInspectionModel V4PutInspectionsId (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Update Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        ApiResponse<ResponseInspectionModel> V4PutInspectionsIdWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Reschedule Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        ResponseInspectionModel V4PutInspectionsIdReschedule (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Reschedule Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        ApiResponse<ResponseInspectionModel> V4PutInspectionsIdRescheduleWithHttpInfo (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Result Inspection
        /// </summary>
        /// <remarks>
        /// Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        ResponseInspectionModel V4PutInspectionsIdResult (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Result Inspection
        /// </summary>
        /// <remarks>
        /// Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        ApiResponse<ResponseInspectionModel> V4PutInspectionsIdResultWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Schedule Pending Inspection
        /// </summary>
        /// <remarks>
        /// Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        ResponseInspectionModel V4PutInspectionsIdSchedule (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Schedule Pending Inspection
        /// </summary>
        /// <remarks>
        /// Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        ApiResponse<ResponseInspectionModel> V4PutInspectionsIdScheduleWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Assign Inspections
        /// </summary>
        /// <remarks>
        /// Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutInspectionsIdsAssign (string contentType, string authorization, string ids, string inspectorId, string lang = null);

        /// <summary>
        /// Assign Inspections
        /// </summary>
        /// <remarks>
        /// Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutInspectionsIdsAssignWithHttpInfo (string contentType, string authorization, string ids, string inspectorId, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Related Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsIdRelatedChildIdsAsync (string contentType, string authorization, string id, string childIds, string lang = null);

        /// <summary>
        /// Delete Related Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsIdRelatedChildIdsAsyncWithHttpInfo (string contentType, string authorization, string id, string childIds, string lang = null);
        /// <summary>
        /// Delete Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsIdsAsync (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete Inspections
        /// </summary>
        /// <remarks>
        /// Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Cancel Inspections
        /// </summary>
        /// <remarks>
        /// Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsIdsCancelAsync (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Cancel Inspections
        /// </summary>
        /// <remarks>
        /// Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsIdsCancelAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Get All Inspections
        /// </summary>
        /// <remarks>
        /// Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionModelArray> V4GetInspectionsAsync (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null);

        /// <summary>
        /// Get All Inspections
        /// </summary>
        /// <remarks>
        /// Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModelArray>> V4GetInspectionsAsyncWithHttpInfo (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null);
        /// <summary>
        /// Get All Available Dates for Inspection
        /// </summary>
        /// <remarks>
        /// Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of List&lt;DateTime?&gt;</returns>
        System.Threading.Tasks.Task<List<DateTime?>> V4GetInspectionsAvailableDatesAsync (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Available Dates for Inspection
        /// </summary>
        /// <remarks>
        /// Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateTime?&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DateTime?>>> V4GetInspectionsAvailableDatesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Check Inspection Availability
        /// </summary>
        /// <remarks>
        /// Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionAvailabilityArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionAvailabilityArray> V4GetInspectionsCheckAvailabilityAsync (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null);

        /// <summary>
        /// Check Inspection Availability
        /// </summary>
        /// <remarks>
        /// Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionAvailabilityArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionAvailabilityArray>> V4GetInspectionsCheckAvailabilityAsyncWithHttpInfo (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Related Inspections
        /// </summary>
        /// <remarks>
        /// Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of List&lt;ResponseInspectionRelatedModelArray&gt;</returns>
        System.Threading.Tasks.Task<List<ResponseInspectionRelatedModelArray>> V4GetInspectionsIdRelatedAsync (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Related Inspections
        /// </summary>
        /// <remarks>
        /// Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseInspectionRelatedModelArray&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResponseInspectionRelatedModelArray>>> V4GetInspectionsIdRelatedAsyncWithHttpInfo (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspections
        /// </summary>
        /// <remarks>
        /// Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionModelArray> V4GetInspectionsIdsAsync (string contentType, string authorization, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspections
        /// </summary>
        /// <remarks>
        /// Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModelArray>> V4GetInspectionsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null);
        /// <summary>
        /// Get All Comments for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionCommentModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionCommentModelArray> V4GetInspectionsInspectionIdCommentsAsync (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Comments for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionCommentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionCommentModelArray>> V4GetInspectionsInspectionIdCommentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionModelArray> V4GetInspectionsInspectionIdsHistoriesAsync (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModelArray>> V4GetInspectionsInspectionIdsHistoriesAsyncWithHttpInfo (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null);
        /// <summary>
        /// Create Related Inspections
        /// </summary>
        /// <remarks>
        /// Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsIdRelatedAsync (string contentType, string authorization, long? id, List<long?> body, string lang = null);

        /// <summary>
        /// Create Related Inspections
        /// </summary>
        /// <remarks>
        /// Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsIdRelatedAsyncWithHttpInfo (string contentType, string authorization, long? id, List<long?> body, string lang = null);
        /// <summary>
        /// Schedule Inspection
        /// </summary>
        /// <remarks>
        /// Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionModel> V4PostInspectionsScheduleAsync (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null);

        /// <summary>
        /// Schedule Inspection
        /// </summary>
        /// <remarks>
        /// Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PostInspectionsScheduleAsyncWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null);
        /// <summary>
        /// Update Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdAsync (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Update Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdAsyncWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Reschedule Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdRescheduleAsync (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Reschedule Inspection
        /// </summary>
        /// <remarks>
        /// Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdRescheduleAsyncWithHttpInfo (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Result Inspection
        /// </summary>
        /// <remarks>
        /// Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdResultAsync (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Result Inspection
        /// </summary>
        /// <remarks>
        /// Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdResultAsyncWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Schedule Pending Inspection
        /// </summary>
        /// <remarks>
        /// Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdScheduleAsync (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null);

        /// <summary>
        /// Schedule Pending Inspection
        /// </summary>
        /// <remarks>
        /// Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdScheduleAsyncWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null);
        /// <summary>
        /// Assign Inspections
        /// </summary>
        /// <remarks>
        /// Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutInspectionsIdsAssignAsync (string contentType, string authorization, string ids, string inspectorId, string lang = null);

        /// <summary>
        /// Assign Inspections
        /// </summary>
        /// <remarks>
        /// Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutInspectionsIdsAssignAsyncWithHttpInfo (string contentType, string authorization, string ids, string inspectorId, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsApi : IInspectionsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Related Inspections Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteInspectionsIdRelatedChildIds (string contentType, string authorization, string id, string childIds, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteInspectionsIdRelatedChildIdsWithHttpInfo(contentType, authorization, id, childIds, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Related Inspections Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteInspectionsIdRelatedChildIdsWithHttpInfo (string contentType, string authorization, string id, string childIds, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");
            // verify the required parameter 'childIds' is set
            if (childIds == null)
                throw new ApiException(400, "Missing required parameter 'childIds' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");

            var localVarPath = "/v4/inspections/{id}/related/{childIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (childIds != null) localVarPathParams.Add("childIds", this.Configuration.ApiClient.ParameterToString(childIds)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsIdRelatedChildIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Related Inspections Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsIdRelatedChildIdsAsync (string contentType, string authorization, string id, string childIds, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteInspectionsIdRelatedChildIdsAsyncWithHttpInfo(contentType, authorization, id, childIds, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Related Inspections Deletes one or more related (child) inspections from the specified parent inspection. **API Endpoint**:  DELETE /v4/inspections/{id}/related/{childIds}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch.</param>
        /// <param name="childIds">Comma-delimited IDs of child inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsIdRelatedChildIdsAsyncWithHttpInfo (string contentType, string authorization, string id, string childIds, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");
            // verify the required parameter 'childIds' is set
            if (childIds == null)
                throw new ApiException(400, "Missing required parameter 'childIds' when calling InspectionsApi->V4DeleteInspectionsIdRelatedChildIds");

            var localVarPath = "/v4/inspections/{id}/related/{childIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (childIds != null) localVarPathParams.Add("childIds", this.Configuration.ApiClient.ParameterToString(childIds)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsIdRelatedChildIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Inspections Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteInspectionsIds (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteInspectionsIdsWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Inspections Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteInspectionsIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4DeleteInspectionsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4DeleteInspectionsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4DeleteInspectionsIds");

            var localVarPath = "/v4/Inspections/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Inspections Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsIdsAsync (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteInspectionsIdsAsyncWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Inspections Deletes one or more specified inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4DeleteInspectionsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4DeleteInspectionsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4DeleteInspectionsIds");

            var localVarPath = "/v4/Inspections/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Cancel Inspections Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteInspectionsIdsCancel (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteInspectionsIdsCancelWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Inspections Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteInspectionsIdsCancelWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4DeleteInspectionsIdsCancel");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4DeleteInspectionsIdsCancel");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4DeleteInspectionsIdsCancel");

            var localVarPath = "/v4/inspections/{ids}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsIdsCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Cancel Inspections Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsIdsCancelAsync (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteInspectionsIdsCancelAsyncWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Inspections Cancels scheduled inspections. **API Endpoint**:  DELETE /v4/inspections/{ids}/cancel  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to cancel.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsIdsCancelAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4DeleteInspectionsIdsCancel");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4DeleteInspectionsIdsCancel");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4DeleteInspectionsIdsCancel");

            var localVarPath = "/v4/inspections/{ids}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsIdsCancel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Inspections Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModelArray</returns>
        public ResponseInspectionModelArray V4GetInspections (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null)
        {
             ApiResponse<ResponseInspectionModelArray> localVarResponse = V4GetInspectionsWithHttpInfo(contentType, authorization, types, scheduledDateFrom, scheduledDateTo, inspectorIds, districtIds, offset, limit, module, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspections Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModelArray</returns>
        public ApiResponse< ResponseInspectionModelArray > V4GetInspectionsWithHttpInfo (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspections");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspections");

            var localVarPath = "/v4/inspections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (scheduledDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledDateFrom", scheduledDateFrom)); // query parameter
            if (scheduledDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledDateTo", scheduledDateTo)); // query parameter
            if (inspectorIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectorIds", inspectorIds)); // query parameter
            if (districtIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "districtIds", districtIds)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModelArray)));
        }

        /// <summary>
        /// Get All Inspections Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModelArray> V4GetInspectionsAsync (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null)
        {
             ApiResponse<ResponseInspectionModelArray> localVarResponse = await V4GetInspectionsAsyncWithHttpInfo(contentType, authorization, types, scheduledDateFrom, scheduledDateTo, inspectorIds, districtIds, offset, limit, module, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspections Gets a list of inspections stored in the system. **API Endpoint**:  GET /v4/inspections  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="types">Filter by multiple (comma-delimited) inspection types. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types). (optional)</param>
        /// <param name="scheduledDateFrom">The start date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="scheduledDateTo">The end date of schedule date range filter. Use the date format yyyy-mm-dd. (optional)</param>
        /// <param name="inspectorIds">Filter by inspector IDs. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors). (optional)</param>
        /// <param name="districtIds">Filter by district IDs. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="module">Filter by module. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModelArray>> V4GetInspectionsAsyncWithHttpInfo (string contentType, string authorization, string types = null, string scheduledDateFrom = null, string scheduledDateTo = null, string inspectorIds = null, string districtIds = null, long? offset = null, long? limit = null, string module = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspections");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspections");

            var localVarPath = "/v4/inspections";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (scheduledDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledDateFrom", scheduledDateFrom)); // query parameter
            if (scheduledDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "scheduledDateTo", scheduledDateTo)); // query parameter
            if (inspectorIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectorIds", inspectorIds)); // query parameter
            if (districtIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "districtIds", districtIds)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspections", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModelArray)));
        }

        /// <summary>
        /// Get All Available Dates for Inspection Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>List&lt;DateTime?&gt;</returns>
        public List<DateTime?> V4GetInspectionsAvailableDates (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<List<DateTime?>> localVarResponse = V4GetInspectionsAvailableDatesWithHttpInfo(contentType, authorization, recordId, startDate, typeId, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Available Dates for Inspection Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of List&lt;DateTime?&gt;</returns>
        public ApiResponse< List<DateTime?> > V4GetInspectionsAvailableDatesWithHttpInfo (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsAvailableDates");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsAvailableDates");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling InspectionsApi->V4GetInspectionsAvailableDates");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling InspectionsApi->V4GetInspectionsAvailableDates");

            var localVarPath = "/v4/inspections/availableDates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "typeId", typeId)); // query parameter
            if (recordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordId", recordId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsAvailableDates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateTime?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateTime?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateTime?>)));
        }

        /// <summary>
        /// Get All Available Dates for Inspection Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of List&lt;DateTime?&gt;</returns>
        public async System.Threading.Tasks.Task<List<DateTime?>> V4GetInspectionsAvailableDatesAsync (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<List<DateTime?>> localVarResponse = await V4GetInspectionsAvailableDatesAsyncWithHttpInfo(contentType, authorization, recordId, startDate, typeId, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Available Dates for Inspection Gets available dates for scheduling an inspection, starting on the specified {startDate}. This API allows a date range of up to 31 days. Note that this API does not filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out fields on the Civic Platform inspection calendar. To filter the available dates based on the Schedule Cut-off Time and Schedule Number of Days Out inspection calendar fields, set both {validateScheduleNumOfDays} and {validateScheduleNumOfDays} parameters to true. **API Endpoint**:  GET /v4/inspections/availableDates  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">Filter by record id.</param>
        /// <param name="startDate">Filter by start date.</param>
        /// <param name="typeId">Filter by inspection type id. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DateTime?&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DateTime?>>> V4GetInspectionsAvailableDatesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string startDate, long? typeId = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsAvailableDates");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsAvailableDates");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling InspectionsApi->V4GetInspectionsAvailableDates");
            // verify the required parameter 'startDate' is set
            if (startDate == null)
                throw new ApiException(400, "Missing required parameter 'startDate' when calling InspectionsApi->V4GetInspectionsAvailableDates");

            var localVarPath = "/v4/inspections/availableDates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (typeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "typeId", typeId)); // query parameter
            if (recordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordId", recordId)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsAvailableDates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DateTime?>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DateTime?>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DateTime?>)));
        }

        /// <summary>
        /// Check Inspection Availability Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionAvailabilityArray</returns>
        public ResponseInspectionAvailabilityArray V4GetInspectionsCheckAvailability (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionAvailabilityArray> localVarResponse = V4GetInspectionsCheckAvailabilityWithHttpInfo(contentType, authorization, recordId, inspectionTypeId, inspectionId, department, startDate, endDate, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check Inspection Availability Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionAvailabilityArray</returns>
        public ApiResponse< ResponseInspectionAvailabilityArray > V4GetInspectionsCheckAvailabilityWithHttpInfo (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsCheckAvailability");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsCheckAvailability");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling InspectionsApi->V4GetInspectionsCheckAvailability");
            // verify the required parameter 'inspectionTypeId' is set
            if (inspectionTypeId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionTypeId' when calling InspectionsApi->V4GetInspectionsCheckAvailability");

            var localVarPath = "/v4/inspections/checkAvailability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordId", recordId)); // query parameter
            if (inspectionTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectionTypeId", inspectionTypeId)); // query parameter
            if (inspectionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectionId", inspectionId)); // query parameter
            if (department != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "department", department)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsCheckAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionAvailabilityArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionAvailabilityArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionAvailabilityArray)));
        }

        /// <summary>
        /// Check Inspection Availability Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionAvailabilityArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionAvailabilityArray> V4GetInspectionsCheckAvailabilityAsync (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionAvailabilityArray> localVarResponse = await V4GetInspectionsCheckAvailabilityAsyncWithHttpInfo(contentType, authorization, recordId, inspectionTypeId, inspectionId, department, startDate, endDate, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check Inspection Availability Checks inspection availability for a given record and inspection type. This API returns an array of inspectors and their available inspection dates and times, based on the record&#39;s inspection workflow, calendar, and permissions. The results include available dates for the current and following months.  **API Endpoint**:  GET /v4/inspections/checkAvailability  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The record to check. See [Get Records](./api-records.html#operation/v4.get.records.ids).</param>
        /// <param name="inspectionTypeId">The inspection type to check for the specified record. See [Get All Inspection Types for Record](./api-records.html#operation/v4.get.records.recordIds.inspectionTypes).</param>
        /// <param name="inspectionId">Filter by inspection id. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections). (optional)</param>
        /// <param name="department">Filter by department. See [Get All Departments](./api-settings.html#operation/v4.get.settings.departments). (optional)</param>
        /// <param name="startDate">Filter by start date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="endDate">Filter by end date, using the date format yyyy-mm-dd. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionAvailabilityArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionAvailabilityArray>> V4GetInspectionsCheckAvailabilityAsyncWithHttpInfo (string contentType, string authorization, string recordId, string inspectionTypeId, string inspectionId = null, string department = null, string startDate = null, string endDate = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsCheckAvailability");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsCheckAvailability");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling InspectionsApi->V4GetInspectionsCheckAvailability");
            // verify the required parameter 'inspectionTypeId' is set
            if (inspectionTypeId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionTypeId' when calling InspectionsApi->V4GetInspectionsCheckAvailability");

            var localVarPath = "/v4/inspections/checkAvailability";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordId", recordId)); // query parameter
            if (inspectionTypeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectionTypeId", inspectionTypeId)); // query parameter
            if (inspectionId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectionId", inspectionId)); // query parameter
            if (department != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "department", department)); // query parameter
            if (startDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "startDate", startDate)); // query parameter
            if (endDate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "endDate", endDate)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsCheckAvailability", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionAvailabilityArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionAvailabilityArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionAvailabilityArray)));
        }

        /// <summary>
        /// Get Related Inspections Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>List&lt;ResponseInspectionRelatedModelArray&gt;</returns>
        public List<ResponseInspectionRelatedModelArray> V4GetInspectionsIdRelated (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null)
        {
             ApiResponse<List<ResponseInspectionRelatedModelArray>> localVarResponse = V4GetInspectionsIdRelatedWithHttpInfo(contentType, authorization, id, relationship, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Related Inspections Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of List&lt;ResponseInspectionRelatedModelArray&gt;</returns>
        public ApiResponse< List<ResponseInspectionRelatedModelArray> > V4GetInspectionsIdRelatedWithHttpInfo (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsIdRelated");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4GetInspectionsIdRelated");

            var localVarPath = "/v4/inspections/{id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (relationship != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relationship", relationship)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseInspectionRelatedModelArray>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseInspectionRelatedModelArray>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseInspectionRelatedModelArray>)));
        }

        /// <summary>
        /// Get Related Inspections Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of List&lt;ResponseInspectionRelatedModelArray&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResponseInspectionRelatedModelArray>> V4GetInspectionsIdRelatedAsync (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null)
        {
             ApiResponse<List<ResponseInspectionRelatedModelArray>> localVarResponse = await V4GetInspectionsIdRelatedAsyncWithHttpInfo(contentType, authorization, id, relationship, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Related Inspections Gets the related (child) inspections for the specified parent inspection. **API Endpoint**:  GET /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="relationship">Filter by type of inspection relationship (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ResponseInspectionRelatedModelArray&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ResponseInspectionRelatedModelArray>>> V4GetInspectionsIdRelatedAsyncWithHttpInfo (string contentType, string authorization, long? id, string relationship = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsIdRelated");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4GetInspectionsIdRelated");

            var localVarPath = "/v4/inspections/{id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (relationship != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relationship", relationship)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ResponseInspectionRelatedModelArray>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ResponseInspectionRelatedModelArray>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ResponseInspectionRelatedModelArray>)));
        }

        /// <summary>
        /// Get Inspections Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModelArray</returns>
        public ResponseInspectionModelArray V4GetInspectionsIds (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionModelArray> localVarResponse = V4GetInspectionsIdsWithHttpInfo(contentType, authorization, ids, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspections Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModelArray</returns>
        public ApiResponse< ResponseInspectionModelArray > V4GetInspectionsIdsWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4GetInspectionsIds");

            var localVarPath = "/v4/Inspections/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModelArray)));
        }

        /// <summary>
        /// Get Inspections Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModelArray> V4GetInspectionsIdsAsync (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionModelArray> localVarResponse = await V4GetInspectionsIdsAsyncWithHttpInfo(contentType, authorization, ids, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspections Gets the information for one or more requested inspections. **API Endpoint**:  GET /v4/inspections/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModelArray>> V4GetInspectionsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4GetInspectionsIds");

            var localVarPath = "/v4/Inspections/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModelArray)));
        }

        /// <summary>
        /// Get All Comments for Inspection Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionCommentModelArray</returns>
        public ResponseInspectionCommentModelArray V4GetInspectionsInspectionIdComments (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionCommentModelArray> localVarResponse = V4GetInspectionsInspectionIdCommentsWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Comments for Inspection Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionCommentModelArray</returns>
        public ApiResponse< ResponseInspectionCommentModelArray > V4GetInspectionsInspectionIdCommentsWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsInspectionIdComments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsInspectionIdComments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsApi->V4GetInspectionsInspectionIdComments");

            var localVarPath = "/v4/inspections/{inspectionId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionCommentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionCommentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionCommentModelArray)));
        }

        /// <summary>
        /// Get All Comments for Inspection Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionCommentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionCommentModelArray> V4GetInspectionsInspectionIdCommentsAsync (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionCommentModelArray> localVarResponse = await V4GetInspectionsInspectionIdCommentsAsyncWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Comments for Inspection Gets the comments for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/comments  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionCommentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionCommentModelArray>> V4GetInspectionsInspectionIdCommentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsInspectionIdComments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsInspectionIdComments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsApi->V4GetInspectionsInspectionIdComments");

            var localVarPath = "/v4/inspections/{inspectionId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionCommentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionCommentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionCommentModelArray)));
        }

        /// <summary>
        /// Get Inspection History Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModelArray</returns>
        public ResponseInspectionModelArray V4GetInspectionsInspectionIdsHistories (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionModelArray> localVarResponse = V4GetInspectionsInspectionIdsHistoriesWithHttpInfo(contentType, authorization, inspectionIds, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspection History Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModelArray</returns>
        public ApiResponse< ResponseInspectionModelArray > V4GetInspectionsInspectionIdsHistoriesWithHttpInfo (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsInspectionIdsHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsInspectionIdsHistories");
            // verify the required parameter 'inspectionIds' is set
            if (inspectionIds == null)
                throw new ApiException(400, "Missing required parameter 'inspectionIds' when calling InspectionsApi->V4GetInspectionsInspectionIdsHistories");

            var localVarPath = "/v4/inspections/{inspectionIds}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionIds != null) localVarPathParams.Add("inspectionIds", this.Configuration.ApiClient.ParameterToString(inspectionIds)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdsHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModelArray)));
        }

        /// <summary>
        /// Get Inspection History Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModelArray> V4GetInspectionsInspectionIdsHistoriesAsync (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionModelArray> localVarResponse = await V4GetInspectionsInspectionIdsHistoriesAsyncWithHttpInfo(contentType, authorization, inspectionIds, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspection History Gets the history for the specified inspections. **API Endpoint**: GET /v4/inspections/{inspectionIds}/histories   **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionIds">Comma-delimited IDs of inspections to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModelArray>> V4GetInspectionsInspectionIdsHistoriesAsyncWithHttpInfo (string contentType, string authorization, string inspectionIds, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4GetInspectionsInspectionIdsHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4GetInspectionsInspectionIdsHistories");
            // verify the required parameter 'inspectionIds' is set
            if (inspectionIds == null)
                throw new ApiException(400, "Missing required parameter 'inspectionIds' when calling InspectionsApi->V4GetInspectionsInspectionIdsHistories");

            var localVarPath = "/v4/inspections/{inspectionIds}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionIds != null) localVarPathParams.Add("inspectionIds", this.Configuration.ApiClient.ParameterToString(inspectionIds)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdsHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModelArray)));
        }

        /// <summary>
        /// Create Related Inspections Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostInspectionsIdRelated (string contentType, string authorization, long? id, List<long?> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostInspectionsIdRelatedWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Related Inspections Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostInspectionsIdRelatedWithHttpInfo (string contentType, string authorization, long? id, List<long?> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PostInspectionsIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PostInspectionsIdRelated");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PostInspectionsIdRelated");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PostInspectionsIdRelated");

            var localVarPath = "/v4/inspections/{id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Related Inspections Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsIdRelatedAsync (string contentType, string authorization, long? id, List<long?> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostInspectionsIdRelatedAsyncWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Related Inspections Adds related (child) inspections to the specified parent inspection. **API Endpoint**:  POST /v4/inspections/{id}/related  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="body">An array of inspection IDs to be linked to the parent inspection. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Get Related Inspections](./api-inspections.html#operation/v4.get.inspections.id.related).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsIdRelatedAsyncWithHttpInfo (string contentType, string authorization, long? id, List<long?> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PostInspectionsIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PostInspectionsIdRelated");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PostInspectionsIdRelated");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PostInspectionsIdRelated");

            var localVarPath = "/v4/inspections/{id}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Schedule Inspection Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        public ResponseInspectionModel V4PostInspectionsSchedule (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = V4PostInspectionsScheduleWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule Inspection Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        public ApiResponse< ResponseInspectionModel > V4PostInspectionsScheduleWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PostInspectionsSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PostInspectionsSchedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PostInspectionsSchedule");

            var localVarPath = "/v4/inspections/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Schedule Inspection Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModel> V4PostInspectionsScheduleAsync (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = await V4PostInspectionsScheduleAsyncWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule Inspection Creates an inspection with the specified inspection and scheduling information. The Schedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  POST /v4/inspections/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection to schedule.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PostInspectionsScheduleAsyncWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PostInspectionsSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PostInspectionsSchedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PostInspectionsSchedule");

            var localVarPath = "/v4/inspections/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Update Inspection Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        public ResponseInspectionModel V4PutInspectionsId (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = V4PutInspectionsIdWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Inspection Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        public ApiResponse< ResponseInspectionModel > V4PutInspectionsIdWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsId");

            var localVarPath = "/v4/inspections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Update Inspection Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdAsync (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = await V4PutInspectionsIdAsyncWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Inspection Updates an inspection with the specified inspection details such as schedule date, time, and inspector. The Update Inspection API updates the inspection status and category with the specified status and category request fields. **API Endpoint**:  PUT /v4/inspections/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to be updated.</param>
        /// <param name="id">The ID of the inspection to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdAsyncWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsId");

            var localVarPath = "/v4/inspections/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Reschedule Inspection Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        public ResponseInspectionModel V4PutInspectionsIdReschedule (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = V4PutInspectionsIdRescheduleWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reschedule Inspection Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        public ApiResponse< ResponseInspectionModel > V4PutInspectionsIdRescheduleWithHttpInfo (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdReschedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdReschedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsIdReschedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsIdReschedule");

            var localVarPath = "/v4/inspections/{id}/reschedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdReschedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Reschedule Inspection Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdRescheduleAsync (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = await V4PutInspectionsIdRescheduleAsyncWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reschedule Inspection Updates an inspection with the specified schedule date, time, inspectorId, and comments. The Reschedule Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/reschedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to reschedule.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdRescheduleAsyncWithHttpInfo (string contentType, string authorization, RequestRescheduleInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdReschedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdReschedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsIdReschedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsIdReschedule");

            var localVarPath = "/v4/inspections/{id}/reschedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdReschedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Result Inspection Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        public ResponseInspectionModel V4PutInspectionsIdResult (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = V4PutInspectionsIdResultWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Result Inspection Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        public ApiResponse< ResponseInspectionModel > V4PutInspectionsIdResultWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdResult");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdResult");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsIdResult");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsIdResult");

            var localVarPath = "/v4/inspections/{id}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Result Inspection Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdResultAsync (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = await V4PutInspectionsIdResultAsyncWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Result Inspection Provides the results of a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/result  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection result to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdResultAsyncWithHttpInfo (string contentType, string authorization, RequestUpdateInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdResult");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdResult");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsIdResult");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsIdResult");

            var localVarPath = "/v4/inspections/{id}/result";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Schedule Pending Inspection Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionModel</returns>
        public ResponseInspectionModel V4PutInspectionsIdSchedule (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = V4PutInspectionsIdScheduleWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Schedule Pending Inspection Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionModel</returns>
        public ApiResponse< ResponseInspectionModel > V4PutInspectionsIdScheduleWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdSchedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsIdSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsIdSchedule");

            var localVarPath = "/v4/inspections/{id}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Schedule Pending Inspection Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionModel> V4PutInspectionsIdScheduleAsync (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null)
        {
             ApiResponse<ResponseInspectionModel> localVarResponse = await V4PutInspectionsIdScheduleAsyncWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Schedule Pending Inspection Updates a pending inspection with the specified inspection details such as schedule date, time, and inspector. The Schedule Pending Inspection API automatically sets the inspection status to \&quot;Scheduled\&quot;and category to \&quot;Insp Scheduled\&quot;. **API Endpoint**:  PUT /v4/inspections/{id}/schedule  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection information to update.</param>
        /// <param name="id">Inspection Id</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionModel>> V4PutInspectionsIdScheduleAsyncWithHttpInfo (string contentType, string authorization, RequestScheduleInspectionModel body, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdSchedule");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdSchedule");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsApi->V4PutInspectionsIdSchedule");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsApi->V4PutInspectionsIdSchedule");

            var localVarPath = "/v4/inspections/{id}/schedule";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdSchedule", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionModel)));
        }

        /// <summary>
        /// Assign Inspections Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutInspectionsIdsAssign (string contentType, string authorization, string ids, string inspectorId, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutInspectionsIdsAssignWithHttpInfo(contentType, authorization, ids, inspectorId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign Inspections Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutInspectionsIdsAssignWithHttpInfo (string contentType, string authorization, string ids, string inspectorId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdsAssign");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdsAssign");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4PutInspectionsIdsAssign");
            // verify the required parameter 'inspectorId' is set
            if (inspectorId == null)
                throw new ApiException(400, "Missing required parameter 'inspectorId' when calling InspectionsApi->V4PutInspectionsIdsAssign");

            var localVarPath = "/v4/inspections/{ids}/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (inspectorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectorId", inspectorId)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdsAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Assign Inspections Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutInspectionsIdsAssignAsync (string contentType, string authorization, string ids, string inspectorId, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutInspectionsIdsAssignAsyncWithHttpInfo(contentType, authorization, ids, inspectorId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign Inspections Assigns an inspector to the specified inspection. **API Endpoint**:  PUT /v4/inspections/{ids}/assign  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the inspections to assign</param>
        /// <param name="inspectorId">The inspector to assign to.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutInspectionsIdsAssignAsyncWithHttpInfo (string contentType, string authorization, string ids, string inspectorId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsApi->V4PutInspectionsIdsAssign");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsApi->V4PutInspectionsIdsAssign");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsApi->V4PutInspectionsIdsAssign");
            // verify the required parameter 'inspectorId' is set
            if (inspectorId == null)
                throw new ApiException(400, "Missing required parameter 'inspectorId' when calling InspectionsApi->V4PutInspectionsIdsAssign");

            var localVarPath = "/v4/inspections/{ids}/assign";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (inspectorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inspectorId", inspectorId)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdsAssign", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
