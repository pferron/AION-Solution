/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaSettings.Client;
using AccelaSettings.Model;

namespace AccelaSettings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsTimeAccountingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Time Accounting Groups
        /// </summary>
        /// <remarks>
        /// Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        ResponseSettingValueModelArray V4GetSettingsTimeAccountingGroups (string contentType, string userIds = null, string lang = null);

        /// <summary>
        /// Get All Time Accounting Groups
        /// </summary>
        /// <remarks>
        /// Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        ApiResponse<ResponseSettingValueModelArray> V4GetSettingsTimeAccountingGroupsWithHttpInfo (string contentType, string userIds = null, string lang = null);
        /// <summary>
        /// Get All Time Accounting Types
        /// </summary>
        /// <remarks>
        /// Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        ResponseSettingValueModelArray V4GetSettingsTimeAccountingTypes (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null);

        /// <summary>
        /// Get All Time Accounting Types
        /// </summary>
        /// <remarks>
        /// Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        ApiResponse<ResponseSettingValueModelArray> V4GetSettingsTimeAccountingTypesWithHttpInfo (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Time Accounting Groups
        /// </summary>
        /// <remarks>
        /// Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsTimeAccountingGroupsAsync (string contentType, string userIds = null, string lang = null);

        /// <summary>
        /// Get All Time Accounting Groups
        /// </summary>
        /// <remarks>
        /// Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsTimeAccountingGroupsAsyncWithHttpInfo (string contentType, string userIds = null, string lang = null);
        /// <summary>
        /// Get All Time Accounting Types
        /// </summary>
        /// <remarks>
        /// Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsTimeAccountingTypesAsync (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null);

        /// <summary>
        /// Get All Time Accounting Types
        /// </summary>
        /// <remarks>
        /// Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsTimeAccountingTypesAsyncWithHttpInfo (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsTimeAccountingApi : ISettingsTimeAccountingApi
    {
        private AccelaSettings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsTimeAccountingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsTimeAccountingApi(String basePath)
        {
            this.Configuration = new AccelaSettings.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsTimeAccountingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsTimeAccountingApi(AccelaSettings.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaSettings.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaSettings.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaSettings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Time Accounting Groups Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        public ResponseSettingValueModelArray V4GetSettingsTimeAccountingGroups (string contentType, string userIds = null, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = V4GetSettingsTimeAccountingGroupsWithHttpInfo(contentType, userIds, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Time Accounting Groups Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        public ApiResponse< ResponseSettingValueModelArray > V4GetSettingsTimeAccountingGroupsWithHttpInfo (string contentType, string userIds = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsTimeAccountingApi->V4GetSettingsTimeAccountingGroups");

            var localVarPath = "/v4/settings/timeAccounting/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIds", userIds)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsTimeAccountingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Time Accounting Groups Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsTimeAccountingGroupsAsync (string contentType, string userIds = null, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = await V4GetSettingsTimeAccountingGroupsAsyncWithHttpInfo(contentType, userIds, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Time Accounting Groups Gets all time accounting groups, optionally for specified userids. **API Endpoint**:  GET /v4/settings/timeAccounting/groups  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="userIds">Filter by comma-delimited user ids. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsTimeAccountingGroupsAsyncWithHttpInfo (string contentType, string userIds = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsTimeAccountingApi->V4GetSettingsTimeAccountingGroups");

            var localVarPath = "/v4/settings/timeAccounting/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIds", userIds)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsTimeAccountingGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Time Accounting Types Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        public ResponseSettingValueModelArray V4GetSettingsTimeAccountingTypes (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = V4GetSettingsTimeAccountingTypesWithHttpInfo(contentType, groupId, userIds, recordType, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Time Accounting Types Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        public ApiResponse< ResponseSettingValueModelArray > V4GetSettingsTimeAccountingTypesWithHttpInfo (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsTimeAccountingApi->V4GetSettingsTimeAccountingTypes");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling SettingsTimeAccountingApi->V4GetSettingsTimeAccountingTypes");

            var localVarPath = "/v4/settings/timeAccounting/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIds", userIds)); // query parameter
            if (recordType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordType", recordType)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsTimeAccountingTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Time Accounting Types Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsTimeAccountingTypesAsync (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = await V4GetSettingsTimeAccountingTypesAsyncWithHttpInfo(contentType, groupId, userIds, recordType, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Time Accounting Types Gets all time accounting types for specified time accounting groups, optionally for specified userids and record type. **API Endpoint**:  GET /v4/settings/timeAccounting/types  **Scope**:  settings  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="groupId">Filter by time accounting group.</param>
        /// <param name="userIds">Filter by comma-delimited the user ids. (optional)</param>
        /// <param name="recordType">Filter by the record type. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsTimeAccountingTypesAsyncWithHttpInfo (string contentType, long? groupId, string userIds = null, string recordType = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsTimeAccountingApi->V4GetSettingsTimeAccountingTypes");
            // verify the required parameter 'groupId' is set
            if (groupId == null)
                throw new ApiException(400, "Missing required parameter 'groupId' when calling SettingsTimeAccountingApi->V4GetSettingsTimeAccountingTypes");

            var localVarPath = "/v4/settings/timeAccounting/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupId", groupId)); // query parameter
            if (userIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userIds", userIds)); // query parameter
            if (recordType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordType", recordType)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsTimeAccountingTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

    }
}
