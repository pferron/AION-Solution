/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Inspection Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteInspectionsInspectionIdDocumentsIds (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Delete Inspection Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteInspectionsInspectionIdDocumentsIdsWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Get All Documents for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        ResponseDocumentModelArray V4GetInspectionsInspectionIdDocuments (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Documents for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        ApiResponse<ResponseDocumentModelArray> V4GetInspectionsInspectionIdDocumentsWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Create Inspection Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostInspectionsInspectionIdDocuments (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Inspection Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostInspectionsInspectionIdDocumentsWithHttpInfo (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Inspection Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsInspectionIdDocumentsIdsAsync (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Delete Inspection Documents
        /// </summary>
        /// <remarks>
        /// Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsInspectionIdDocumentsIdsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Get All Documents for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetInspectionsInspectionIdDocumentsAsync (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Documents for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetInspectionsInspectionIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Create Inspection Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsInspectionIdDocumentsAsync (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Inspection Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsInspectionIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsDocumentsApi : IInspectionsDocumentsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsDocumentsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsDocumentsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Inspection Documents Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteInspectionsInspectionIdDocumentsIds (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteInspectionsInspectionIdDocumentsIdsWithHttpInfo(contentType, authorization, inspectionId, ids, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Inspection Documents Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteInspectionsInspectionIdDocumentsIdsWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");

            var localVarPath = "/v4/inspections/{inspectionId}/documents/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsInspectionIdDocumentsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Inspection Documents Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsInspectionIdDocumentsIdsAsync (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteInspectionsInspectionIdDocumentsIdsAsyncWithHttpInfo(contentType, authorization, inspectionId, ids, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Inspection Documents Deletes documents from the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/documents/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="ids">Comma-delimited IDs of documents to be deleted.</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsInspectionIdDocumentsIdsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsDocumentsApi->V4DeleteInspectionsInspectionIdDocumentsIds");

            var localVarPath = "/v4/inspections/{inspectionId}/documents/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsInspectionIdDocumentsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Documents for Inspection Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        public ResponseDocumentModelArray V4GetInspectionsInspectionIdDocuments (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = V4GetInspectionsInspectionIdDocumentsWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Documents for Inspection Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        public ApiResponse< ResponseDocumentModelArray > V4GetInspectionsInspectionIdDocumentsWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsDocumentsApi->V4GetInspectionsInspectionIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsDocumentsApi->V4GetInspectionsInspectionIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsDocumentsApi->V4GetInspectionsInspectionIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Get All Documents for Inspection Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetInspectionsInspectionIdDocumentsAsync (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = await V4GetInspectionsInspectionIdDocumentsAsyncWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Documents for Inspection Gets the documents for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/documents  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetInspectionsInspectionIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsDocumentsApi->V4GetInspectionsInspectionIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsDocumentsApi->V4GetInspectionsInspectionIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsDocumentsApi->V4GetInspectionsInspectionIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Create Inspection Documents Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostInspectionsInspectionIdDocuments (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostInspectionsInspectionIdDocumentsWithHttpInfo(contentType, authorization, inspectionId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Inspection Documents Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostInspectionsInspectionIdDocumentsWithHttpInfo (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'fileInfo' is set
            if (fileInfo == null)
                throw new ApiException(400, "Missing required parameter 'fileInfo' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Inspection Documents Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsInspectionIdDocumentsAsync (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostInspectionsInspectionIdDocumentsAsyncWithHttpInfo(contentType, authorization, inspectionId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Inspection Documents Creates one or more document attachments for the specified inspection. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot;and form-data for \&quot;uploadedFile\&quot;and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot;is a string containing an array of file attributes. Use \&quot;fileInfo\&quot;to specify one or more documents to be attached. For example:  Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;  [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Inspected pipe\&quot;    }  ] **API Endpoint**: POST /v4/inspections/{inspectionId}/documents   **Scope** : inspections  **App Type** : All  **Authorization Type** : Access token  **Civic Platform version** : 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsInspectionIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");
            // verify the required parameter 'fileInfo' is set
            if (fileInfo == null)
                throw new ApiException(400, "Missing required parameter 'fileInfo' when calling InspectionsDocumentsApi->V4PostInspectionsInspectionIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
