/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaMiscellanous.Client.SwaggerDateConverter;

namespace AccelaMiscellanous.Model
{
    /// <summary>
    /// BatchResponse
    /// </summary>
    [DataContract]
    public partial class BatchResponse :  IEquatable<BatchResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchResponse" /> class.
        /// </summary>
        /// <param name="result">The HTTP response from the invoked operation. The order of the results in the response array corresponds to the same order used in the request array..</param>
        /// <param name="code">The error code, if an error is encountered..</param>
        /// <param name="message">The error message, if an error is encountered..</param>
        /// <param name="traceid">The id of the error log entry, if an error is encountered..</param>
        /// <param name="status">The HTTP return status for the individual request..</param>
        public BatchResponse(List<Object> result = default(List<Object>), string code = default(string), string message = default(string), string traceid = default(string), int? status = default(int?))
        {
            this.Result = result;
            this.Code = code;
            this.Message = message;
            this.Traceid = traceid;
            this.Status = status;
        }
        
        /// <summary>
        /// The HTTP response from the invoked operation. The order of the results in the response array corresponds to the same order used in the request array.
        /// </summary>
        /// <value>The HTTP response from the invoked operation. The order of the results in the response array corresponds to the same order used in the request array.</value>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public List<Object> Result { get; set; }

        /// <summary>
        /// The error code, if an error is encountered.
        /// </summary>
        /// <value>The error code, if an error is encountered.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The error message, if an error is encountered.
        /// </summary>
        /// <value>The error message, if an error is encountered.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The id of the error log entry, if an error is encountered.
        /// </summary>
        /// <value>The id of the error log entry, if an error is encountered.</value>
        [DataMember(Name="traceid", EmitDefaultValue=false)]
        public string Traceid { get; set; }

        /// <summary>
        /// The HTTP return status for the individual request.
        /// </summary>
        /// <value>The HTTP return status for the individual request.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public int? Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchResponse {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Traceid: ").Append(Traceid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchResponse);
        }

        /// <summary>
        /// Returns true if BatchResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Result == input.Result ||
                    this.Result != null &&
                    this.Result.SequenceEqual(input.Result)
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Traceid == input.Traceid ||
                    (this.Traceid != null &&
                    this.Traceid.Equals(input.Traceid))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Result != null)
                    hashCode = hashCode * 59 + this.Result.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Traceid != null)
                    hashCode = hashCode * 59 + this.Traceid.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
