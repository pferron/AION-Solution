/* 
 * Documents
 *
 * Document and DocumentReview APIs
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Reflection;
using RestSharp;
using AccelaDocuments.Client;
using AccelaDocuments.Model;

namespace AccelaDocuments.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDocumentReviewApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Document Review Comments
        /// </summary>
        /// <remarks>
        /// Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null);

        /// <summary>
        /// Delete Document Review Comments
        /// </summary>
        /// <remarks>
        /// Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsWithHttpInfo (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null);
        /// <summary>
        /// Get Document Review Comments
        /// </summary>
        /// <remarks>
        /// Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentCommentModel</returns>
        ResponseDocumentCommentModel V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_ (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null);

        /// <summary>
        /// Get Document Review Comments
        /// </summary>
        /// <remarks>
        /// Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentCommentModel</returns>
        ApiResponse<ResponseDocumentCommentModel> V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_WithHttpInfo (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null);
        /// <summary>
        /// Create Document Review Comments
        /// </summary>
        /// <remarks>
        /// Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        ResponseResultModel V4PostDocumentReviewDocumentsDocumentIdComments (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null);

        /// <summary>
        /// Create Document Review Comments
        /// </summary>
        /// <remarks>
        /// Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        ApiResponse<ResponseResultModel> V4PostDocumentReviewDocumentsDocumentIdCommentsWithHttpInfo (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null);
        /// <summary>
        /// Attach Document Report
        /// </summary>
        /// <remarks>
        /// Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostDocumentReviewRecordsFileStreamRecordIdDocuments (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);

        /// <summary>
        /// Attach Document Report
        /// </summary>
        /// <remarks>
        /// Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);
        /// <summary>
        /// Checkin Document Review
        /// </summary>
        /// <remarks>
        /// Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckin (string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);

        /// <summary>
        /// Checkin Document Review
        /// </summary>
        /// <remarks>
        /// Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinWithHttpInfo (string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);
        /// <summary>
        /// Update Document Review Comment
        /// </summary>
        /// <remarks>
        /// Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentCommentUpdateModel</returns>
        ResponseDocumentCommentUpdateModel V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null);

        /// <summary>
        /// Update Document Review Comment
        /// </summary>
        /// <remarks>
        /// Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentCommentUpdateModel</returns>
        ApiResponse<ResponseDocumentCommentUpdateModel> V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdWithHttpInfo (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null);
        /// <summary>
        /// Update Document Review Task Status
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentAssociationModel</returns>
        ResponseDocumentAssociationModel V4PutDocumentReviewDocumentsDocumentIdTasksId_ (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Update Document Review Task Status
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentAssociationModel</returns>
        ApiResponse<ResponseDocumentAssociationModel> V4PutDocumentReviewDocumentsDocumentIdTasksId_WithHttpInfo (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Document Review Comments
        /// </summary>
        /// <remarks>
        /// Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsAsync (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null);

        /// <summary>
        /// Delete Document Review Comments
        /// </summary>
        /// <remarks>
        /// Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsAsyncWithHttpInfo (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null);
        /// <summary>
        /// Get Document Review Comments
        /// </summary>
        /// <remarks>
        /// Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentCommentModel</returns>
        System.Threading.Tasks.Task<ResponseDocumentCommentModel> V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_Async (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null);

        /// <summary>
        /// Get Document Review Comments
        /// </summary>
        /// <remarks>
        /// Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentCommentModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentCommentModel>> V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_AsyncWithHttpInfo (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null);
        /// <summary>
        /// Create Document Review Comments
        /// </summary>
        /// <remarks>
        /// Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        System.Threading.Tasks.Task<ResponseResultModel> V4PostDocumentReviewDocumentsDocumentIdCommentsAsync (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null);

        /// <summary>
        /// Create Document Review Comments
        /// </summary>
        /// <remarks>
        /// Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PostDocumentReviewDocumentsDocumentIdCommentsAsyncWithHttpInfo (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null);
        /// <summary>
        /// Attach Document Report
        /// </summary>
        /// <remarks>
        /// Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsAsync (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);

        /// <summary>
        /// Attach Document Report
        /// </summary>
        /// <remarks>
        /// Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);
        /// <summary>
        /// Checkin Document Review
        /// </summary>
        /// <remarks>
        /// Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinAsync (string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);

        /// <summary>
        /// Checkin Document Review
        /// </summary>
        /// <remarks>
        /// Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinAsyncWithHttpInfo (string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null);
        /// <summary>
        /// Update Document Review Comment
        /// </summary>
        /// <remarks>
        /// Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentCommentUpdateModel</returns>
        System.Threading.Tasks.Task<ResponseDocumentCommentUpdateModel> V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdAsync (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null);

        /// <summary>
        /// Update Document Review Comment
        /// </summary>
        /// <remarks>
        /// Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentCommentUpdateModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentCommentUpdateModel>> V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdAsyncWithHttpInfo (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null);
        /// <summary>
        /// Update Document Review Task Status
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentAssociationModel</returns>
        System.Threading.Tasks.Task<ResponseDocumentAssociationModel> V4PutDocumentReviewDocumentsDocumentIdTasksId_Async (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Update Document Review Task Status
        /// </summary>
        /// <remarks>
        /// Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentAssociationModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentAssociationModel>> V4PutDocumentReviewDocumentsDocumentIdTasksId_AsyncWithHttpInfo (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DocumentReviewApi : IDocumentReviewApi
    {
        private AccelaDocuments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentReviewApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentReviewApi(String basePath)
        {
            this.Configuration = new AccelaDocuments.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentReviewApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentReviewApi()
        {
            this.Configuration = AccelaDocuments.Client.Configuration.Default;

            ExceptionFactory = AccelaDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentReviewApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentReviewApi(AccelaDocuments.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaDocuments.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaDocuments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaDocuments.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaDocuments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Document Review Comments Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsWithHttpInfo(contentType, authorization, documentId, commentIds, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Document Review Comments Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsWithHttpInfo (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");
            // verify the required parameter 'commentIds' is set
            if (commentIds == null)
                throw new ApiException(400, "Missing required parameter 'commentIds' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");

            var localVarPath = "/v4/documentReview/documents/{documentId}/comments/{commentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (commentIds != null) localVarPathParams.Add("commentIds", this.Configuration.ApiClient.ParameterToString(commentIds)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Document Review Comments Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsAsync (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsAsyncWithHttpInfo(contentType, authorization, documentId, commentIds, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Document Review Comments Deletes the specified comments for the specified document. **API Endpoint**:  DELETE /v4/documentReview/documents/{documentId}/comments/{commentIds}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIdsAsyncWithHttpInfo (string contentType, string authorization, long? documentId, string commentIds, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");
            // verify the required parameter 'commentIds' is set
            if (commentIds == null)
                throw new ApiException(400, "Missing required parameter 'commentIds' when calling DocumentReviewApi->V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds");

            var localVarPath = "/v4/documentReview/documents/{documentId}/comments/{commentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (commentIds != null) localVarPathParams.Add("commentIds", this.Configuration.ApiClient.ParameterToString(commentIds)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteDocumentReviewDocumentsDocumentIdCommentsCommentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get Document Review Comments Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentCommentModel</returns>
        public ResponseDocumentCommentModel V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_ (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentCommentModel> localVarResponse = V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_WithHttpInfo(contentType, authorization, documentId, commentIds, isActive, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Document Review Comments Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentCommentModel</returns>
        public ApiResponse< ResponseDocumentCommentModel > V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_WithHttpInfo (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'commentIds' is set
            if (commentIds == null)
                throw new ApiException(400, "Missing required parameter 'commentIds' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'isActive' is set
            if (isActive == null)
                throw new ApiException(400, "Missing required parameter 'isActive' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");

            var localVarPath = "/v4/documentReview/documents/{documentId}/comments/{commentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (commentIds != null) localVarPathParams.Add("commentIds", this.Configuration.ApiClient.ParameterToString(commentIds)); // path parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isActive", isActive)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentCommentModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentCommentModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentCommentModel)));
        }

        /// <summary>
        /// Get Document Review Comments Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentCommentModel</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentCommentModel> V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_Async (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentCommentModel> localVarResponse = await V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_AsyncWithHttpInfo(contentType, authorization, documentId, commentIds, isActive, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Document Review Comments Gets document comments specified by {commentIds}. **API Endpoint**:  GET /v4/documentReview/documents/{documentId}/comments/{commentIds} **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="commentIds">Comma-delimited comment ID&#x27;s.</param>
        /// <param name="isActive">Filter whether the comment is active or inactive.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentCommentModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentCommentModel>> V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_AsyncWithHttpInfo (string contentType, string authorization, string documentId, string commentIds, string isActive, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'commentIds' is set
            if (commentIds == null)
                throw new ApiException(400, "Missing required parameter 'commentIds' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");
            // verify the required parameter 'isActive' is set
            if (isActive == null)
                throw new ApiException(400, "Missing required parameter 'isActive' when calling DocumentReviewApi->V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_");

            var localVarPath = "/v4/documentReview/documents/{documentId}/comments/{commentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (commentIds != null) localVarPathParams.Add("commentIds", this.Configuration.ApiClient.ParameterToString(commentIds)); // path parameter
            if (isActive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isActive", isActive)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetDocumentReviewDocumentsDocumentIdCommentsCommentIds_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentCommentModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentCommentModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentCommentModel)));
        }

        /// <summary>
        /// Create Document Review Comments Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        public ResponseResultModel V4PostDocumentReviewDocumentsDocumentIdComments (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = V4PostDocumentReviewDocumentsDocumentIdCommentsWithHttpInfo(body, contentType, authorization, documentId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Document Review Comments Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        public ApiResponse< ResponseResultModel > V4PostDocumentReviewDocumentsDocumentIdCommentsWithHttpInfo (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");

            var localVarPath = "/v4/documentReview/documents/{documentId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostDocumentReviewDocumentsDocumentIdComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

        /// <summary>
        /// Create Document Review Comments Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultModel> V4PostDocumentReviewDocumentsDocumentIdCommentsAsync (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = await V4PostDocumentReviewDocumentsDocumentIdCommentsAsyncWithHttpInfo(body, contentType, authorization, documentId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Document Review Comments Adds a comment to the specified document. **API Endpoint**:  POST /v4/documentReview/documents/{documentId}/comments  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document model for update</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PostDocumentReviewDocumentsDocumentIdCommentsAsyncWithHttpInfo (DocumentCommentModel body, string contentType, string authorization, long? documentId, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PostDocumentReviewDocumentsDocumentIdComments");

            var localVarPath = "/v4/documentReview/documents/{documentId}/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostDocumentReviewDocumentsDocumentIdComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

        /// <summary>
        /// Attach Document Report Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostDocumentReviewRecordsFileStreamRecordIdDocuments (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsWithHttpInfo(contentType, authorization, recordId, uploadedFile, fileInfo, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Document Report Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocuments");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocuments");

            var localVarPath = "/v4/documentReview/records/{recordId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // foreter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostDocumentReviewRecordsFileStreamRecordIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Attach Document Report Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsAsync (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsAsyncWithHttpInfo(contentType, authorization, recordId, uploadedFile, fileInfo, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach Document Report Attaches a document report to the specified record. A third party document review application can use the Attach Document Report to send a document report such as a correction notice to Civic Platform. When a correction notice report is generated on a third party document review tool, call Attach Document Report to send the document to Civic Platform as an attachment to a record.  To specify the document to be attached, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, and &#x27;description&#x27; properties. For example:   Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;  Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;summaryReport.pdf\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,   \&quot;description\&quot;: \&quot;Upload a report with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocuments");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocuments");

            var localVarPath = "/v4/documentReview/records/{recordId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostDocumentReviewRecordsFileStreamRecordIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Checkin Document Review Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckin (string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinWithHttpInfo(contentType, authorization, documentId, recordId, uploadedFile, fileInfo, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Checkin Document Review Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinWithHttpInfo(string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");

            var localVarPath = "/v4/documentReview/records/{recordId}/documents/{documentId}/checkin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Checkin Document Review Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinAsync (string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinAsyncWithHttpInfo(contentType, authorization, documentId, recordId, uploadedFile, fileInfo, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Checkin Document Review Checks in a file containing document review comments for the specified record. A third party document review application can use the Checkin Document Review API to check-in a reviewed document file to Civic Platform. When all reviews on a given document have been completed in the third party document review tool, call Checkin Document Review to send the document with all the open comments to Automation as a check-in file. It becomes an updated version of the original version which was submitted for review. To specify the document to be checked in, use the HTTP headers &#x27;Content-Type:multipart/form-data&#x27; and &#x27;Content-Disposition:form-data&#x27;. For the form-data, use the name&#x3D;\&quot;uploadedFile\&quot; parameter to specify the \&quot;filename&#x3D;\&quot;, and name&#x3D;\&quot;fileInfo\&quot; to specify the file attributes. &#x27;fileInfo&#x27; is an array of &#x27;serviceProviderCode&#x27;, &#x27;fileName&#x27;, &#x27;type&#x27;, &#x27;resubmit&#x27;, and &#x27;description&#x27; properties.  Set the \&quot;resubmit\&quot; property to \&quot;true\&quot; if the third-party application requires a document resubmittal. For example:  Content-Disposition: form-data; name&#x3D;\&quot;uploadedFile\&quot;; filename&#x3D;\&quot;test.pdf\&quot;   Content-Disposition: form-data; name&#x3D;\&quot;fileInfo\&quot;  [   {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;test.pdf\&quot;,    \&quot;resubmit\&quot;: \&quot;true\&quot;,    \&quot;type\&quot;: \&quot;text/plain\&quot;,    \&quot;description\&quot;: \&quot;Upload file with file info unit testing\&quot;   }  ] **API Endpoint**:  POST /v4/documentReview/records/{recordId}/documents/{documentId}/checkin  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to fetch.</param>
        /// <param name="recordId">The id of the record to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckinAsyncWithHttpInfo(string contentType, string authorization, string documentId, string recordId, System.IO.Stream uploadedFile = null, string fileInfo = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling DocumentReviewApi->V4PostDocumentReviewRecordsRecordIdDocumentsDocumentIdCheckin");

            var localVarPath = "/v4/documentReview/records/{recordId}/documents/{documentId}/checkin";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostDocumentReviewRecordsFileStreamRecordIdDocumentsDocumentIdCheckin", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Document Review Comment Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentCommentUpdateModel</returns>
        public ResponseDocumentCommentUpdateModel V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentCommentUpdateModel> localVarResponse = V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdWithHttpInfo(body, contentType, authorization, documentId, commentId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Document Review Comment Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentCommentUpdateModel</returns>
        public ApiResponse< ResponseDocumentCommentUpdateModel > V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdWithHttpInfo (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");

            var localVarPath = "/v4/DocumentReview/documents/{documentId}/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (commentId != null) localVarPathParams.Add("commentId", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentCommentUpdateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentCommentUpdateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentCommentUpdateModel)));
        }

        /// <summary>
        /// Update Document Review Comment Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentCommentUpdateModel</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentCommentUpdateModel> V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdAsync (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentCommentUpdateModel> localVarResponse = await V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdAsyncWithHttpInfo(body, contentType, authorization, documentId, commentId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Document Review Comment Updates the specified comment for the specified document. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/comments/{commentId}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document comment to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="commentId">The system id of the comment to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentCommentUpdateModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentCommentUpdateModel>> V4PutDocumentReviewDocumentsDocumentIdCommentsCommentIdAsyncWithHttpInfo (DocumentCommentUpdateModel body, string contentType, string authorization, long? documentId, long? commentId, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");
            // verify the required parameter 'commentId' is set
            if (commentId == null)
                throw new ApiException(400, "Missing required parameter 'commentId' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId");

            var localVarPath = "/v4/DocumentReview/documents/{documentId}/comments/{commentId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (commentId != null) localVarPathParams.Add("commentId", this.Configuration.ApiClient.ParameterToString(commentId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutDocumentReviewDocumentsDocumentIdCommentsCommentId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentCommentUpdateModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentCommentUpdateModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentCommentUpdateModel)));
        }

        /// <summary>
        /// Update Document Review Task Status Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentAssociationModel</returns>
        public ResponseDocumentAssociationModel V4PutDocumentReviewDocumentsDocumentIdTasksId_ (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentAssociationModel> localVarResponse = V4PutDocumentReviewDocumentsDocumentIdTasksId_WithHttpInfo(body, contentType, authorization, documentId, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Document Review Task Status Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentAssociationModel</returns>
        public ApiResponse< ResponseDocumentAssociationModel > V4PutDocumentReviewDocumentsDocumentIdTasksId_WithHttpInfo (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");

            var localVarPath = "/v4/documentReview/documents/{documentId}/tasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutDocumentReviewDocumentsDocumentIdTasksId_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentAssociationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentAssociationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentAssociationModel)));
        }

        /// <summary>
        /// Update Document Review Task Status Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentAssociationModel</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentAssociationModel> V4PutDocumentReviewDocumentsDocumentIdTasksId_Async (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentAssociationModel> localVarResponse = await V4PutDocumentReviewDocumentsDocumentIdTasksId_AsyncWithHttpInfo(body, contentType, authorization, documentId, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Document Review Task Status Updates the status of the specified task for the specified document. A third party document review application can use the Update Document Review Task to sync the document task status between the third party tool and Civic Platform. **API Endpoint**:  PUT /v4/documentReview/documents/{documentId}/tasks/{id}  **Scope**:  documents  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaDocuments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Document attributes and status to update.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="documentId">The ID of document to review.</param>
        /// <param name="id">The unique task identifier. Currently, a third-party document review tool supplies the task id that is stored in their system.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentAssociationModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentAssociationModel>> V4PutDocumentReviewDocumentsDocumentIdTasksId_AsyncWithHttpInfo (DocumentAssociationModel body, string contentType, string authorization, long? documentId, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'documentId' is set
            if (documentId == null)
                throw new ApiException(400, "Missing required parameter 'documentId' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentReviewApi->V4PutDocumentReviewDocumentsDocumentIdTasksId_");

            var localVarPath = "/v4/documentReview/documents/{documentId}/tasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentId != null) localVarPathParams.Add("documentId", this.Configuration.ApiClient.ParameterToString(documentId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutDocumentReviewDocumentsDocumentIdTasksId_", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentAssociationModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentAssociationModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentAssociationModel)));
        }

    }
}
