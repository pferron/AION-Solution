/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaMiscellanous.Client.SwaggerDateConverter;

namespace AccelaMiscellanous.Model
{
    /// <summary>
    /// TimeLogModel
    /// </summary>
    [DataContract]
    public partial class TimeLogModel :  IEquatable<TimeLogModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the item is billable.
        /// </summary>
        /// <value>Indicates whether or not the item is billable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the item is billable.
        /// </summary>
        /// <value>Indicates whether or not the item is billable.</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public BillableEnum? Billable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TimeLogModel" /> class.
        /// </summary>
        /// <param name="access">access.</param>
        /// <param name="billable">Indicates whether or not the item is billable..</param>
        /// <param name="cost">The calculated cost of the entry..</param>
        /// <param name="createBy">The unique user id of the individual that created this entry..</param>
        /// <param name="createDate"> The date the entry was created..</param>
        /// <param name="detailDuration">Contains details about the time accounting duration..</param>
        /// <param name="duration">The duration of the entry, using the format hh:mm..</param>
        /// <param name="endMileage">The ending mileage for the time accounting item..</param>
        /// <param name="endTime">The end time for the time accounting entry..</param>
        /// <param name="entity">The entity associated with the time accounting item..</param>
        /// <param name="entityId">The unique ID of the entity or record..</param>
        /// <param name="entityType">The type of entity, such as \&quot;Record\&quot;..</param>
        /// <param name="group">group.</param>
        /// <param name="id">The time accounting entry&#39;s system id assigned by the Civic Platform server..</param>
        /// <param name="lastChangedBy">The person who last changed the time accounting entry..</param>
        /// <param name="lastChangedDate">The date when the time accounting entry was last changed..</param>
        /// <param name="loggedDate">The date when the time accounting was logged..</param>
        /// <param name="materials">The materials tracked by the time accounting entry..</param>
        /// <param name="materialsCost">The cost of materials tracked by the time accounting entry..</param>
        /// <param name="notation">The notation associated with the time accounting entry..</param>
        /// <param name="percent">The percentage point for calculating the cost. 50 stands for 50%, 80 stands for 80%, and 150 stands for 150%..</param>
        /// <param name="rate">The cost rate..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="startMileage">The starting mileage for the time accounting entry..</param>
        /// <param name="startTime">The start time of the time accounting entry..</param>
        /// <param name="status">status.</param>
        /// <param name="totalMileage">The total mileage for the time accounting entry..</param>
        /// <param name="totalMinutes">The total number of billable minutes..</param>
        /// <param name="type">type.</param>
        /// <param name="userId">The userid assigned to the time accounting entry..</param>
        /// <param name="vehicleId">vehicleId.</param>
        public TimeLogModel(TimeLogModelAccess access = default(TimeLogModelAccess), BillableEnum? billable = default(BillableEnum?), double? cost = default(double?), string createBy = default(string), DateTime? createDate = default(DateTime?), List<CostingQuantityModel> detailDuration = default(List<CostingQuantityModel>), string duration = default(string), double? endMileage = default(double?), string endTime = default(string), string entity = default(string), string entityId = default(string), string entityType = default(string), TimeLogModelGroup group = default(TimeLogModelGroup), long? id = default(long?), string lastChangedBy = default(string), DateTime? lastChangedDate = default(DateTime?), DateTime? loggedDate = default(DateTime?), string materials = default(string), double? materialsCost = default(double?), string notation = default(string), double? percent = default(double?), double? rate = default(double?), RecordIdModel recordId = default(RecordIdModel), string serviceProviderCode = default(string), double? startMileage = default(double?), string startTime = default(string), TimeLogModelStatus status = default(TimeLogModelStatus), double? totalMileage = default(double?), long? totalMinutes = default(long?), TimeLogModelType type = default(TimeLogModelType), string userId = default(string), TimeLogModelVehicleId vehicleId = default(TimeLogModelVehicleId))
        {
            this.Access = access;
            this.Billable = billable;
            this.Cost = cost;
            this.CreateBy = createBy;
            this.CreateDate = createDate;
            this.DetailDuration = detailDuration;
            this.Duration = duration;
            this.EndMileage = endMileage;
            this.EndTime = endTime;
            this.Entity = entity;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.Group = group;
            this.Id = id;
            this.LastChangedBy = lastChangedBy;
            this.LastChangedDate = lastChangedDate;
            this.LoggedDate = loggedDate;
            this.Materials = materials;
            this.MaterialsCost = materialsCost;
            this.Notation = notation;
            this.Percent = percent;
            this.Rate = rate;
            this.RecordId = recordId;
            this.ServiceProviderCode = serviceProviderCode;
            this.StartMileage = startMileage;
            this.StartTime = startTime;
            this.Status = status;
            this.TotalMileage = totalMileage;
            this.TotalMinutes = totalMinutes;
            this.Type = type;
            this.UserId = userId;
            this.VehicleId = vehicleId;
        }
        
        /// <summary>
        /// Gets or Sets Access
        /// </summary>
        [DataMember(Name="access", EmitDefaultValue=false)]
        public TimeLogModelAccess Access { get; set; }


        /// <summary>
        /// The calculated cost of the entry.
        /// </summary>
        /// <value>The calculated cost of the entry.</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// The unique user id of the individual that created this entry.
        /// </summary>
        /// <value>The unique user id of the individual that created this entry.</value>
        [DataMember(Name="createBy", EmitDefaultValue=false)]
        public string CreateBy { get; set; }

        /// <summary>
        ///  The date the entry was created.
        /// </summary>
        /// <value> The date the entry was created.</value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Contains details about the time accounting duration.
        /// </summary>
        /// <value>Contains details about the time accounting duration.</value>
        [DataMember(Name="detailDuration", EmitDefaultValue=false)]
        public List<CostingQuantityModel> DetailDuration { get; set; }

        /// <summary>
        /// The duration of the entry, using the format hh:mm.
        /// </summary>
        /// <value>The duration of the entry, using the format hh:mm.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// The ending mileage for the time accounting item.
        /// </summary>
        /// <value>The ending mileage for the time accounting item.</value>
        [DataMember(Name="endMileage", EmitDefaultValue=false)]
        public double? EndMileage { get; set; }

        /// <summary>
        /// The end time for the time accounting entry.
        /// </summary>
        /// <value>The end time for the time accounting entry.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// The entity associated with the time accounting item.
        /// </summary>
        /// <value>The entity associated with the time accounting item.</value>
        [DataMember(Name="entity", EmitDefaultValue=false)]
        public string Entity { get; set; }

        /// <summary>
        /// The unique ID of the entity or record.
        /// </summary>
        /// <value>The unique ID of the entity or record.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The type of entity, such as \&quot;Record\&quot;.
        /// </summary>
        /// <value>The type of entity, such as \&quot;Record\&quot;.</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public TimeLogModelGroup Group { get; set; }

        /// <summary>
        /// The time accounting entry&#39;s system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The time accounting entry&#39;s system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The person who last changed the time accounting entry.
        /// </summary>
        /// <value>The person who last changed the time accounting entry.</value>
        [DataMember(Name="lastChangedBy", EmitDefaultValue=false)]
        public string LastChangedBy { get; set; }

        /// <summary>
        /// The date when the time accounting entry was last changed.
        /// </summary>
        /// <value>The date when the time accounting entry was last changed.</value>
        [DataMember(Name="lastChangedDate", EmitDefaultValue=false)]
        public DateTime? LastChangedDate { get; set; }

        /// <summary>
        /// The date when the time accounting was logged.
        /// </summary>
        /// <value>The date when the time accounting was logged.</value>
        [DataMember(Name="loggedDate", EmitDefaultValue=false)]
        public DateTime? LoggedDate { get; set; }

        /// <summary>
        /// The materials tracked by the time accounting entry.
        /// </summary>
        /// <value>The materials tracked by the time accounting entry.</value>
        [DataMember(Name="materials", EmitDefaultValue=false)]
        public string Materials { get; set; }

        /// <summary>
        /// The cost of materials tracked by the time accounting entry.
        /// </summary>
        /// <value>The cost of materials tracked by the time accounting entry.</value>
        [DataMember(Name="materialsCost", EmitDefaultValue=false)]
        public double? MaterialsCost { get; set; }

        /// <summary>
        /// The notation associated with the time accounting entry.
        /// </summary>
        /// <value>The notation associated with the time accounting entry.</value>
        [DataMember(Name="notation", EmitDefaultValue=false)]
        public string Notation { get; set; }

        /// <summary>
        /// The percentage point for calculating the cost. 50 stands for 50%, 80 stands for 80%, and 150 stands for 150%.
        /// </summary>
        /// <value>The percentage point for calculating the cost. 50 stands for 50%, 80 stands for 80%, and 150 stands for 150%.</value>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public double? Percent { get; set; }

        /// <summary>
        /// The cost rate.
        /// </summary>
        /// <value>The cost rate.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// The starting mileage for the time accounting entry.
        /// </summary>
        /// <value>The starting mileage for the time accounting entry.</value>
        [DataMember(Name="startMileage", EmitDefaultValue=false)]
        public double? StartMileage { get; set; }

        /// <summary>
        /// The start time of the time accounting entry.
        /// </summary>
        /// <value>The start time of the time accounting entry.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TimeLogModelStatus Status { get; set; }

        /// <summary>
        /// The total mileage for the time accounting entry.
        /// </summary>
        /// <value>The total mileage for the time accounting entry.</value>
        [DataMember(Name="totalMileage", EmitDefaultValue=false)]
        public double? TotalMileage { get; set; }

        /// <summary>
        /// The total number of billable minutes.
        /// </summary>
        /// <value>The total number of billable minutes.</value>
        [DataMember(Name="totalMinutes", EmitDefaultValue=false)]
        public long? TotalMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TimeLogModelType Type { get; set; }

        /// <summary>
        /// The userid assigned to the time accounting entry.
        /// </summary>
        /// <value>The userid assigned to the time accounting entry.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets VehicleId
        /// </summary>
        [DataMember(Name="vehicleId", EmitDefaultValue=false)]
        public TimeLogModelVehicleId VehicleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TimeLogModel {\n");
            sb.Append("  Access: ").Append(Access).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CreateBy: ").Append(CreateBy).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  DetailDuration: ").Append(DetailDuration).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EndMileage: ").Append(EndMileage).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastChangedBy: ").Append(LastChangedBy).Append("\n");
            sb.Append("  LastChangedDate: ").Append(LastChangedDate).Append("\n");
            sb.Append("  LoggedDate: ").Append(LoggedDate).Append("\n");
            sb.Append("  Materials: ").Append(Materials).Append("\n");
            sb.Append("  MaterialsCost: ").Append(MaterialsCost).Append("\n");
            sb.Append("  Notation: ").Append(Notation).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  StartMileage: ").Append(StartMileage).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalMileage: ").Append(TotalMileage).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TimeLogModel);
        }

        /// <summary>
        /// Returns true if TimeLogModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TimeLogModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TimeLogModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Access == input.Access ||
                    (this.Access != null &&
                    this.Access.Equals(input.Access))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CreateBy == input.CreateBy ||
                    (this.CreateBy != null &&
                    this.CreateBy.Equals(input.CreateBy))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.DetailDuration == input.DetailDuration ||
                    this.DetailDuration != null &&
                    this.DetailDuration.SequenceEqual(input.DetailDuration)
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EndMileage == input.EndMileage ||
                    (this.EndMileage != null &&
                    this.EndMileage.Equals(input.EndMileage))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastChangedBy == input.LastChangedBy ||
                    (this.LastChangedBy != null &&
                    this.LastChangedBy.Equals(input.LastChangedBy))
                ) && 
                (
                    this.LastChangedDate == input.LastChangedDate ||
                    (this.LastChangedDate != null &&
                    this.LastChangedDate.Equals(input.LastChangedDate))
                ) && 
                (
                    this.LoggedDate == input.LoggedDate ||
                    (this.LoggedDate != null &&
                    this.LoggedDate.Equals(input.LoggedDate))
                ) && 
                (
                    this.Materials == input.Materials ||
                    (this.Materials != null &&
                    this.Materials.Equals(input.Materials))
                ) && 
                (
                    this.MaterialsCost == input.MaterialsCost ||
                    (this.MaterialsCost != null &&
                    this.MaterialsCost.Equals(input.MaterialsCost))
                ) && 
                (
                    this.Notation == input.Notation ||
                    (this.Notation != null &&
                    this.Notation.Equals(input.Notation))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.StartMileage == input.StartMileage ||
                    (this.StartMileage != null &&
                    this.StartMileage.Equals(input.StartMileage))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalMileage == input.TotalMileage ||
                    (this.TotalMileage != null &&
                    this.TotalMileage.Equals(input.TotalMileage))
                ) && 
                (
                    this.TotalMinutes == input.TotalMinutes ||
                    (this.TotalMinutes != null &&
                    this.TotalMinutes.Equals(input.TotalMinutes))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Access != null)
                    hashCode = hashCode * 59 + this.Access.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CreateBy != null)
                    hashCode = hashCode * 59 + this.CreateBy.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.DetailDuration != null)
                    hashCode = hashCode * 59 + this.DetailDuration.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EndMileage != null)
                    hashCode = hashCode * 59 + this.EndMileage.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.Entity != null)
                    hashCode = hashCode * 59 + this.Entity.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastChangedBy != null)
                    hashCode = hashCode * 59 + this.LastChangedBy.GetHashCode();
                if (this.LastChangedDate != null)
                    hashCode = hashCode * 59 + this.LastChangedDate.GetHashCode();
                if (this.LoggedDate != null)
                    hashCode = hashCode * 59 + this.LoggedDate.GetHashCode();
                if (this.Materials != null)
                    hashCode = hashCode * 59 + this.Materials.GetHashCode();
                if (this.MaterialsCost != null)
                    hashCode = hashCode * 59 + this.MaterialsCost.GetHashCode();
                if (this.Notation != null)
                    hashCode = hashCode * 59 + this.Notation.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.StartMileage != null)
                    hashCode = hashCode * 59 + this.StartMileage.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalMileage != null)
                    hashCode = hashCode * 59 + this.TotalMileage.GetHashCode();
                if (this.TotalMinutes != null)
                    hashCode = hashCode * 59 + this.TotalMinutes.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.VehicleId != null)
                    hashCode = hashCode * 59 + this.VehicleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
