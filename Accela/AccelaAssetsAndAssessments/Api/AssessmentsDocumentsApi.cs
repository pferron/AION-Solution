/* 
 * Assets and Assessments
 *
 * The Assets and Assessments APIs enable apps to manage assets and their related condition assessments.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAssetsAndAssessments.Client;
using AccelaAssetsAndAssessments.Model;

namespace AccelaAssetsAndAssessments.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssessmentsDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Assessment Documents
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Delete Assessment Documents
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsWithHttpInfo (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Get All Assessment Documents
        /// </summary>
        /// <remarks>
        /// Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        ResponseDocumentModelArray V4GetAssessmentsAssessmentIdDocuments (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Assessment Documents
        /// </summary>
        /// <remarks>
        /// Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        ApiResponse<ResponseDocumentModelArray> V4GetAssessmentsAssessmentIdDocumentsWithHttpInfo (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Assessment Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostAssessmentsFileStreamAssessmentIdDocuments (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Assessment Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostAssessmentsFileStreamAssessmentIdDocumentsWithHttpInfo (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Assessment Documents
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsAsync (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Delete Assessment Documents
        /// </summary>
        /// <remarks>
        /// Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsAsyncWithHttpInfo (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Get All Assessment Documents
        /// </summary>
        /// <remarks>
        /// Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetAssessmentsAssessmentIdDocumentsAsync (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Assessment Documents
        /// </summary>
        /// <remarks>
        /// Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetAssessmentsAssessmentIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Assessment Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostAssessmentsFileStreamAssessmentIdDocumentsAsync (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Assessment Documents
        /// </summary>
        /// <remarks>
        /// Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostAssessmentsFileStreamAssessmentIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssessmentsDocumentsApi : IAssessmentsDocumentsApi
    {
        private AccelaAssetsAndAssessments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsDocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssessmentsDocumentsApi(String basePath)
        {
            this.Configuration = new AccelaAssetsAndAssessments.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAssetsAndAssessments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsDocumentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssessmentsDocumentsApi()
        {
            this.Configuration = AccelaAssetsAndAssessments.Client.Configuration.Default;

            ExceptionFactory = AccelaAssetsAndAssessments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsDocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssessmentsDocumentsApi(AccelaAssetsAndAssessments.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAssetsAndAssessments.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAssetsAndAssessments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAssetsAndAssessments.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAssetsAndAssessments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Assessment Documents Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsWithHttpInfo(contentType, authorization, assessmentId, documentIds, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Assessment Documents Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsWithHttpInfo (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");
            // verify the required parameter 'documentIds' is set
            if (documentIds == null)
                throw new ApiException(400, "Missing required parameter 'documentIds' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");

            var localVarPath = "/v4/assessments/{assessmentId}/documents/{documentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessmentId", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (documentIds != null) localVarPathParams.Add("documentIds", this.Configuration.ApiClient.ParameterToString(documentIds)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Assessment Documents Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsAsync (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsAsyncWithHttpInfo(contentType, authorization, assessmentId, documentIds, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Assessment Documents Deletes one or more documents for the given condition assessment.    **API Endpoint**:  DELETE /v4/assessments/{assessmentId}/documents/{documentIds}   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="documentIds">Comma-delimited IDs of the documents to be deleted.</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EDMS adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteAssessmentsAssessmentIdDocumentsDocumentIdsAsyncWithHttpInfo (string contentType, string authorization, string assessmentId, string documentIds, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");
            // verify the required parameter 'documentIds' is set
            if (documentIds == null)
                throw new ApiException(400, "Missing required parameter 'documentIds' when calling AssessmentsDocumentsApi->V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds");

            var localVarPath = "/v4/assessments/{assessmentId}/documents/{documentIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessmentId", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (documentIds != null) localVarPathParams.Add("documentIds", this.Configuration.ApiClient.ParameterToString(documentIds)); // path parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteAssessmentsAssessmentIdDocumentsDocumentIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Assessment Documents Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        public ResponseDocumentModelArray V4GetAssessmentsAssessmentIdDocuments (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = V4GetAssessmentsAssessmentIdDocumentsWithHttpInfo(contentType, authorization, assessmentId, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Assessment Documents Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        public ApiResponse< ResponseDocumentModelArray > V4GetAssessmentsAssessmentIdDocumentsWithHttpInfo (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsDocumentsApi->V4GetAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsDocumentsApi->V4GetAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsDocumentsApi->V4GetAssessmentsAssessmentIdDocuments");

            var localVarPath = "/v4/assessments/{assessmentId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessmentId", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAssessmentsAssessmentIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Get All Assessment Documents Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetAssessmentsAssessmentIdDocumentsAsync (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = await V4GetAssessmentsAssessmentIdDocumentsAsyncWithHttpInfo(contentType, authorization, assessmentId, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Assessment Documents Returns the documents for a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetAssessmentsAssessmentIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string assessmentId, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsDocumentsApi->V4GetAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsDocumentsApi->V4GetAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsDocumentsApi->V4GetAssessmentsAssessmentIdDocuments");

            var localVarPath = "/v4/assessments/{assessmentId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessmentId", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAssessmentsAssessmentIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Create Assessment Documents Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostAssessmentsFileStreamAssessmentIdDocuments (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostAssessmentsFileStreamAssessmentIdDocumentsWithHttpInfo(contentType, authorization, assessmentId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Assessment Documents Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostAssessmentsFileStreamAssessmentIdDocumentsWithHttpInfo (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsDocumentsApi->V4PostAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsDocumentsApi->V4PostAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsDocumentsApi->V4PostAssessmentsAssessmentIdDocuments");

            var localVarPath = "/v4/assessments/{assessmentId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessmentId", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostAssessmentsAssessmentIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Assessment Documents Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostAssessmentsFileStreamAssessmentIdDocumentsAsync (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostAssessmentsFileStreamAssessmentIdDocumentsAsyncWithHttpInfo(contentType, authorization, assessmentId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Assessment Documents Creates one or more document attachments for the given condition assessment. To specify the documents to be attached, use the HTTP header \&quot;Content-Type:multipart/form-data\&quot; and form-data for \&quot;uploadedFile\&quot; and \&quot;fileInfo\&quot;. Note that the \&quot;fileInfo\&quot; is a string containing an array of file attributes. Use \&quot;fileInfo\&quot; to specify one or more documents to be attached. For example:   Content - Disposition: form - data;name &#x3D; \&quot;uploadedFile\&quot;; filename&#x3D;\&quot;summaryReport.pdf\&quot;   Content - Disposition: form - data;name &#x3D; \&quot;fileInfo\&quot;   [    {    \&quot;serviceProviderCode\&quot;: \&quot;BPTDEV\&quot;,    \&quot;fileName\&quot;: \&quot;CXA12-pipe.png\&quot;,    \&quot;type\&quot;: \&quot;image/png\&quot;,    \&quot;description\&quot;: \&quot;Condition assessment on pipe\&quot;    }  ]        **API Endpoint**:  POST /v4/assessments/{assessmentId}/documents   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assessmentId">The ID of the assessment to fetch.</param>
        /// <param name="uploadedFile"> (optional)</param>
        /// <param name="fileInfo"> (optional)</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. (optional)</param>
        /// <param name="userId">The standard EDMS Adapter userid. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS Adapter password. It&#x27;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostAssessmentsFileStreamAssessmentIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, string assessmentId, System.IO.Stream uploadedFile = null, string fileInfo = null, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsDocumentsApi->V4PostAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsDocumentsApi->V4PostAssessmentsAssessmentIdDocuments");
            // verify the required parameter 'assessmentId' is set
            if (assessmentId == null)
                throw new ApiException(400, "Missing required parameter 'assessmentId' when calling AssessmentsDocumentsApi->V4PostAssessmentsAssessmentIdDocuments");

            var localVarPath = "/v4/assessments/{assessmentId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assessmentId != null) localVarPathParams.Add("assessmentId", this.Configuration.ApiClient.ParameterToString(assessmentId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostAssessmentsAssessmentIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
