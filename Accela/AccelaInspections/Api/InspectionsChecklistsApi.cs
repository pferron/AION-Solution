/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsChecklistsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Inspection Checklists
        /// </summary>
        /// <remarks>
        /// Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteInspectionsInspectionIdChecklistsIds (string contentType, string authorization, string inspectionId, string ids, string lang = null);

        /// <summary>
        /// Delete Inspection Checklists
        /// </summary>
        /// <remarks>
        /// Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteInspectionsInspectionIdChecklistsIdsWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string lang = null);
        /// <summary>
        /// Get All Checklists for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionChecklistModelArray</returns>
        ResponseInspectionChecklistModelArray V4GetInspectionsInspectionIdChecklists (string contentType, string authorization, string inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Checklists for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionChecklistModelArray</returns>
        ApiResponse<ResponseInspectionChecklistModelArray> V4GetInspectionsInspectionIdChecklistsWithHttpInfo (string contentType, string authorization, string inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Create Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        ResponseChecklistModelArray V4PostInspectionsInspectionIdChecklists (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null);

        /// <summary>
        /// Create Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        ApiResponse<ResponseChecklistModelArray> V4PostInspectionsInspectionIdChecklistsWithHttpInfo (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Inspection Checklists
        /// </summary>
        /// <remarks>
        /// Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsInspectionIdChecklistsIdsAsync (string contentType, string authorization, string inspectionId, string ids, string lang = null);

        /// <summary>
        /// Delete Inspection Checklists
        /// </summary>
        /// <remarks>
        /// Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsInspectionIdChecklistsIdsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string lang = null);
        /// <summary>
        /// Get All Checklists for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionChecklistModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionChecklistModelArray> V4GetInspectionsInspectionIdChecklistsAsync (string contentType, string authorization, string inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Checklists for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionChecklistModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionChecklistModelArray>> V4GetInspectionsInspectionIdChecklistsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Create Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistModelArray> V4PostInspectionsInspectionIdChecklistsAsync (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null);

        /// <summary>
        /// Create Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4PostInspectionsInspectionIdChecklistsAsyncWithHttpInfo (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsChecklistsApi : IInspectionsChecklistsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsChecklistsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsChecklistsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Inspection Checklists Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteInspectionsInspectionIdChecklistsIds (string contentType, string authorization, string inspectionId, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteInspectionsInspectionIdChecklistsIdsWithHttpInfo(contentType, authorization, inspectionId, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Inspection Checklists Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteInspectionsInspectionIdChecklistsIdsWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsInspectionIdChecklistsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Inspection Checklists Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsInspectionIdChecklistsIdsAsync (string contentType, string authorization, string inspectionId, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteInspectionsInspectionIdChecklistsIdsAsyncWithHttpInfo(contentType, authorization, inspectionId, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Inspection Checklists Deletes checklists for the specified inspection. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection checklists to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsInspectionIdChecklistsIdsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsChecklistsApi->V4DeleteInspectionsInspectionIdChecklistsIds");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsInspectionIdChecklistsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Checklists for Inspection Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionChecklistModelArray</returns>
        public ResponseInspectionChecklistModelArray V4GetInspectionsInspectionIdChecklists (string contentType, string authorization, string inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionChecklistModelArray> localVarResponse = V4GetInspectionsInspectionIdChecklistsWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Checklists for Inspection Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionChecklistModelArray</returns>
        public ApiResponse< ResponseInspectionChecklistModelArray > V4GetInspectionsInspectionIdChecklistsWithHttpInfo (string contentType, string authorization, string inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsApi->V4GetInspectionsInspectionIdChecklists");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsApi->V4GetInspectionsInspectionIdChecklists");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsApi->V4GetInspectionsInspectionIdChecklists");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionChecklistModelArray)));
        }

        /// <summary>
        /// Get All Checklists for Inspection Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionChecklistModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionChecklistModelArray> V4GetInspectionsInspectionIdChecklistsAsync (string contentType, string authorization, string inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionChecklistModelArray> localVarResponse = await V4GetInspectionsInspectionIdChecklistsAsyncWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Checklists for Inspection Gets the checklists for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">Inspection sequence number</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionChecklistModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionChecklistModelArray>> V4GetInspectionsInspectionIdChecklistsAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsApi->V4GetInspectionsInspectionIdChecklists");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsApi->V4GetInspectionsInspectionIdChecklists");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsApi->V4GetInspectionsInspectionIdChecklists");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionChecklistModelArray)));
        }

        /// <summary>
        /// Create Inspection Checklist Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        public ResponseChecklistModelArray V4PostInspectionsInspectionIdChecklists (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = V4PostInspectionsInspectionIdChecklistsWithHttpInfo(contentType, authorization, body, inspectionId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Inspection Checklist Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        public ApiResponse< ResponseChecklistModelArray > V4PostInspectionsInspectionIdChecklistsWithHttpInfo (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdChecklists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

        /// <summary>
        /// Create Inspection Checklist Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistModelArray> V4PostInspectionsInspectionIdChecklistsAsync (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = await V4PostInspectionsInspectionIdChecklistsAsyncWithHttpInfo(contentType, authorization, body, inspectionId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Inspection Checklist Creates checklists for the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Inspection checklist to be created</param>
        /// <param name="inspectionId">The ID of the inspection to fetch</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4PostInspectionsInspectionIdChecklistsAsyncWithHttpInfo (string contentType, string authorization, List<InspectionChecklistModel> body, string inspectionId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsApi->V4PostInspectionsInspectionIdChecklists");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdChecklists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

    }
}
