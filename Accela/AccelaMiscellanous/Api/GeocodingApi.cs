/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaMiscellanous.Client;
using AccelaMiscellanous.Model;

namespace AccelaMiscellanous.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGeocodingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Reverse Geocode Address
        /// </summary>
        /// <remarks>
        /// Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseGeocodeAddressModel</returns>
        ResponseGeocodeAddressModel V4GetGeoGeocodeReverse (string contentType, string authorization, string longitude, string latitude, string lang = null);

        /// <summary>
        /// Reverse Geocode Address
        /// </summary>
        /// <remarks>
        /// Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseGeocodeAddressModel</returns>
        ApiResponse<ResponseGeocodeAddressModel> V4GetGeoGeocodeReverseWithHttpInfo (string contentType, string authorization, string longitude, string latitude, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Reverse Geocode Address
        /// </summary>
        /// <remarks>
        /// Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseGeocodeAddressModel</returns>
        System.Threading.Tasks.Task<ResponseGeocodeAddressModel> V4GetGeoGeocodeReverseAsync (string contentType, string authorization, string longitude, string latitude, string lang = null);

        /// <summary>
        /// Reverse Geocode Address
        /// </summary>
        /// <remarks>
        /// Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGeocodeAddressModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseGeocodeAddressModel>> V4GetGeoGeocodeReverseAsyncWithHttpInfo (string contentType, string authorization, string longitude, string latitude, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GeocodingApi : IGeocodingApi
    {
        private AccelaMiscellanous.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GeocodingApi(String basePath)
        {
            this.Configuration = new AccelaMiscellanous.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaMiscellanous.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GeocodingApi(AccelaMiscellanous.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaMiscellanous.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaMiscellanous.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaMiscellanous.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaMiscellanous.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Reverse Geocode Address Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseGeocodeAddressModel</returns>
        public ResponseGeocodeAddressModel V4GetGeoGeocodeReverse (string contentType, string authorization, string longitude, string latitude, string lang = null)
        {
             ApiResponse<ResponseGeocodeAddressModel> localVarResponse = V4GetGeoGeocodeReverseWithHttpInfo(contentType, authorization, longitude, latitude, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reverse Geocode Address Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseGeocodeAddressModel</returns>
        public ApiResponse< ResponseGeocodeAddressModel > V4GetGeoGeocodeReverseWithHttpInfo (string contentType, string authorization, string longitude, string latitude, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling GeocodingApi->V4GetGeoGeocodeReverse");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling GeocodingApi->V4GetGeoGeocodeReverse");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling GeocodingApi->V4GetGeoGeocodeReverse");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling GeocodingApi->V4GetGeoGeocodeReverse");

            var localVarPath = "/v4/geo/geocode/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetGeoGeocodeReverse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGeocodeAddressModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGeocodeAddressModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGeocodeAddressModel)));
        }

        /// <summary>
        /// Reverse Geocode Address Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseGeocodeAddressModel</returns>
        public async System.Threading.Tasks.Task<ResponseGeocodeAddressModel> V4GetGeoGeocodeReverseAsync (string contentType, string authorization, string longitude, string latitude, string lang = null)
        {
             ApiResponse<ResponseGeocodeAddressModel> localVarResponse = await V4GetGeoGeocodeReverseAsyncWithHttpInfo(contentType, authorization, longitude, latitude, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reverse Geocode Address Returns address information for the given longitude and latitude coordinates. This API returns address information from map services configured on **[Construct Admin Portal](https://admin.accela.com) &gt; {Agency} &gt; Agency Settings &gt; GIS Settings**. **API Endpoint**:  GET /v4/geo/geocode/reverse  **Scope**:  gis  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: All 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="longitude">The north-south, x-coordinate of an address. The value must be between -180 and +180.  </param>
        /// <param name="latitude">The east-west, y-coordinate of an address. The value must be between -90 and +90.   </param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseGeocodeAddressModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseGeocodeAddressModel>> V4GetGeoGeocodeReverseAsyncWithHttpInfo (string contentType, string authorization, string longitude, string latitude, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling GeocodingApi->V4GetGeoGeocodeReverse");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling GeocodingApi->V4GetGeoGeocodeReverse");
            // verify the required parameter 'longitude' is set
            if (longitude == null)
                throw new ApiException(400, "Missing required parameter 'longitude' when calling GeocodingApi->V4GetGeoGeocodeReverse");
            // verify the required parameter 'latitude' is set
            if (latitude == null)
                throw new ApiException(400, "Missing required parameter 'latitude' when calling GeocodingApi->V4GetGeoGeocodeReverse");

            var localVarPath = "/v4/geo/geocode/reverse";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (longitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longitude", longitude)); // query parameter
            if (latitude != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "latitude", latitude)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetGeoGeocodeReverse", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseGeocodeAddressModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseGeocodeAddressModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseGeocodeAddressModel)));
        }

    }
}
