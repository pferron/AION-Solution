/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// PaymentRequestModel
    /// </summary>
    [DataContract]
        public partial class PaymentRequestModel :  IEquatable<PaymentRequestModel>, IValidatableObject
    {
        /// <summary>
        /// The method of payment, for example, credit card, check, trust account.
        /// </summary>
        /// <value>The method of payment, for example, credit card, check, trust account.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PaymentMethodEnum
        {
            /// <summary>
            /// Enum CreditCard for value: Credit Card
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard = 0,
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 1,
            /// <summary>
            /// Enum TrustAccount for value: Trust Account
            /// </summary>
            [EnumMember(Value = "Trust Account")]
            TrustAccount = 2        }
        /// <summary>
        /// The method of payment, for example, credit card, check, trust account.
        /// </summary>
        /// <value>The method of payment, for example, credit card, check, trust account.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public PaymentMethodEnum? PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentRequestModel" /> class.
        /// </summary>
        /// <param name="amount">The amount of a payment transaction or account balance..</param>
        /// <param name="check">check.</param>
        /// <param name="creditCard">creditCard.</param>
        /// <param name="currency">The standard ISO 4217 currency code. For example, \&quot;USD\&quot; for US Dollars..</param>
        /// <param name="entityId">The unique ID of the entity or record the payment applies to..</param>
        /// <param name="entityType">The type of entity the payment applies to..</param>
        /// <param name="paymentMethod">The method of payment, for example, credit card, check, trust account..</param>
        /// <param name="trustAccount">trustAccount.</param>
        public PaymentRequestModel(double? amount = default(double?), CheckModel check = default(CheckModel), CreditCardModel creditCard = default(CreditCardModel), string currency = default(string), string entityId = default(string), string entityType = default(string), PaymentMethodEnum? paymentMethod = default(PaymentMethodEnum?), TrustAccountRequestModel trustAccount = default(TrustAccountRequestModel))
        {
            this.Amount = amount;
            this.Check = check;
            this.CreditCard = creditCard;
            this.Currency = currency;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.PaymentMethod = paymentMethod;
            this.TrustAccount = trustAccount;
        }
        
        /// <summary>
        /// The amount of a payment transaction or account balance.
        /// </summary>
        /// <value>The amount of a payment transaction or account balance.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Check
        /// </summary>
        [DataMember(Name="check", EmitDefaultValue=false)]
        public CheckModel Check { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="creditCard", EmitDefaultValue=false)]
        public CreditCardModel CreditCard { get; set; }

        /// <summary>
        /// The standard ISO 4217 currency code. For example, \&quot;USD\&quot; for US Dollars.
        /// </summary>
        /// <value>The standard ISO 4217 currency code. For example, \&quot;USD\&quot; for US Dollars.</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// The unique ID of the entity or record the payment applies to.
        /// </summary>
        /// <value>The unique ID of the entity or record the payment applies to.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The type of entity the payment applies to.
        /// </summary>
        /// <value>The type of entity the payment applies to.</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }


        /// <summary>
        /// Gets or Sets TrustAccount
        /// </summary>
        [DataMember(Name="trustAccount", EmitDefaultValue=false)]
        public TrustAccountRequestModel TrustAccount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentRequestModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Check: ").Append(Check).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  TrustAccount: ").Append(TrustAccount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentRequestModel);
        }

        /// <summary>
        /// Returns true if PaymentRequestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentRequestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentRequestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Check == input.Check ||
                    (this.Check != null &&
                    this.Check.Equals(input.Check))
                ) && 
                (
                    this.CreditCard == input.CreditCard ||
                    (this.CreditCard != null &&
                    this.CreditCard.Equals(input.CreditCard))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.TrustAccount == input.TrustAccount ||
                    (this.TrustAccount != null &&
                    this.TrustAccount.Equals(input.TrustAccount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Check != null)
                    hashCode = hashCode * 59 + this.Check.GetHashCode();
                if (this.CreditCard != null)
                    hashCode = hashCode * 59 + this.CreditCard.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.TrustAccount != null)
                    hashCode = hashCode * 59 + this.TrustAccount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
