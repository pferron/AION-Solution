/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsChecklistsChecklistItemsCustomTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTablesModelArray</returns>
        ResponseCustomTablesModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTablesModelArray</returns>
        ApiResponse<ResponseCustomTablesModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        ResponseCustomTableMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        ApiResponse<ResponseCustomTableMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTablesModelArray</returns>
        ResponseCustomTablesModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTablesModelArray</returns>
        ApiResponse<ResponseCustomTablesModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        ResponseCustomTableMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        ApiResponse<ResponseCustomTableMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null);

        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTablesModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomTablesModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTablesModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomTablesModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTablesModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomTablesModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTablesModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomTablesModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null);

        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsChecklistsChecklistItemsCustomTablesApi : IInspectionsChecklistsChecklistItemsCustomTablesApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsChecklistItemsCustomTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsChecklistsChecklistItemsCustomTablesApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsChecklistItemsCustomTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsChecklistsChecklistItemsCustomTablesApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTablesModelArray</returns>
        public ResponseCustomTablesModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTablesModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTablesModelArray</returns>
        public ApiResponse< ResponseCustomTablesModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTablesModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTablesModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTablesModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTablesModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomTablesModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTablesModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables for Inspection Checklist Item Gets the custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTablesModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomTablesModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTablesModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTablesModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTablesModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        public ResponseCustomTableMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        public ApiResponse< ResponseCustomTableMetadataModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get Custom Table for Inspection Checklist Item Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTablesModelArray</returns>
        public ResponseCustomTablesModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTablesModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, tableId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Table for Inspection Checklist Item Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTablesModelArray</returns>
        public ApiResponse< ResponseCustomTablesModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTablesModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTablesModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTablesModelArray)));
        }

        /// <summary>
        /// Get Custom Table for Inspection Checklist Item Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTablesModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomTablesModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTablesModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, tableId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Table for Inspection Checklist Item Gets a custom table for the requested checklist item for a specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTablesModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomTablesModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTablesModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTablesModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTablesModelArray)));
        }

        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        public ResponseCustomTableMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, tableId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        public ApiResponse< ResponseCustomTableMetadataModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, tableId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Table Metadata for an Inspection Checklist Item Gets the metadata for the custom tables of the requested checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta   **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Custom Tables for Inspection Checklist Item Updates custom tables for the requested checklist item for a specified inspection. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<InspectionChecklistItemCustomTable> body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsChecklistItemsCustomTablesApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
