/* 
 * Documents
 *
 * Document and DocumentReview APIs
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaDocuments.Client.SwaggerDateConverter;

namespace AccelaDocuments.Model
{
    /// <summary>
    /// UserRolePrivilegeModel
    /// </summary>
    [DataContract]
        public partial class UserRolePrivilegeModel :  IEquatable<UserRolePrivilegeModel>, IValidatableObject
    {
        /// <summary>
        /// Defines CitizenRoles
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CitizenRolesEnum
        {
            /// <summary>
            /// Enum RegisteredUser for value: registeredUser
            /// </summary>
            [EnumMember(Value = "registeredUser")]
            RegisteredUser = 0,
            /// <summary>
            /// Enum LicensedProfessional for value: licensedProfessional
            /// </summary>
            [EnumMember(Value = "licensedProfessional")]
            LicensedProfessional = 1,
            /// <summary>
            /// Enum Owner for value: owner
            /// </summary>
            [EnumMember(Value = "owner")]
            Owner = 2,
            /// <summary>
            /// Enum Contact for value: contact
            /// </summary>
            [EnumMember(Value = "contact")]
            Contact = 3,
            /// <summary>
            /// Enum CitizenUser for value: citizenUser
            /// </summary>
            [EnumMember(Value = "citizenUser")]
            CitizenUser = 4,
            /// <summary>
            /// Enum RecordCreator for value: recordCreator
            /// </summary>
            [EnumMember(Value = "recordCreator")]
            RecordCreator = 5        }
        /// <summary>
        /// Contains permission assignments for downloading documents, viewing document names, deleting documents.
        /// </summary>
        /// <value>Contains permission assignments for downloading documents, viewing document names, deleting documents.</value>
        [DataMember(Name="citizenRoles", EmitDefaultValue=false)]
        public List<CitizenRolesEnum> CitizenRoles { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UserRolePrivilegeModel" /> class.
        /// </summary>
        /// <param name="citizenRoles">Contains permission assignments for downloading documents, viewing document names, deleting documents..</param>
        /// <param name="licenseTypeRules">A string array containing the types of licensed professionals who are given the permission. See [Get All Professional License Types](./api-settings.html#operation/v4.get.settings.professionals.types)..</param>
        public UserRolePrivilegeModel(List<CitizenRolesEnum> citizenRoles = default(List<CitizenRolesEnum>), List<string> licenseTypeRules = default(List<string>))
        {
            this.CitizenRoles = citizenRoles;
            this.LicenseTypeRules = licenseTypeRules;
        }
        

        /// <summary>
        /// A string array containing the types of licensed professionals who are given the permission. See [Get All Professional License Types](./api-settings.html#operation/v4.get.settings.professionals.types).
        /// </summary>
        /// <value>A string array containing the types of licensed professionals who are given the permission. See [Get All Professional License Types](./api-settings.html#operation/v4.get.settings.professionals.types).</value>
        [DataMember(Name="licenseTypeRules", EmitDefaultValue=false)]
        public List<string> LicenseTypeRules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRolePrivilegeModel {\n");
            sb.Append("  CitizenRoles: ").Append(CitizenRoles).Append("\n");
            sb.Append("  LicenseTypeRules: ").Append(LicenseTypeRules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserRolePrivilegeModel);
        }

        /// <summary>
        /// Returns true if UserRolePrivilegeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of UserRolePrivilegeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRolePrivilegeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CitizenRoles == input.CitizenRoles ||
                    this.CitizenRoles != null &&
                    input.CitizenRoles != null &&
                    this.CitizenRoles.SequenceEqual(input.CitizenRoles)
                ) && 
                (
                    this.LicenseTypeRules == input.LicenseTypeRules ||
                    this.LicenseTypeRules != null &&
                    input.LicenseTypeRules != null &&
                    this.LicenseTypeRules.SequenceEqual(input.LicenseTypeRules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CitizenRoles != null)
                    hashCode = hashCode * 59 + this.CitizenRoles.GetHashCode();
                if (this.LicenseTypeRules != null)
                    hashCode = hashCode * 59 + this.LicenseTypeRules.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
