/* 
 * Assets and Assessments
 *
 * The Assets and Assessments APIs enable apps to manage assets and their related condition assessments.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAssetsAndAssessments.Client.SwaggerDateConverter;

namespace AccelaAssetsAndAssessments.Model
{
    /// <summary>
    /// RequestAssessmentModel
    /// </summary>
    [DataContract]
        public partial class RequestAssessmentModel :  IEquatable<RequestAssessmentModel>, IValidatableObject
    {
        /// <summary>
        /// The status of the condition assessment
        /// </summary>
        /// <value>The status of the condition assessment</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum StatusEnum
        {
            /// <summary>
            /// Enum Completed for value: Completed
            /// </summary>
            [EnumMember(Value = "Completed")]
            Completed = 0,
            /// <summary>
            /// Enum Scheduled for value: Scheduled
            /// </summary>
            [EnumMember(Value = "Scheduled")]
            Scheduled = 1        }
        /// <summary>
        /// The status of the condition assessment
        /// </summary>
        /// <value>The status of the condition assessment</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestAssessmentModel" /> class.
        /// </summary>
        /// <param name="attributes">attributes.</param>
        /// <param name="comment"> Comments or notes about the assessment..</param>
        /// <param name="conditionAssessment">The condition assessment type. See [Get All Condition Assessment Types](./api-settings.html#operation/v4.get.settings.assessments.types)..</param>
        /// <param name="inspectionDate">The inspection date for the assessment, in yyyy-mm-dd format..</param>
        /// <param name="inspectionTime">The inspection time for the assessment, in hh:mm AM/PM format..</param>
        /// <param name="inspectorId">The ID of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors)..</param>
        /// <param name="scheduleDate">The scheduled assessment date, in yyyy-mm-dd format..</param>
        /// <param name="scheduleTime">The scheduled assessment time, in hh:mm AM/PM format..</param>
        /// <param name="status">The status of the condition assessment (required).</param>
        /// <param name="timeSpent">The number of hours spent on the assessment..</param>
        public RequestAssessmentModel(CustomAttributeModel attributes = default(CustomAttributeModel), string comment = default(string), string conditionAssessment = default(string), string inspectionDate = default(string), string inspectionTime = default(string), string inspectorId = default(string), string scheduleDate = default(string), string scheduleTime = default(string), StatusEnum status = default(StatusEnum), string timeSpent = default(string))
        {
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for RequestAssessmentModel and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.Attributes = attributes;
            this.Comment = comment;
            this.ConditionAssessment = conditionAssessment;
            this.InspectionDate = inspectionDate;
            this.InspectionTime = inspectionTime;
            this.InspectorId = inspectorId;
            this.ScheduleDate = scheduleDate;
            this.ScheduleTime = scheduleTime;
            this.TimeSpent = timeSpent;
        }
        
        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public CustomAttributeModel Attributes { get; set; }

        /// <summary>
        ///  Comments or notes about the assessment.
        /// </summary>
        /// <value> Comments or notes about the assessment.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The condition assessment type. See [Get All Condition Assessment Types](./api-settings.html#operation/v4.get.settings.assessments.types).
        /// </summary>
        /// <value>The condition assessment type. See [Get All Condition Assessment Types](./api-settings.html#operation/v4.get.settings.assessments.types).</value>
        [DataMember(Name="conditionAssessment", EmitDefaultValue=false)]
        public string ConditionAssessment { get; set; }

        /// <summary>
        /// The inspection date for the assessment, in yyyy-mm-dd format.
        /// </summary>
        /// <value>The inspection date for the assessment, in yyyy-mm-dd format.</value>
        [DataMember(Name="inspectionDate", EmitDefaultValue=false)]
        public string InspectionDate { get; set; }

        /// <summary>
        /// The inspection time for the assessment, in hh:mm AM/PM format.
        /// </summary>
        /// <value>The inspection time for the assessment, in hh:mm AM/PM format.</value>
        [DataMember(Name="inspectionTime", EmitDefaultValue=false)]
        public string InspectionTime { get; set; }

        /// <summary>
        /// The ID of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
        /// </summary>
        /// <value>The ID of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).</value>
        [DataMember(Name="inspectorId", EmitDefaultValue=false)]
        public string InspectorId { get; set; }

        /// <summary>
        /// The scheduled assessment date, in yyyy-mm-dd format.
        /// </summary>
        /// <value>The scheduled assessment date, in yyyy-mm-dd format.</value>
        [DataMember(Name="scheduleDate", EmitDefaultValue=false)]
        public string ScheduleDate { get; set; }

        /// <summary>
        /// The scheduled assessment time, in hh:mm AM/PM format.
        /// </summary>
        /// <value>The scheduled assessment time, in hh:mm AM/PM format.</value>
        [DataMember(Name="scheduleTime", EmitDefaultValue=false)]
        public string ScheduleTime { get; set; }


        /// <summary>
        /// The number of hours spent on the assessment.
        /// </summary>
        /// <value>The number of hours spent on the assessment.</value>
        [DataMember(Name="timeSpent", EmitDefaultValue=false)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestAssessmentModel {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ConditionAssessment: ").Append(ConditionAssessment).Append("\n");
            sb.Append("  InspectionDate: ").Append(InspectionDate).Append("\n");
            sb.Append("  InspectionTime: ").Append(InspectionTime).Append("\n");
            sb.Append("  InspectorId: ").Append(InspectorId).Append("\n");
            sb.Append("  ScheduleDate: ").Append(ScheduleDate).Append("\n");
            sb.Append("  ScheduleTime: ").Append(ScheduleTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestAssessmentModel);
        }

        /// <summary>
        /// Returns true if RequestAssessmentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestAssessmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestAssessmentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Attributes == input.Attributes ||
                    (this.Attributes != null &&
                    this.Attributes.Equals(input.Attributes))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ConditionAssessment == input.ConditionAssessment ||
                    (this.ConditionAssessment != null &&
                    this.ConditionAssessment.Equals(input.ConditionAssessment))
                ) && 
                (
                    this.InspectionDate == input.InspectionDate ||
                    (this.InspectionDate != null &&
                    this.InspectionDate.Equals(input.InspectionDate))
                ) && 
                (
                    this.InspectionTime == input.InspectionTime ||
                    (this.InspectionTime != null &&
                    this.InspectionTime.Equals(input.InspectionTime))
                ) && 
                (
                    this.InspectorId == input.InspectorId ||
                    (this.InspectorId != null &&
                    this.InspectorId.Equals(input.InspectorId))
                ) && 
                (
                    this.ScheduleDate == input.ScheduleDate ||
                    (this.ScheduleDate != null &&
                    this.ScheduleDate.Equals(input.ScheduleDate))
                ) && 
                (
                    this.ScheduleTime == input.ScheduleTime ||
                    (this.ScheduleTime != null &&
                    this.ScheduleTime.Equals(input.ScheduleTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TimeSpent == input.TimeSpent ||
                    (this.TimeSpent != null &&
                    this.TimeSpent.Equals(input.TimeSpent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Attributes != null)
                    hashCode = hashCode * 59 + this.Attributes.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ConditionAssessment != null)
                    hashCode = hashCode * 59 + this.ConditionAssessment.GetHashCode();
                if (this.InspectionDate != null)
                    hashCode = hashCode * 59 + this.InspectionDate.GetHashCode();
                if (this.InspectionTime != null)
                    hashCode = hashCode * 59 + this.InspectionTime.GetHashCode();
                if (this.InspectorId != null)
                    hashCode = hashCode * 59 + this.InspectorId.GetHashCode();
                if (this.ScheduleDate != null)
                    hashCode = hashCode * 59 + this.ScheduleDate.GetHashCode();
                if (this.ScheduleTime != null)
                    hashCode = hashCode * 59 + this.ScheduleTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TimeSpent != null)
                    hashCode = hashCode * 59 + this.TimeSpent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
