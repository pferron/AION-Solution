/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsChecklistsChecklistItemsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Inspection Checklist Items
        /// </summary>
        /// <remarks>
        /// Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionChecklistItemModelArray</returns>
        ResponseInspectionChecklistItemModelArray V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Checklist Items
        /// </summary>
        /// <remarks>
        /// Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionChecklistItemModelArray</returns>
        ApiResponse<ResponseInspectionChecklistItemModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Inspection Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        ResponseDocumentModelArray V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        ApiResponse<ResponseDocumentModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Checklist Item History
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChekclistItemHistoryModel</returns>
        ResponseChekclistItemHistoryModel V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);

        /// <summary>
        /// Get Inspection Checklist Item History
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChekclistItemHistoryModel</returns>
        ApiResponse<ResponseChekclistItemHistoryModel> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);
        /// <summary>
        /// Get All Inspection Checklist Item Statuses
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistItemStatusModelArray</returns>
        ResponseChecklistItemStatusModelArray V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);

        /// <summary>
        /// Get All Inspection Checklist Item Statuses
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistItemStatusModelArray</returns>
        ApiResponse<ResponseChecklistItemStatusModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);
        /// <summary>
        /// Create Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Update Checklist Items
        /// </summary>
        /// <remarks>
        /// Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        ResponseChecklistModelArray V4PutInspectionsChecklistsIdChecklistItems (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null);

        /// <summary>
        /// Update Checklist Items
        /// </summary>
        /// <remarks>
        /// Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        ApiResponse<ResponseChecklistModelArray> V4PutInspectionsChecklistsIdChecklistItemsWithHttpInfo (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Inspection Checklist Items
        /// </summary>
        /// <remarks>
        /// Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionChecklistItemModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionChecklistItemModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsAsync (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Checklist Items
        /// </summary>
        /// <remarks>
        /// Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionChecklistItemModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionChecklistItemModelArray>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Inspection Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsync (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Checklist Item History
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChekclistItemHistoryModel</returns>
        System.Threading.Tasks.Task<ResponseChekclistItemHistoryModel> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesAsync (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);

        /// <summary>
        /// Get Inspection Checklist Item History
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChekclistItemHistoryModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChekclistItemHistoryModel>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);
        /// <summary>
        /// Get All Inspection Checklist Item Statuses
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistItemStatusModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistItemStatusModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesAsync (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);

        /// <summary>
        /// Get All Inspection Checklist Item Statuses
        /// </summary>
        /// <remarks>
        /// Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistItemStatusModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistItemStatusModelArray>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null);
        /// <summary>
        /// Create Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsync (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);

        /// <summary>
        /// Create Checklist Item Documents
        /// </summary>
        /// <remarks>
        /// Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null);
        /// <summary>
        /// Update Checklist Items
        /// </summary>
        /// <remarks>
        /// Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistModelArray> V4PutInspectionsChecklistsIdChecklistItemsAsync (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null);

        /// <summary>
        /// Update Checklist Items
        /// </summary>
        /// <remarks>
        /// Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4PutInspectionsChecklistsIdChecklistItemsAsyncWithHttpInfo (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsChecklistsChecklistItemsApi : IInspectionsChecklistsChecklistItemsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsChecklistItemsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsChecklistsChecklistItemsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsChecklistItemsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsChecklistsChecklistItemsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Inspection Checklist Items Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionChecklistItemModelArray</returns>
        public ResponseInspectionChecklistItemModelArray V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionChecklistItemModelArray> localVarResponse = V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsWithHttpInfo(contentType, authorization, inspectionId, checklistId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspection Checklist Items Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionChecklistItemModelArray</returns>
        public ApiResponse< ResponseInspectionChecklistItemModelArray > V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionChecklistItemModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionChecklistItemModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionChecklistItemModelArray)));
        }

        /// <summary>
        /// Get All Inspection Checklist Items Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionChecklistItemModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionChecklistItemModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsAsync (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionChecklistItemModelArray> localVarResponse = await V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsAsyncWithHttpInfo(contentType, authorization, inspectionId, checklistId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspection Checklist Items Gets the checklist items for the specified inspection checklist. **API Endpoint**: GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionChecklistItemModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionChecklistItemModelArray>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionChecklistItemModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionChecklistItemModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionChecklistItemModelArray)));
        }

        /// <summary>
        /// Get All Inspection Checklist Item Documents Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDocumentModelArray</returns>
        public ResponseDocumentModelArray V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsWithHttpInfo(contentType, authorization, inspectionId, checklistId, checkListItemId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspection Checklist Item Documents Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDocumentModelArray</returns>
        public ApiResponse< ResponseDocumentModelArray > V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checkListItemId' is set
            if (checkListItemId == null)
                throw new ApiException(400, "Missing required parameter 'checkListItemId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checkListItemId != null) localVarPathParams.Add("checkListItemId", this.Configuration.ApiClient.ParameterToString(checkListItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Get All Inspection Checklist Item Documents Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDocumentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDocumentModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsync (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseDocumentModelArray> localVarResponse = await V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsyncWithHttpInfo(contentType, authorization, inspectionId, checklistId, checkListItemId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspection Checklist Item Documents Gets the documents associated with the specified checklist item. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDocumentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDocumentModelArray>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checkListItemId' is set
            if (checkListItemId == null)
                throw new ApiException(400, "Missing required parameter 'checkListItemId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checkListItemId != null) localVarPathParams.Add("checkListItemId", this.Configuration.ApiClient.ParameterToString(checkListItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDocumentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDocumentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDocumentModelArray)));
        }

        /// <summary>
        /// Get Inspection Checklist Item History Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChekclistItemHistoryModel</returns>
        public ResponseChekclistItemHistoryModel V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
             ApiResponse<ResponseChekclistItemHistoryModel> localVarResponse = V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesWithHttpInfo(contentType, authorization, inspectionId, checklistId, checklistItemId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspection Checklist Item History Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChekclistItemHistoryModel</returns>
        public ApiResponse< ResponseChekclistItemHistoryModel > V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChekclistItemHistoryModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChekclistItemHistoryModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChekclistItemHistoryModel)));
        }

        /// <summary>
        /// Get Inspection Checklist Item History Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChekclistItemHistoryModel</returns>
        public async System.Threading.Tasks.Task<ResponseChekclistItemHistoryModel> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesAsync (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
             ApiResponse<ResponseChekclistItemHistoryModel> localVarResponse = await V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesAsyncWithHttpInfo(contentType, authorization, inspectionId, checklistId, checklistItemId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspection Checklist Item History Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChekclistItemHistoryModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChekclistItemHistoryModel>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistoriesAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChekclistItemHistoryModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChekclistItemHistoryModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChekclistItemHistoryModel)));
        }

        /// <summary>
        /// Get All Inspection Checklist Item Statuses Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistItemStatusModelArray</returns>
        public ResponseChecklistItemStatusModelArray V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
             ApiResponse<ResponseChecklistItemStatusModelArray> localVarResponse = V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesWithHttpInfo(contentType, authorization, inspectionId, checklistId, checklistItemId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspection Checklist Item Statuses Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistItemStatusModelArray</returns>
        public ApiResponse< ResponseChecklistItemStatusModelArray > V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistItemStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistItemStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistItemStatusModelArray)));
        }

        /// <summary>
        /// Get All Inspection Checklist Item Statuses Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistItemStatusModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistItemStatusModelArray> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesAsync (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
             ApiResponse<ResponseChecklistItemStatusModelArray> localVarResponse = await V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesAsyncWithHttpInfo(contentType, authorization, inspectionId, checklistId, checklistItemId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspection Checklist Item Statuses Gets historical (audit) data related to a checklist item for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistItemStatusModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistItemStatusModelArray>> V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatusesAsyncWithHttpInfo (string contentType, string authorization, string inspectionId, string checklistId, string checklistItemId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsApi->V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checklistItemId}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistItemStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistItemStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistItemStatusModelArray)));
        }

        /// <summary>
        /// Create Checklist Item Documents Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsWithHttpInfo(contentType, authorization, inspectionId, checklistId, checkListItemId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Checklist Item Documents Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checkListItemId' is set
            if (checkListItemId == null)
                throw new ApiException(400, "Missing required parameter 'checkListItemId' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'fileInfo' is set
            if (fileInfo == null)
                throw new ApiException(400, "Missing required parameter 'fileInfo' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checkListItemId != null) localVarPathParams.Add("checkListItemId", this.Configuration.ApiClient.ParameterToString(checkListItemId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Checklist Item Documents Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsync (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsyncWithHttpInfo(contentType, authorization, inspectionId, checklistId, checkListItemId, uploadedFile, fileInfo, group, category, userId, password, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Checklist Item Documents Attaches documents to a checklist item. **API Endpoint**:  POST /v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checkListItemId">The ID of the checklist item to fetch.</param>
        /// <param name="uploadedFile">Specify the filename parameter with the file to be uploaded. See example for details.</param>
        /// <param name="fileInfo">A string array containing the file metadata for each specified filename. See example for details.</param>
        /// <param name="group">The document group. (optional)</param>
        /// <param name="category">The document category. The list of category options varies depending on the document group. See [Get All Document Categories](./api-settings.html#operation/v4.get.settings.documents.categories). (optional)</param>
        /// <param name="userId">The standard EDMS adapter userid. It&#39;s required for user level authentication (optional)</param>
        /// <param name="password">The standard EMDS adapter password. It&#39;s required for user level authentication (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocumentsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? checklistId, string checkListItemId, System.IO.Stream uploadedFile, string fileInfo, string group = null, string category = null, string userId = null, string password = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'checkListItemId' is set
            if (checkListItemId == null)
                throw new ApiException(400, "Missing required parameter 'checkListItemId' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'uploadedFile' is set
            if (uploadedFile == null)
                throw new ApiException(400, "Missing required parameter 'uploadedFile' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");
            // verify the required parameter 'fileInfo' is set
            if (fileInfo == null)
                throw new ApiException(400, "Missing required parameter 'fileInfo' when calling InspectionsChecklistsChecklistItemsApi->V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments");

            var localVarPath = "/v4/inspections/{inspectionId}/checklists/{checklistId}/checklistItems/{checkListItemId}/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checkListItemId != null) localVarPathParams.Add("checkListItemId", this.Configuration.ApiClient.ParameterToString(checkListItemId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (category != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "category", category)); // query parameter
            if (userId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userId", userId)); // query parameter
            if (password != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "password", password)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (uploadedFile != null) localVarFileParams.Add("uploadedFile", this.Configuration.ApiClient.ParameterToFile("uploadedFile", uploadedFile));
            if (fileInfo != null) localVarFormParams.Add("fileInfo", this.Configuration.ApiClient.ParameterToString(fileInfo)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdChecklistsChecklistIdChecklistItemsChecklistItemIdDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Checklist Items Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        public ResponseChecklistModelArray V4PutInspectionsChecklistsIdChecklistItems (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = V4PutInspectionsChecklistsIdChecklistItemsWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Checklist Items Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        public ApiResponse< ResponseChecklistModelArray > V4PutInspectionsChecklistsIdChecklistItemsWithHttpInfo (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");

            var localVarPath = "/v4/inspections/checklists/{id}/checklistItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsChecklistsIdChecklistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

        /// <summary>
        /// Update Checklist Items Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistModelArray> V4PutInspectionsChecklistsIdChecklistItemsAsync (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = await V4PutInspectionsChecklistsIdChecklistItemsAsyncWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Checklist Items Updates the checklist items for the specified checklist. **API Endpoint**:  PUT /v4/inspections/checklists/{id}/checklistItems  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the checklist to fetch.</param>
        /// <param name="body">The checklist items to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4PutInspectionsChecklistsIdChecklistItemsAsyncWithHttpInfo (string contentType, string authorization, string id, List<InspectionChecklistItemModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsChecklistItemsApi->V4PutInspectionsChecklistsIdChecklistItems");

            var localVarPath = "/v4/inspections/checklists/{id}/checklistItems";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsChecklistsIdChecklistItems", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

    }
}
