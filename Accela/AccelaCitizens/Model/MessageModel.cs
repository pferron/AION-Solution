/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// MessageModel
    /// </summary>
    [DataContract]
    public partial class MessageModel :  IEquatable<MessageModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not an announcement has been read by the logged-in user.
        /// </summary>
        /// <value>Indicates whether or not an announcement has been read by the logged-in user.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsReadEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not an announcement has been read by the logged-in user.
        /// </summary>
        /// <value>Indicates whether or not an announcement has been read by the logged-in user.</value>
        [DataMember(Name="isRead", EmitDefaultValue=false)]
        public IsReadEnum? IsRead { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageModel" /> class.
        /// </summary>
        /// <param name="id">The message id assigned by the Civic Platform server..</param>
        /// <param name="isRead">Indicates whether or not an announcement has been read by the logged-in user..</param>
        /// <param name="startEffectDate">The starting effective date..</param>
        /// <param name="text">The announcement text..</param>
        /// <param name="title">The announcement title..</param>
        public MessageModel(long? id = default(long?), IsReadEnum? isRead = default(IsReadEnum?), DateTime? startEffectDate = default(DateTime?), string text = default(string), string title = default(string))
        {
            this.Id = id;
            this.IsRead = isRead;
            this.StartEffectDate = startEffectDate;
            this.Text = text;
            this.Title = title;
        }
        
        /// <summary>
        /// The message id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The message id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// The starting effective date.
        /// </summary>
        /// <value>The starting effective date.</value>
        [DataMember(Name="startEffectDate", EmitDefaultValue=false)]
        public DateTime? StartEffectDate { get; set; }

        /// <summary>
        /// The announcement text.
        /// </summary>
        /// <value>The announcement text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The announcement title.
        /// </summary>
        /// <value>The announcement title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRead: ").Append(IsRead).Append("\n");
            sb.Append("  StartEffectDate: ").Append(StartEffectDate).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MessageModel);
        }

        /// <summary>
        /// Returns true if MessageModel instances are equal
        /// </summary>
        /// <param name="input">Instance of MessageModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsRead == input.IsRead ||
                    (this.IsRead != null &&
                    this.IsRead.Equals(input.IsRead))
                ) && 
                (
                    this.StartEffectDate == input.StartEffectDate ||
                    (this.StartEffectDate != null &&
                    this.StartEffectDate.Equals(input.StartEffectDate))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsRead != null)
                    hashCode = hashCode * 59 + this.IsRead.GetHashCode();
                if (this.StartEffectDate != null)
                    hashCode = hashCode * 59 + this.StartEffectDate.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
