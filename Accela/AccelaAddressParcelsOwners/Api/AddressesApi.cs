/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAddressParcelsOwners.Client;
using AccelaAddressParcelsOwners.Model;

namespace AccelaAddressParcelsOwners.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAddressesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Addresses
        /// </summary>
        /// <remarks>
        /// Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelArray</returns>
        ResponseAddressModelArray V4GetAddresses (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Addresses
        /// </summary>
        /// <remarks>
        /// Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelArray</returns>
        ApiResponse<ResponseAddressModelArray> V4GetAddressesWithHttpInfo (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Address
        /// </summary>
        /// <remarks>
        /// Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelWithCustomForms</returns>
        ResponseAddressModelWithCustomForms V4GetAddressesId (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Address
        /// </summary>
        /// <remarks>
        /// Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelWithCustomForms</returns>
        ApiResponse<ResponseAddressModelWithCustomForms> V4GetAddressesIdWithHttpInfo (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Address Conditions
        /// </summary>
        /// <remarks>
        /// Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        ResponseConditionModelArray V4GetAddressesIdConditions (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Address Conditions
        /// </summary>
        /// <remarks>
        /// Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        ApiResponse<ResponseConditionModelArray> V4GetAddressesIdConditionsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Address Parcels
        /// </summary>
        /// <remarks>
        /// Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseParcelModel</returns>
        ResponseParcelModel V4GetAddressesIdParcels (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Address Parcels
        /// </summary>
        /// <remarks>
        /// Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseParcelModel</returns>
        ApiResponse<ResponseParcelModel> V4GetAddressesIdParcelsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Address Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModelArray</returns>
        ResponseSimpleRecordModelArray V4GetAddressesIdRecords (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Address Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModelArray</returns>
        ApiResponse<ResponseSimpleRecordModelArray> V4GetAddressesIdRecordsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Update an Address
        /// </summary>
        /// <remarks>
        /// Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelWithCustomForms</returns>
        ResponseAddressModelWithCustomForms V4PutAddressesId (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null);

        /// <summary>
        /// Update an Address
        /// </summary>
        /// <remarks>
        /// Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelWithCustomForms</returns>
        ApiResponse<ResponseAddressModelWithCustomForms> V4PutAddressesIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Addresses
        /// </summary>
        /// <remarks>
        /// Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelArray</returns>
        System.Threading.Tasks.Task<ResponseAddressModelArray> V4GetAddressesAsync (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Addresses
        /// </summary>
        /// <remarks>
        /// Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelArray>> V4GetAddressesAsyncWithHttpInfo (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Address
        /// </summary>
        /// <remarks>
        /// Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelWithCustomForms</returns>
        System.Threading.Tasks.Task<ResponseAddressModelWithCustomForms> V4GetAddressesIdAsync (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Address
        /// </summary>
        /// <remarks>
        /// Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelWithCustomForms)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelWithCustomForms>> V4GetAddressesIdAsyncWithHttpInfo (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Address Conditions
        /// </summary>
        /// <remarks>
        /// Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetAddressesIdConditionsAsync (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Address Conditions
        /// </summary>
        /// <remarks>
        /// Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetAddressesIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Address Parcels
        /// </summary>
        /// <remarks>
        /// Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseParcelModel</returns>
        System.Threading.Tasks.Task<ResponseParcelModel> V4GetAddressesIdParcelsAsync (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Address Parcels
        /// </summary>
        /// <remarks>
        /// Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseParcelModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseParcelModel>> V4GetAddressesIdParcelsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Address Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModelArray</returns>
        System.Threading.Tasks.Task<ResponseSimpleRecordModelArray> V4GetAddressesIdRecordsAsync (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Address Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModelArray>> V4GetAddressesIdRecordsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Update an Address
        /// </summary>
        /// <remarks>
        /// Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelWithCustomForms</returns>
        System.Threading.Tasks.Task<ResponseAddressModelWithCustomForms> V4PutAddressesIdAsync (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null);

        /// <summary>
        /// Update an Address
        /// </summary>
        /// <remarks>
        /// Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelWithCustomForms)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelWithCustomForms>> V4PutAddressesIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AddressesApi : IAddressesApi
    {
        private AccelaAddressParcelsOwners.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AddressesApi(String basePath)
        {
            this.Configuration = new AccelaAddressParcelsOwners.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAddressParcelsOwners.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AddressesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AddressesApi(AccelaAddressParcelsOwners.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAddressParcelsOwners.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAddressParcelsOwners.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAddressParcelsOwners.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAddressParcelsOwners.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Addresses Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelArray</returns>
        public ResponseAddressModelArray V4GetAddresses (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAddressModelArray> localVarResponse = V4GetAddressesWithHttpInfo(contentType, xAccelaAppid, id, type, isPrimary, streetName, streetStart, streetEnd, direction, streetSuffixDirection, streetSuffix, city, country, state, expand, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Addresses Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelArray</returns>
        public ApiResponse< ResponseAddressModelArray > V4GetAddressesWithHttpInfo (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddresses");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddresses");

            var localVarPath = "/v4/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (isPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPrimary", isPrimary)); // query parameter
            if (streetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetName", streetName)); // query parameter
            if (streetStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetStart", streetStart)); // query parameter
            if (streetEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetEnd", streetEnd)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (streetSuffixDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetSuffixDirection", streetSuffixDirection)); // query parameter
            if (streetSuffix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetSuffix", streetSuffix)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelArray)));
        }

        /// <summary>
        /// Get All Addresses Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseAddressModelArray> V4GetAddressesAsync (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAddressModelArray> localVarResponse = await V4GetAddressesAsyncWithHttpInfo(contentType, xAccelaAppid, id, type, isPrimary, streetName, streetStart, streetEnd, direction, streetSuffixDirection, streetSuffix, city, country, state, expand, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Addresses Gets the reference addresses available in the system. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/addresses   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The unique address id assigned by the Civic Platform server. (optional)</param>
        /// <param name="type">The address type. (optional)</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time. (optional)</param>
        /// <param name="streetName">The street name for the address. (optional)</param>
        /// <param name="streetStart">The start of a range of street numbers. (optional)</param>
        /// <param name="streetEnd">RefAddress streetEnd (optional)</param>
        /// <param name="direction">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffixDirection">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="streetSuffix">The street direction of the primary address associated with the application. (optional)</param>
        /// <param name="city">The name of the city. (optional)</param>
        /// <param name="country">The name of the country. (optional)</param>
        /// <param name="state">The state corresponding to the address on record. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelArray>> V4GetAddressesAsyncWithHttpInfo (string contentType, string xAccelaAppid, long? id = null, string type = null, string isPrimary = null, string streetName = null, long? streetStart = null, long? streetEnd = null, string direction = null, string streetSuffixDirection = null, string streetSuffix = null, string city = null, string country = null, string state = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddresses");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddresses");

            var localVarPath = "/v4/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (isPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPrimary", isPrimary)); // query parameter
            if (streetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetName", streetName)); // query parameter
            if (streetStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetStart", streetStart)); // query parameter
            if (streetEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetEnd", streetEnd)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (streetSuffixDirection != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetSuffixDirection", streetSuffixDirection)); // query parameter
            if (streetSuffix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetSuffix", streetSuffix)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelArray)));
        }

        /// <summary>
        /// Get Address Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelWithCustomForms</returns>
        public ResponseAddressModelWithCustomForms V4GetAddressesId (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAddressModelWithCustomForms> localVarResponse = V4GetAddressesIdWithHttpInfo(contentType, xAccelaAppid, id, expand, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Address Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelWithCustomForms</returns>
        public ApiResponse< ResponseAddressModelWithCustomForms > V4GetAddressesIdWithHttpInfo (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesId");

            var localVarPath = "/v4/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelWithCustomForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelWithCustomForms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelWithCustomForms)));
        }

        /// <summary>
        /// Get Address Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelWithCustomForms</returns>
        public async System.Threading.Tasks.Task<ResponseAddressModelWithCustomForms> V4GetAddressesIdAsync (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAddressModelWithCustomForms> localVarResponse = await V4GetAddressesIdAsyncWithHttpInfo(contentType, xAccelaAppid, id, expand, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Address Gets detailed information for the specified address.    **API Endpoint**:  GET /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0  (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelWithCustomForms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelWithCustomForms>> V4GetAddressesIdAsyncWithHttpInfo (string contentType, string xAccelaAppid, long? id, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesId");

            var localVarPath = "/v4/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelWithCustomForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelWithCustomForms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelWithCustomForms)));
        }

        /// <summary>
        /// Get All Address Conditions Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        public ResponseConditionModelArray V4GetAddressesIdConditions (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = V4GetAddressesIdConditionsWithHttpInfo(contentType, authorization, xAccelaAppid, id, type, name, status, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Address Conditions Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        public ApiResponse< ResponseConditionModelArray > V4GetAddressesIdConditionsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4GetAddressesIdConditions");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesIdConditions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesIdConditions");

            var localVarPath = "/v4/addresses/{id}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

        /// <summary>
        /// Get All Address Conditions Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetAddressesIdConditionsAsync (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = await V4GetAddressesIdConditionsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, type, name, status, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Address Conditions Returns all the address conditions for a given address. The results can be filtered by type and status.    **API Endpoint**:  GET /v4/addresses/{id}/conditions    **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetAddressesIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4GetAddressesIdConditions");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesIdConditions");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesIdConditions");

            var localVarPath = "/v4/addresses/{id}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

        /// <summary>
        /// Get All Address Parcels Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseParcelModel</returns>
        public ResponseParcelModel V4GetAddressesIdParcels (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseParcelModel> localVarResponse = V4GetAddressesIdParcelsWithHttpInfo(contentType, authorization, xAccelaAppid, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Address Parcels Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseParcelModel</returns>
        public ApiResponse< ResponseParcelModel > V4GetAddressesIdParcelsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesIdParcels");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4GetAddressesIdParcels");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesIdParcels");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesIdParcels");

            var localVarPath = "/v4/addresses/{id}/parcels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesIdParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseParcelModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseParcelModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseParcelModel)));
        }

        /// <summary>
        /// Get All Address Parcels Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseParcelModel</returns>
        public async System.Threading.Tasks.Task<ResponseParcelModel> V4GetAddressesIdParcelsAsync (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseParcelModel> localVarResponse = await V4GetAddressesIdParcelsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Address Parcels Gets the parcels associated with the specified addresses.    **API Endpoint**:  GET /v4/addresses/{id}/parcels   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseParcelModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseParcelModel>> V4GetAddressesIdParcelsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesIdParcels");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4GetAddressesIdParcels");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesIdParcels");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesIdParcels");

            var localVarPath = "/v4/addresses/{id}/parcels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesIdParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseParcelModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseParcelModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseParcelModel)));
        }

        /// <summary>
        /// Get All Address Records Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModelArray</returns>
        public ResponseSimpleRecordModelArray V4GetAddressesIdRecords (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModelArray> localVarResponse = V4GetAddressesIdRecordsWithHttpInfo(contentType, authorization, xAccelaAppid, id, types, statuses, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Address Records Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModelArray</returns>
        public ApiResponse< ResponseSimpleRecordModelArray > V4GetAddressesIdRecordsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesIdRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4GetAddressesIdRecords");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesIdRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesIdRecords");

            var localVarPath = "/v4/addresses/{id}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesIdRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModelArray)));
        }

        /// <summary>
        /// Get All Address Records Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSimpleRecordModelArray> V4GetAddressesIdRecordsAsync (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModelArray> localVarResponse = await V4GetAddressesIdRecordsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, types, statuses, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Address Records Gets the records associated with the given reference address.    **API Endpoint**:  GET /v4/addresses/{id}/records   **Scope**:  addresses   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="types">Filter by one or more comma-delimited record types. Specify a record value using its hierarchical structure, for example: types&#x3D;AMS%2FElectric%2FPole%2FInstall,AMS%2FElectric%2FPole%2FMaintain   See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="statuses">Filter by one or more comma-delimited record statuses. For example: statuses&#x3D;Open,Ready%20to%20Issue   See [Get All Statuses for Record Type](./api-settings.html#operation/v4.get.settings.records.types.id.statuses). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModelArray>> V4GetAddressesIdRecordsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, string types = null, string statuses = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4GetAddressesIdRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4GetAddressesIdRecords");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4GetAddressesIdRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4GetAddressesIdRecords");

            var localVarPath = "/v4/addresses/{id}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (statuses != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statuses", statuses)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAddressesIdRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModelArray)));
        }

        /// <summary>
        /// Update an Address Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelWithCustomForms</returns>
        public ResponseAddressModelWithCustomForms V4PutAddressesId (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null)
        {
             ApiResponse<ResponseAddressModelWithCustomForms> localVarResponse = V4PutAddressesIdWithHttpInfo(contentType, authorization, xAccelaAppid, id, address, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Address Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelWithCustomForms</returns>
        public ApiResponse< ResponseAddressModelWithCustomForms > V4PutAddressesIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressesApi->V4PutAddressesId");

            var localVarPath = "/v4/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutAddressesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelWithCustomForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelWithCustomForms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelWithCustomForms)));
        }

        /// <summary>
        /// Update an Address Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelWithCustomForms</returns>
        public async System.Threading.Tasks.Task<ResponseAddressModelWithCustomForms> V4PutAddressesIdAsync (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null)
        {
             ApiResponse<ResponseAddressModelWithCustomForms> localVarResponse = await V4PutAddressesIdAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, address, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an Address Updates a reference address, including address custom fields.     **API Endpoint**:  PUT /v4/addresses/{id}   **Scope**:  addresses   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the address to fetch.</param>
        /// <param name="address">The reference address to be updated</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelWithCustomForms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelWithCustomForms>> V4PutAddressesIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, long? id, RequestAddressModelWithCustomForms address, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AddressesApi->V4PutAddressesId");
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AddressesApi->V4PutAddressesId");

            var localVarPath = "/v4/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter
            if (address != null && address.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(address); // http body (model) parameter
            }
            else
            {
                localVarPostBody = address; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutAddressesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelWithCustomForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelWithCustomForms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelWithCustomForms)));
        }

    }
}
