/* 
 * Assets and Assessments
 *
 * The Assets and Assessments APIs enable apps to manage assets and their related condition assessments.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAssetsAndAssessments.Client.SwaggerDateConverter;

namespace AccelaAssetsAndAssessments.Model
{
    /// <summary>
    /// AttributeMetadataModel
    /// </summary>
    [DataContract]
        public partial class AttributeMetadataModel :  IEquatable<AttributeMetadataModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the attribute is a dropdown list.
        /// </summary>
        /// <value>Indicates whether or not the attribute is a dropdown list.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum IsDropdownListEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 0,
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1        }
        /// <summary>
        /// Indicates whether or not the attribute is a dropdown list.
        /// </summary>
        /// <value>Indicates whether or not the attribute is a dropdown list.</value>
        [DataMember(Name="isDropdownList", EmitDefaultValue=false)]
        public IsDropdownListEnum? IsDropdownList { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttributeMetadataModel" /> class.
        /// </summary>
        /// <param name="attributeGroup">The group the attribute belongs to..</param>
        /// <param name="attributeLabel">The attribute&#x27;s display label..</param>
        /// <param name="attributeLength">The number of characters the attribute field allows..</param>
        /// <param name="attributeName">The unique name of the attribute. This name is for administrative use only; it is not used for display purposes..</param>
        /// <param name="defaultValue">The attribute&#x27;s default value..</param>
        /// <param name="description">The attribute&#x27;s description..</param>
        /// <param name="displayOrder">The attribute&#x27;s display position..</param>
        /// <param name="displayStatus">The attribute&#x27;s display status..</param>
        /// <param name="isDropdownList">Indicates whether or not the attribute is a dropdown list..</param>
        /// <param name="options">Contains the dropdown list values..</param>
        /// <param name="rangeSearchFlag">Indicates whether or not the attribute allows a search range..</param>
        /// <param name="recordStatus"> Indicates whether or not the attribute is active..</param>
        /// <param name="searchableFlag">Indicates whether or not the attribute is searchable..</param>
        /// <param name="unitType">The unit of measure used with the attribute..</param>
        /// <param name="updatedBy">The user who last updated the attribute..</param>
        /// <param name="updatedDate">The date and time the attribute was last updated..</param>
        /// <param name="valueDataType">The data type of the attribute value..</param>
        /// <param name="valueRequired">Indicates whether or not the attribute value is required..</param>
        public AttributeMetadataModel(string attributeGroup = default(string), string attributeLabel = default(string), string attributeLength = default(string), string attributeName = default(string), string defaultValue = default(string), string description = default(string), long? displayOrder = default(long?), string displayStatus = default(string), IsDropdownListEnum? isDropdownList = default(IsDropdownListEnum?), List<string> options = default(List<string>), string rangeSearchFlag = default(string), string recordStatus = default(string), string searchableFlag = default(string), string unitType = default(string), string updatedBy = default(string), DateTime? updatedDate = default(DateTime?), string valueDataType = default(string), string valueRequired = default(string))
        {
            this.AttributeGroup = attributeGroup;
            this.AttributeLabel = attributeLabel;
            this.AttributeLength = attributeLength;
            this.AttributeName = attributeName;
            this.DefaultValue = defaultValue;
            this.Description = description;
            this.DisplayOrder = displayOrder;
            this.DisplayStatus = displayStatus;
            this.IsDropdownList = isDropdownList;
            this.Options = options;
            this.RangeSearchFlag = rangeSearchFlag;
            this.RecordStatus = recordStatus;
            this.SearchableFlag = searchableFlag;
            this.UnitType = unitType;
            this.UpdatedBy = updatedBy;
            this.UpdatedDate = updatedDate;
            this.ValueDataType = valueDataType;
            this.ValueRequired = valueRequired;
        }
        
        /// <summary>
        /// The group the attribute belongs to.
        /// </summary>
        /// <value>The group the attribute belongs to.</value>
        [DataMember(Name="attributeGroup", EmitDefaultValue=false)]
        public string AttributeGroup { get; set; }

        /// <summary>
        /// The attribute&#x27;s display label.
        /// </summary>
        /// <value>The attribute&#x27;s display label.</value>
        [DataMember(Name="attributeLabel", EmitDefaultValue=false)]
        public string AttributeLabel { get; set; }

        /// <summary>
        /// The number of characters the attribute field allows.
        /// </summary>
        /// <value>The number of characters the attribute field allows.</value>
        [DataMember(Name="attributeLength", EmitDefaultValue=false)]
        public string AttributeLength { get; set; }

        /// <summary>
        /// The unique name of the attribute. This name is for administrative use only; it is not used for display purposes.
        /// </summary>
        /// <value>The unique name of the attribute. This name is for administrative use only; it is not used for display purposes.</value>
        [DataMember(Name="attributeName", EmitDefaultValue=false)]
        public string AttributeName { get; set; }

        /// <summary>
        /// The attribute&#x27;s default value.
        /// </summary>
        /// <value>The attribute&#x27;s default value.</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=false)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The attribute&#x27;s description.
        /// </summary>
        /// <value>The attribute&#x27;s description.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The attribute&#x27;s display position.
        /// </summary>
        /// <value>The attribute&#x27;s display position.</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        /// The attribute&#x27;s display status.
        /// </summary>
        /// <value>The attribute&#x27;s display status.</value>
        [DataMember(Name="displayStatus", EmitDefaultValue=false)]
        public string DisplayStatus { get; set; }


        /// <summary>
        /// Contains the dropdown list values.
        /// </summary>
        /// <value>Contains the dropdown list values.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<string> Options { get; set; }

        /// <summary>
        /// Indicates whether or not the attribute allows a search range.
        /// </summary>
        /// <value>Indicates whether or not the attribute allows a search range.</value>
        [DataMember(Name="rangeSearchFlag", EmitDefaultValue=false)]
        public string RangeSearchFlag { get; set; }

        /// <summary>
        ///  Indicates whether or not the attribute is active.
        /// </summary>
        /// <value> Indicates whether or not the attribute is active.</value>
        [DataMember(Name="recordStatus", EmitDefaultValue=false)]
        public string RecordStatus { get; set; }

        /// <summary>
        /// Indicates whether or not the attribute is searchable.
        /// </summary>
        /// <value>Indicates whether or not the attribute is searchable.</value>
        [DataMember(Name="searchableFlag", EmitDefaultValue=false)]
        public string SearchableFlag { get; set; }

        /// <summary>
        /// The unit of measure used with the attribute.
        /// </summary>
        /// <value>The unit of measure used with the attribute.</value>
        [DataMember(Name="unitType", EmitDefaultValue=false)]
        public string UnitType { get; set; }

        /// <summary>
        /// The user who last updated the attribute.
        /// </summary>
        /// <value>The user who last updated the attribute.</value>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The date and time the attribute was last updated.
        /// </summary>
        /// <value>The date and time the attribute was last updated.</value>
        [DataMember(Name="updatedDate", EmitDefaultValue=false)]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// The data type of the attribute value.
        /// </summary>
        /// <value>The data type of the attribute value.</value>
        [DataMember(Name="valueDataType", EmitDefaultValue=false)]
        public string ValueDataType { get; set; }

        /// <summary>
        /// Indicates whether or not the attribute value is required.
        /// </summary>
        /// <value>Indicates whether or not the attribute value is required.</value>
        [DataMember(Name="valueRequired", EmitDefaultValue=false)]
        public string ValueRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttributeMetadataModel {\n");
            sb.Append("  AttributeGroup: ").Append(AttributeGroup).Append("\n");
            sb.Append("  AttributeLabel: ").Append(AttributeLabel).Append("\n");
            sb.Append("  AttributeLength: ").Append(AttributeLength).Append("\n");
            sb.Append("  AttributeName: ").Append(AttributeName).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  DisplayStatus: ").Append(DisplayStatus).Append("\n");
            sb.Append("  IsDropdownList: ").Append(IsDropdownList).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  RangeSearchFlag: ").Append(RangeSearchFlag).Append("\n");
            sb.Append("  RecordStatus: ").Append(RecordStatus).Append("\n");
            sb.Append("  SearchableFlag: ").Append(SearchableFlag).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  ValueDataType: ").Append(ValueDataType).Append("\n");
            sb.Append("  ValueRequired: ").Append(ValueRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttributeMetadataModel);
        }

        /// <summary>
        /// Returns true if AttributeMetadataModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AttributeMetadataModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttributeMetadataModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttributeGroup == input.AttributeGroup ||
                    (this.AttributeGroup != null &&
                    this.AttributeGroup.Equals(input.AttributeGroup))
                ) && 
                (
                    this.AttributeLabel == input.AttributeLabel ||
                    (this.AttributeLabel != null &&
                    this.AttributeLabel.Equals(input.AttributeLabel))
                ) && 
                (
                    this.AttributeLength == input.AttributeLength ||
                    (this.AttributeLength != null &&
                    this.AttributeLength.Equals(input.AttributeLength))
                ) && 
                (
                    this.AttributeName == input.AttributeName ||
                    (this.AttributeName != null &&
                    this.AttributeName.Equals(input.AttributeName))
                ) && 
                (
                    this.DefaultValue == input.DefaultValue ||
                    (this.DefaultValue != null &&
                    this.DefaultValue.Equals(input.DefaultValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.DisplayStatus == input.DisplayStatus ||
                    (this.DisplayStatus != null &&
                    this.DisplayStatus.Equals(input.DisplayStatus))
                ) && 
                (
                    this.IsDropdownList == input.IsDropdownList ||
                    (this.IsDropdownList != null &&
                    this.IsDropdownList.Equals(input.IsDropdownList))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    input.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.RangeSearchFlag == input.RangeSearchFlag ||
                    (this.RangeSearchFlag != null &&
                    this.RangeSearchFlag.Equals(input.RangeSearchFlag))
                ) && 
                (
                    this.RecordStatus == input.RecordStatus ||
                    (this.RecordStatus != null &&
                    this.RecordStatus.Equals(input.RecordStatus))
                ) && 
                (
                    this.SearchableFlag == input.SearchableFlag ||
                    (this.SearchableFlag != null &&
                    this.SearchableFlag.Equals(input.SearchableFlag))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                ) && 
                (
                    this.ValueDataType == input.ValueDataType ||
                    (this.ValueDataType != null &&
                    this.ValueDataType.Equals(input.ValueDataType))
                ) && 
                (
                    this.ValueRequired == input.ValueRequired ||
                    (this.ValueRequired != null &&
                    this.ValueRequired.Equals(input.ValueRequired))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttributeGroup != null)
                    hashCode = hashCode * 59 + this.AttributeGroup.GetHashCode();
                if (this.AttributeLabel != null)
                    hashCode = hashCode * 59 + this.AttributeLabel.GetHashCode();
                if (this.AttributeLength != null)
                    hashCode = hashCode * 59 + this.AttributeLength.GetHashCode();
                if (this.AttributeName != null)
                    hashCode = hashCode * 59 + this.AttributeName.GetHashCode();
                if (this.DefaultValue != null)
                    hashCode = hashCode * 59 + this.DefaultValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.DisplayStatus != null)
                    hashCode = hashCode * 59 + this.DisplayStatus.GetHashCode();
                if (this.IsDropdownList != null)
                    hashCode = hashCode * 59 + this.IsDropdownList.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.RangeSearchFlag != null)
                    hashCode = hashCode * 59 + this.RangeSearchFlag.GetHashCode();
                if (this.RecordStatus != null)
                    hashCode = hashCode * 59 + this.RecordStatus.GetHashCode();
                if (this.SearchableFlag != null)
                    hashCode = hashCode * 59 + this.SearchableFlag.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                if (this.ValueDataType != null)
                    hashCode = hashCode * 59 + this.ValueDataType.GetHashCode();
                if (this.ValueRequired != null)
                    hashCode = hashCode * 59 + this.ValueRequired.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
