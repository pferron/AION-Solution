/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAddressParcelsOwners.Client.SwaggerDateConverter;

namespace AccelaAddressParcelsOwners.Model
{
    /// <summary>
    /// RecordExpirationModel
    /// </summary>
    [DataContract]
    public partial class RecordExpirationModel :  IEquatable<RecordExpirationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordExpirationModel" /> class.
        /// </summary>
        /// <param name="expirationDate">The date when the condition expires..</param>
        /// <param name="expirationStatus">expirationStatus.</param>
        public RecordExpirationModel(DateTime? expirationDate = default(DateTime?), RecordExpirationModelExpirationStatus expirationStatus = default(RecordExpirationModelExpirationStatus))
        {
            this.ExpirationDate = expirationDate;
            this.ExpirationStatus = expirationStatus;
        }
        
        /// <summary>
        /// The date when the condition expires.
        /// </summary>
        /// <value>The date when the condition expires.</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationStatus
        /// </summary>
        [DataMember(Name="expirationStatus", EmitDefaultValue=false)]
        public RecordExpirationModelExpirationStatus ExpirationStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordExpirationModel {\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  ExpirationStatus: ").Append(ExpirationStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordExpirationModel);
        }

        /// <summary>
        /// Returns true if RecordExpirationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordExpirationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordExpirationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.ExpirationStatus == input.ExpirationStatus ||
                    (this.ExpirationStatus != null &&
                    this.ExpirationStatus.Equals(input.ExpirationStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.ExpirationStatus != null)
                    hashCode = hashCode * 59 + this.ExpirationStatus.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
