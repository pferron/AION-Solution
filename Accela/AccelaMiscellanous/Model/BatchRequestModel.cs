/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaMiscellanous.Client.SwaggerDateConverter;

namespace AccelaMiscellanous.Model
{
    /// <summary>
    /// BatchRequestModel
    /// </summary>
    [DataContract]
    public partial class BatchRequestModel :  IEquatable<BatchRequestModel>, IValidatableObject
    {
        /// <summary>
        /// The HTTP method of the operation to be invoked.
        /// </summary>
        /// <value>The HTTP method of the operation to be invoked.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MethodEnum
        {
            
            /// <summary>
            /// Enum GET for value: GET
            /// </summary>
            [EnumMember(Value = "GET")]
            GET = 1,
            
            /// <summary>
            /// Enum PUT for value: PUT
            /// </summary>
            [EnumMember(Value = "PUT")]
            PUT = 2,
            
            /// <summary>
            /// Enum POST for value: POST
            /// </summary>
            [EnumMember(Value = "POST")]
            POST = 3,
            
            /// <summary>
            /// Enum DELETE for value: DELETE
            /// </summary>
            [EnumMember(Value = "DELETE")]
            DELETE = 4
        }

        /// <summary>
        /// The HTTP method of the operation to be invoked.
        /// </summary>
        /// <value>The HTTP method of the operation to be invoked.</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public MethodEnum Method { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchRequestModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BatchRequestModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BatchRequestModel" /> class.
        /// </summary>
        /// <param name="headers">headers.</param>
        /// <param name="method">The HTTP method of the operation to be invoked. (required).</param>
        /// <param name="body">(For PUT and POST methods) A JSON string containing the request parameters for the operation to be invoked..</param>
        /// <param name="relativeUrl">The relative URL of the operation to be invoked, for example &#39;/v4/records&#39;. Do not invoke the Batch Request API; i.e. do not specify &#39;/v4/batch&#39; as the relativeUrl. (required).</param>
        public BatchRequestModel(HeaderBatchRequest headers = default(HeaderBatchRequest), MethodEnum method = default(MethodEnum), string body = default(string), string relativeUrl = default(string))
        {
            // to ensure "method" is required (not null)
            this.Method = method;
            // to ensure "relativeUrl" is required (not null)
            if (relativeUrl == null)
            {
                throw new InvalidDataException("relativeUrl is a required property for BatchRequestModel and cannot be null");
            }
            else
            {
                this.RelativeUrl = relativeUrl;
            }
            this.Headers = headers;
            this.Body = body;
        }
        
        /// <summary>
        /// Gets or Sets Headers
        /// </summary>
        [DataMember(Name="headers", EmitDefaultValue=false)]
        public HeaderBatchRequest Headers { get; set; }


        /// <summary>
        /// (For PUT and POST methods) A JSON string containing the request parameters for the operation to be invoked.
        /// </summary>
        /// <value>(For PUT and POST methods) A JSON string containing the request parameters for the operation to be invoked.</value>
        [DataMember(Name="body", EmitDefaultValue=false)]
        public string Body { get; set; }

        /// <summary>
        /// The relative URL of the operation to be invoked, for example &#39;/v4/records&#39;. Do not invoke the Batch Request API; i.e. do not specify &#39;/v4/batch&#39; as the relativeUrl.
        /// </summary>
        /// <value>The relative URL of the operation to be invoked, for example &#39;/v4/records&#39;. Do not invoke the Batch Request API; i.e. do not specify &#39;/v4/batch&#39; as the relativeUrl.</value>
        [DataMember(Name="relativeUrl", EmitDefaultValue=false)]
        public string RelativeUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BatchRequestModel {\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Body: ").Append(Body).Append("\n");
            sb.Append("  RelativeUrl: ").Append(RelativeUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BatchRequestModel);
        }

        /// <summary>
        /// Returns true if BatchRequestModel instances are equal
        /// </summary>
        /// <param name="input">Instance of BatchRequestModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BatchRequestModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Headers == input.Headers ||
                    (this.Headers != null &&
                    this.Headers.Equals(input.Headers))
                ) && 
                //(
                //    this.Method == input.Method ||
                //    (this.Method != null &&
                //    this.Method.Equals(input.Method))
                //) && 
                (
                    this.Body == input.Body ||
                    (this.Body != null &&
                    this.Body.Equals(input.Body))
                ) && 
                (
                    this.RelativeUrl == input.RelativeUrl ||
                    (this.RelativeUrl != null &&
                    this.RelativeUrl.Equals(input.RelativeUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Headers != null)
                    hashCode = hashCode * 59 + this.Headers.GetHashCode();
                //if (this.Method != null)
                //    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Body != null)
                    hashCode = hashCode * 59 + this.Body.GetHashCode();
                if (this.RelativeUrl != null)
                    hashCode = hashCode * 59 + this.RelativeUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
