/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsChecklistsChecklistItemsCustomFormsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        ResponseCustomAttributeModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        ApiResponse<ResponseCustomAttributeModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Form Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null);

        /// <summary>
        /// Get Custom Form Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        ResponseCustomAttributeModelArray V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null);

        /// <summary>
        /// Update Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        ApiResponse<ResponseCustomAttributeModelArray> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Form Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null);

        /// <summary>
        /// Get Custom Form Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null);

        /// <summary>
        /// Update Custom Forms for Checklist Item
        /// </summary>
        /// <remarks>
        /// Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsChecklistsChecklistItemsCustomFormsApi : IInspectionsChecklistsChecklistItemsCustomFormsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsChecklistItemsCustomFormsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsChecklistsChecklistItemsCustomFormsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsChecklistsChecklistItemsCustomFormsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsChecklistsChecklistItemsCustomFormsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Custom Forms for Checklist Item Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        public ResponseCustomAttributeModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms for Checklist Item Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        public ApiResponse< ResponseCustomAttributeModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms for Checklist Item Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms for Checklist Item Returns an array of custom forms associated with the specified record contact. Each custom form consists of custom field name-and-value pairs. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get Custom Form Metadata for Checklist Item Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, formId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Form Metadata for Checklist Item Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.Configuration.ApiClient.ParameterToString(formId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get Custom Form Metadata for Checklist Item Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, formId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Form Metadata for Checklist Item Gets the custom form metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string formId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/{formId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.Configuration.ApiClient.ParameterToString(formId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsFormIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the custom forms metadata for the specified inspection checklist item. **API Endpoint**:  GET /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Update Custom Forms for Checklist Item Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        public ResponseCustomAttributeModelArray V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Forms for Checklist Item Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        public ApiResponse< ResponseCustomAttributeModelArray > V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Update Custom Forms for Checklist Item Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsync (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = await V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo(contentType, authorization, id, checklistId, checklistItemId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Custom Forms for Checklist Item Updates custom forms for the requested checklist item. **API Endpoint**:  PUT /v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="checklistId">The ID of the inspection checklist to fetch. See [Get All Inspection Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists), [Get All Checklists for Inspection](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists).</param>
        /// <param name="checklistItemId">The ID of the inspection checklist item to fetch. See [Get All Checklist Items for Checklist](./api-inspections.html#operation/v4.get.inspections.inspectionId.checklists.checklistId.checklistItems).</param>
        /// <param name="body">Custom forms to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, long? id, long? checklistId, long? checklistItemId, List<CustomAttributeModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsChecklistsChecklistItemsCustomFormsApi->V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");

            var localVarPath = "/v4/inspections/{id}/checklists/{checklistId}/checklistItems/{checklistItemId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsIdChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

    }
}
