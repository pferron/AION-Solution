/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// LicenseProfessionalModel
    /// </summary>
    [DataContract]
    public partial class LicenseProfessionalModel :  IEquatable<LicenseProfessionalModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseProfessionalModel" /> class.
        /// </summary>
        /// <param name="addressLine1">The first line of the address..</param>
        /// <param name="addressLine2">The second line of the address..</param>
        /// <param name="addressLine3">The third line of the address..</param>
        /// <param name="birthDate">The birth date of an individual..</param>
        /// <param name="businessLicense">The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types..</param>
        /// <param name="businessName">A business name for the applicable individual..</param>
        /// <param name="businessName2">A secondary business name for the applicable individual..</param>
        /// <param name="city">The name of the city..</param>
        /// <param name="comment">Comments or notes about the current context..</param>
        /// <param name="country">country.</param>
        /// <param name="email">The contact&#39;s email address..</param>
        /// <param name="expirationDate">The license expiration date..</param>
        /// <param name="fax">The fax number for the contact..</param>
        /// <param name="federalEmployerId">The Federal Employer Identification Number. It is used to identify a business for tax purposes..</param>
        /// <param name="firstName">The licensed professional&#39;s first name. .</param>
        /// <param name="fullName">The licensed professional&#39;s full name. .</param>
        /// <param name="gender">gender.</param>
        /// <param name="id">The licensed professional system id assigned by the Civic Platform server..</param>
        /// <param name="isPrimary">Indicates whether or not to designate the professional as the primary professional..</param>
        /// <param name="lastName">The licensed professional&#39;s last name. .</param>
        /// <param name="lastRenewalDate">The last date for a professionals renewal license..</param>
        /// <param name="licenseNumber">The licensed professional&#39;s license number..</param>
        /// <param name="licenseType">licenseType.</param>
        /// <param name="licensingBoard">licensingBoard.</param>
        /// <param name="middleName">The licensed professional&#39;s middle name. .</param>
        /// <param name="originalIssueDate">The original issuance date of license..</param>
        /// <param name="phone1">The primary phone number of the contact..</param>
        /// <param name="phone2">The secondary phone number of the contact..</param>
        /// <param name="phone3">The tertiary phone number for the contact. .</param>
        /// <param name="postOfficeBox">The post office box number..</param>
        /// <param name="postalCode">The postal ZIP code for the address..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="referenceLicenseId">The unique Id generated for a professional stored in the system..</param>
        /// <param name="salutation">salutation.</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="state">state.</param>
        /// <param name="suffix">The licensed professional&#39;s name suffix..</param>
        /// <param name="title">The individual&#39;s professional title..</param>
        public LicenseProfessionalModel(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), DateTime? birthDate = default(DateTime?), string businessLicense = default(string), string businessName = default(string), string businessName2 = default(string), string city = default(string), string comment = default(string), CompactAddressModelCountry country = default(CompactAddressModelCountry), string email = default(string), DateTime? expirationDate = default(DateTime?), string fax = default(string), string federalEmployerId = default(string), string firstName = default(string), string fullName = default(string), RecordContactSimpleModelGender gender = default(RecordContactSimpleModelGender), string id = default(string), string isPrimary = default(string), string lastName = default(string), DateTime? lastRenewalDate = default(DateTime?), string licenseNumber = default(string), LicenseProfessionalModelLicenseType licenseType = default(LicenseProfessionalModelLicenseType), LicenseProfessionalModelLicensingBoard licensingBoard = default(LicenseProfessionalModelLicensingBoard), string middleName = default(string), DateTime? originalIssueDate = default(DateTime?), string phone1 = default(string), string phone2 = default(string), string phone3 = default(string), string postOfficeBox = default(string), string postalCode = default(string), RecordIdModel recordId = default(RecordIdModel), string referenceLicenseId = default(string), LicenseProfessionalModelSalutation salutation = default(LicenseProfessionalModelSalutation), string serviceProviderCode = default(string), LicenseProfessionalModelState state = default(LicenseProfessionalModelState), string suffix = default(string), string title = default(string))
        {
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.BirthDate = birthDate;
            this.BusinessLicense = businessLicense;
            this.BusinessName = businessName;
            this.BusinessName2 = businessName2;
            this.City = city;
            this.Comment = comment;
            this.Country = country;
            this.Email = email;
            this.ExpirationDate = expirationDate;
            this.Fax = fax;
            this.FederalEmployerId = federalEmployerId;
            this.FirstName = firstName;
            this.FullName = fullName;
            this.Gender = gender;
            this.Id = id;
            this.IsPrimary = isPrimary;
            this.LastName = lastName;
            this.LastRenewalDate = lastRenewalDate;
            this.LicenseNumber = licenseNumber;
            this.LicenseType = licenseType;
            this.LicensingBoard = licensingBoard;
            this.MiddleName = middleName;
            this.OriginalIssueDate = originalIssueDate;
            this.Phone1 = phone1;
            this.Phone2 = phone2;
            this.Phone3 = phone3;
            this.PostOfficeBox = postOfficeBox;
            this.PostalCode = postalCode;
            this.RecordId = recordId;
            this.ReferenceLicenseId = referenceLicenseId;
            this.Salutation = salutation;
            this.ServiceProviderCode = serviceProviderCode;
            this.State = state;
            this.Suffix = suffix;
            this.Title = title;
        }
        
        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        /// <value>The second line of the address.</value>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        /// <value>The third line of the address.</value>
        [DataMember(Name="addressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The birth date of an individual.
        /// </summary>
        /// <value>The birth date of an individual.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types.
        /// </summary>
        /// <value>The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types.</value>
        [DataMember(Name="businessLicense", EmitDefaultValue=false)]
        public string BusinessLicense { get; set; }

        /// <summary>
        /// A business name for the applicable individual.
        /// </summary>
        /// <value>A business name for the applicable individual.</value>
        [DataMember(Name="businessName", EmitDefaultValue=false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// A secondary business name for the applicable individual.
        /// </summary>
        /// <value>A secondary business name for the applicable individual.</value>
        [DataMember(Name="businessName2", EmitDefaultValue=false)]
        public string BusinessName2 { get; set; }

        /// <summary>
        /// The name of the city.
        /// </summary>
        /// <value>The name of the city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Comments or notes about the current context.
        /// </summary>
        /// <value>Comments or notes about the current context.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public CompactAddressModelCountry Country { get; set; }

        /// <summary>
        /// The contact&#39;s email address.
        /// </summary>
        /// <value>The contact&#39;s email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The license expiration date.
        /// </summary>
        /// <value>The license expiration date.</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The fax number for the contact.
        /// </summary>
        /// <value>The fax number for the contact.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// The Federal Employer Identification Number. It is used to identify a business for tax purposes.
        /// </summary>
        /// <value>The Federal Employer Identification Number. It is used to identify a business for tax purposes.</value>
        [DataMember(Name="federalEmployerId", EmitDefaultValue=false)]
        public string FederalEmployerId { get; set; }

        /// <summary>
        /// The licensed professional&#39;s first name. 
        /// </summary>
        /// <value>The licensed professional&#39;s first name. </value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The licensed professional&#39;s full name. 
        /// </summary>
        /// <value>The licensed professional&#39;s full name. </value>
        [DataMember(Name="fullName", EmitDefaultValue=false)]
        public string FullName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public RecordContactSimpleModelGender Gender { get; set; }

        /// <summary>
        /// The licensed professional system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The licensed professional system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates whether or not to designate the professional as the primary professional.
        /// </summary>
        /// <value>Indicates whether or not to designate the professional as the primary professional.</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public string IsPrimary { get; set; }

        /// <summary>
        /// The licensed professional&#39;s last name. 
        /// </summary>
        /// <value>The licensed professional&#39;s last name. </value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The last date for a professionals renewal license.
        /// </summary>
        /// <value>The last date for a professionals renewal license.</value>
        [DataMember(Name="lastRenewalDate", EmitDefaultValue=false)]
        public DateTime? LastRenewalDate { get; set; }

        /// <summary>
        /// The licensed professional&#39;s license number.
        /// </summary>
        /// <value>The licensed professional&#39;s license number.</value>
        [DataMember(Name="licenseNumber", EmitDefaultValue=false)]
        public string LicenseNumber { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public LicenseProfessionalModelLicenseType LicenseType { get; set; }

        /// <summary>
        /// Gets or Sets LicensingBoard
        /// </summary>
        [DataMember(Name="licensingBoard", EmitDefaultValue=false)]
        public LicenseProfessionalModelLicensingBoard LicensingBoard { get; set; }

        /// <summary>
        /// The licensed professional&#39;s middle name. 
        /// </summary>
        /// <value>The licensed professional&#39;s middle name. </value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The original issuance date of license.
        /// </summary>
        /// <value>The original issuance date of license.</value>
        [DataMember(Name="originalIssueDate", EmitDefaultValue=false)]
        public DateTime? OriginalIssueDate { get; set; }

        /// <summary>
        /// The primary phone number of the contact.
        /// </summary>
        /// <value>The primary phone number of the contact.</value>
        [DataMember(Name="phone1", EmitDefaultValue=false)]
        public string Phone1 { get; set; }

        /// <summary>
        /// The secondary phone number of the contact.
        /// </summary>
        /// <value>The secondary phone number of the contact.</value>
        [DataMember(Name="phone2", EmitDefaultValue=false)]
        public string Phone2 { get; set; }

        /// <summary>
        /// The tertiary phone number for the contact. 
        /// </summary>
        /// <value>The tertiary phone number for the contact. </value>
        [DataMember(Name="phone3", EmitDefaultValue=false)]
        public string Phone3 { get; set; }

        /// <summary>
        /// The post office box number.
        /// </summary>
        /// <value>The post office box number.</value>
        [DataMember(Name="postOfficeBox", EmitDefaultValue=false)]
        public string PostOfficeBox { get; set; }

        /// <summary>
        /// The postal ZIP code for the address.
        /// </summary>
        /// <value>The postal ZIP code for the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The unique Id generated for a professional stored in the system.
        /// </summary>
        /// <value>The unique Id generated for a professional stored in the system.</value>
        [DataMember(Name="referenceLicenseId", EmitDefaultValue=false)]
        public string ReferenceLicenseId { get; set; }

        /// <summary>
        /// Gets or Sets Salutation
        /// </summary>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public LicenseProfessionalModelSalutation Salutation { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public LicenseProfessionalModelState State { get; set; }

        /// <summary>
        /// The licensed professional&#39;s name suffix.
        /// </summary>
        /// <value>The licensed professional&#39;s name suffix.</value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// The individual&#39;s professional title.
        /// </summary>
        /// <value>The individual&#39;s professional title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseProfessionalModel {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BusinessLicense: ").Append(BusinessLicense).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  BusinessName2: ").Append(BusinessName2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FederalEmployerId: ").Append(FederalEmployerId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LastRenewalDate: ").Append(LastRenewalDate).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicensingBoard: ").Append(LicensingBoard).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  OriginalIssueDate: ").Append(OriginalIssueDate).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Phone3: ").Append(Phone3).Append("\n");
            sb.Append("  PostOfficeBox: ").Append(PostOfficeBox).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ReferenceLicenseId: ").Append(ReferenceLicenseId).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseProfessionalModel);
        }

        /// <summary>
        /// Returns true if LicenseProfessionalModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseProfessionalModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseProfessionalModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.BusinessLicense == input.BusinessLicense ||
                    (this.BusinessLicense != null &&
                    this.BusinessLicense.Equals(input.BusinessLicense))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.BusinessName2 == input.BusinessName2 ||
                    (this.BusinessName2 != null &&
                    this.BusinessName2.Equals(input.BusinessName2))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FederalEmployerId == input.FederalEmployerId ||
                    (this.FederalEmployerId != null &&
                    this.FederalEmployerId.Equals(input.FederalEmployerId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LastRenewalDate == input.LastRenewalDate ||
                    (this.LastRenewalDate != null &&
                    this.LastRenewalDate.Equals(input.LastRenewalDate))
                ) && 
                (
                    this.LicenseNumber == input.LicenseNumber ||
                    (this.LicenseNumber != null &&
                    this.LicenseNumber.Equals(input.LicenseNumber))
                ) && 
                (
                    this.LicenseType == input.LicenseType ||
                    (this.LicenseType != null &&
                    this.LicenseType.Equals(input.LicenseType))
                ) && 
                (
                    this.LicensingBoard == input.LicensingBoard ||
                    (this.LicensingBoard != null &&
                    this.LicensingBoard.Equals(input.LicensingBoard))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.OriginalIssueDate == input.OriginalIssueDate ||
                    (this.OriginalIssueDate != null &&
                    this.OriginalIssueDate.Equals(input.OriginalIssueDate))
                ) && 
                (
                    this.Phone1 == input.Phone1 ||
                    (this.Phone1 != null &&
                    this.Phone1.Equals(input.Phone1))
                ) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && 
                (
                    this.Phone3 == input.Phone3 ||
                    (this.Phone3 != null &&
                    this.Phone3.Equals(input.Phone3))
                ) && 
                (
                    this.PostOfficeBox == input.PostOfficeBox ||
                    (this.PostOfficeBox != null &&
                    this.PostOfficeBox.Equals(input.PostOfficeBox))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ReferenceLicenseId == input.ReferenceLicenseId ||
                    (this.ReferenceLicenseId != null &&
                    this.ReferenceLicenseId.Equals(input.ReferenceLicenseId))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.BusinessLicense != null)
                    hashCode = hashCode * 59 + this.BusinessLicense.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.BusinessName2 != null)
                    hashCode = hashCode * 59 + this.BusinessName2.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FederalEmployerId != null)
                    hashCode = hashCode * 59 + this.FederalEmployerId.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.FullName != null)
                    hashCode = hashCode * 59 + this.FullName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LastRenewalDate != null)
                    hashCode = hashCode * 59 + this.LastRenewalDate.GetHashCode();
                if (this.LicenseNumber != null)
                    hashCode = hashCode * 59 + this.LicenseNumber.GetHashCode();
                if (this.LicenseType != null)
                    hashCode = hashCode * 59 + this.LicenseType.GetHashCode();
                if (this.LicensingBoard != null)
                    hashCode = hashCode * 59 + this.LicensingBoard.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.OriginalIssueDate != null)
                    hashCode = hashCode * 59 + this.OriginalIssueDate.GetHashCode();
                if (this.Phone1 != null)
                    hashCode = hashCode * 59 + this.Phone1.GetHashCode();
                if (this.Phone2 != null)
                    hashCode = hashCode * 59 + this.Phone2.GetHashCode();
                if (this.Phone3 != null)
                    hashCode = hashCode * 59 + this.Phone3.GetHashCode();
                if (this.PostOfficeBox != null)
                    hashCode = hashCode * 59 + this.PostOfficeBox.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ReferenceLicenseId != null)
                    hashCode = hashCode * 59 + this.ReferenceLicenseId.GetHashCode();
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
