/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;
using Newtonsoft.Json;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Records
        /// </summary>
        /// <remarks>
        /// Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteRecordsIds (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete Records
        /// </summary>
        /// <remarks>
        /// Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteRecordsIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Delete Related Details from Record
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteRecordsRecordIdRelatedChildRecordIds (string contentType, string authorization, string recordId, string childRecordIds, string lang = null);

        /// <summary>
        /// Delete Related Details from Record
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteRecordsRecordIdRelatedChildRecordIdsWithHttpInfo (string contentType, string authorization, string recordId, string childRecordIds, string lang = null);
        /// <summary>
        /// Get All Records
        /// </summary>
        /// <remarks>
        /// Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModelArray</returns>
        ResponseSimpleRecordModelArray V4GetRecords (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Records
        /// </summary>
        /// <remarks>
        /// Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModelArray</returns>
        ApiResponse<ResponseSimpleRecordModelArray> V4GetRecordsWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Describe Required Record Attributes
        /// </summary>
        /// <remarks>
        /// Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDescribeRecordModel</returns>
        ResponseDescribeRecordModel V4GetRecordsDescribeCreate (string contentType, string authorization, string type, string lang = null);

        /// <summary>
        /// Describe Required Record Attributes
        /// </summary>
        /// <remarks>
        /// Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDescribeRecordModel</returns>
        ApiResponse<ResponseDescribeRecordModel> V4GetRecordsDescribeCreateWithHttpInfo (string contentType, string authorization, string type, string lang = null);
        /// <summary>
        /// Get Records
        /// </summary>
        /// <remarks>
        /// Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordModelArray</returns>
        ResponseRecordModelArray V4GetRecordsIds (string contentType, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Records
        /// </summary>
        /// <remarks>
        /// Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordModelArray</returns>
        ApiResponse<ResponseRecordModelArray> V4GetRecordsIdsWithHttpInfo (string contentType, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null);
        /// <summary>
        /// Get My Records
        /// </summary>
        /// <remarks>
        /// Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordExtModel1Array</returns>
        ResponseRecordExtModel1Array V4GetRecordsMine (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get My Records
        /// </summary>
        /// <remarks>
        /// Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordExtModel1Array</returns>
        ApiResponse<ResponseRecordExtModel1Array> V4GetRecordsMineWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordAdditionalModelArray</returns>
        ResponseRecordAdditionalModelArray V4GetRecordsRecordIdAdditional (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordAdditionalModelArray</returns>
        ApiResponse<ResponseRecordAdditionalModelArray> V4GetRecordsRecordIdAdditionalWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Related Details for Record
        /// </summary>
        /// <remarks>
        /// Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordRelatedModelArray</returns>
        ResponseRecordRelatedModelArray V4GetRecordsRecordIdRelated (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Related Details for Record
        /// </summary>
        /// <remarks>
        /// Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordRelatedModelArray</returns>
        ApiResponse<ResponseRecordRelatedModelArray> V4GetRecordsRecordIdRelatedWithHttpInfo (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Record
        /// </summary>
        /// <remarks>
        /// Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModel</returns>
        ResponseSimpleRecordModel V4PostRecords (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null);

        /// <summary>
        /// Create Record
        /// </summary>
        /// <remarks>
        /// Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModel</returns>
        ApiResponse<ResponseSimpleRecordModel> V4PostRecordsWithHttpInfo (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Partial Record
        /// </summary>
        /// <remarks>
        /// Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModel</returns>
        ResponseSimpleRecordModel V4PostRecordsInitialize (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null);

        /// <summary>
        /// Create Partial Record
        /// </summary>
        /// <remarks>
        /// Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModel</returns>
        ApiResponse<ResponseSimpleRecordModel> V4PostRecordsInitializeWithHttpInfo (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null);
        /// <summary>
        /// Finalize Record
        /// </summary>
        /// <remarks>
        /// Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModel</returns>
        ResponseSimpleRecordModel V4PostRecordsRecordIdFinalize (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null);

        /// <summary>
        /// Finalize Record
        /// </summary>
        /// <remarks>
        /// Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModel</returns>
        ApiResponse<ResponseSimpleRecordModel> V4PostRecordsRecordIdFinalizeWithHttpInfo (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null);
        /// <summary>
        /// Create Related Details for Record
        /// </summary>
        /// <remarks>
        /// Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostRecordsRecordIdRelated (string contentType, string authorization, string recordId, List<string> body, string lang = null);

        /// <summary>
        /// Create Related Details for Record
        /// </summary>
        /// <remarks>
        /// Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostRecordsRecordIdRelatedWithHttpInfo (string contentType, string authorization, string recordId, List<string> body, string lang = null);
        /// <summary>
        /// Update Record
        /// </summary>
        /// <remarks>
        /// Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>SimpleRecordModel</returns>
        SimpleRecordModel V4PutRecordsId (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null);

        /// <summary>
        /// Update Record
        /// </summary>
        /// <remarks>
        /// Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of SimpleRecordModel</returns>
        ApiResponse<SimpleRecordModel> V4PutRecordsIdWithHttpInfo (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null);
        /// <summary>
        /// Update Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordAdditionalModelArray</returns>
        ResponseRecordAdditionalModelArray V4PutRecordsRecordIdAdditional (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null);

        /// <summary>
        /// Update Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordAdditionalModelArray</returns>
        ApiResponse<ResponseRecordAdditionalModelArray> V4PutRecordsRecordIdAdditionalWithHttpInfo (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Records
        /// </summary>
        /// <remarks>
        /// Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsIdsAsync (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete Records
        /// </summary>
        /// <remarks>
        /// Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Delete Related Details from Record
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdRelatedChildRecordIdsAsync (string contentType, string authorization, string recordId, string childRecordIds, string lang = null);

        /// <summary>
        /// Delete Related Details from Record
        /// </summary>
        /// <remarks>
        /// Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdRelatedChildRecordIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string childRecordIds, string lang = null);
        /// <summary>
        /// Get All Records
        /// </summary>
        /// <remarks>
        /// Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModelArray</returns>
        System.Threading.Tasks.Task<ResponseSimpleRecordModelArray> V4GetRecordsAsync (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Records
        /// </summary>
        /// <remarks>
        /// Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModelArray>> V4GetRecordsAsyncWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Describe Required Record Attributes
        /// </summary>
        /// <remarks>
        /// Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDescribeRecordModel</returns>
        System.Threading.Tasks.Task<ResponseDescribeRecordModel> V4GetRecordsDescribeCreateAsync (string contentType, string authorization, string type, string lang = null);

        /// <summary>
        /// Describe Required Record Attributes
        /// </summary>
        /// <remarks>
        /// Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDescribeRecordModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDescribeRecordModel>> V4GetRecordsDescribeCreateAsyncWithHttpInfo (string contentType, string authorization, string type, string lang = null);
        /// <summary>
        /// Get Records
        /// </summary>
        /// <remarks>
        /// Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordModelArray> V4GetRecordsIdsAsync (string contentType, string authorization,  string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null);
        //----------------------------------------------------------------------------------------------------
        /// <summary>
        /// Get Records
        /// </summary>
        /// <remarks>
        /// Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordModelArray</returns>
        System.Threading.Tasks.Task<string> V4GetRecordsIdsStringAsync(string contentType, string authorization, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null);

        //-------------------------------------------------------------------------------
        /// <summary>
        /// Get Records
        /// </summary>
        /// <remarks>
        /// Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordModelArray>> V4GetRecordsIdsAsyncWithHttpInfo (string contentType,string authorization, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null);
        /// <summary>
        /// Get My Records
        /// </summary>
        /// <remarks>
        /// Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordExtModel1Array</returns>
        System.Threading.Tasks.Task<ResponseRecordExtModel1Array> V4GetRecordsMineAsync (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get My Records
        /// </summary>
        /// <remarks>
        /// Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordExtModel1Array)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordExtModel1Array>> V4GetRecordsMineAsyncWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordAdditionalModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordAdditionalModelArray> V4GetRecordsRecordIdAdditionalAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordAdditionalModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordAdditionalModelArray>> V4GetRecordsRecordIdAdditionalAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Related Details for Record
        /// </summary>
        /// <remarks>
        /// Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordRelatedModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordRelatedModelArray> V4GetRecordsRecordIdRelatedAsync (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Related Details for Record
        /// </summary>
        /// <remarks>
        /// Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordRelatedModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordRelatedModelArray>> V4GetRecordsRecordIdRelatedAsyncWithHttpInfo (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Record
        /// </summary>
        /// <remarks>
        /// Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModel</returns>
        System.Threading.Tasks.Task<ResponseSimpleRecordModel> V4PostRecordsAsync (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null);

        /// <summary>
        /// Create Record
        /// </summary>
        /// <remarks>
        /// Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModel>> V4PostRecordsAsyncWithHttpInfo (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Partial Record
        /// </summary>
        /// <remarks>
        /// Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModel</returns>
        System.Threading.Tasks.Task<ResponseSimpleRecordModel> V4PostRecordsInitializeAsync (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null);

        /// <summary>
        /// Create Partial Record
        /// </summary>
        /// <remarks>
        /// Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModel>> V4PostRecordsInitializeAsyncWithHttpInfo (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null);
        /// <summary>
        /// Finalize Record
        /// </summary>
        /// <remarks>
        /// Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModel</returns>
        System.Threading.Tasks.Task<ResponseSimpleRecordModel> V4PostRecordsRecordIdFinalizeAsync (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null);

        /// <summary>
        /// Finalize Record
        /// </summary>
        /// <remarks>
        /// Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModel>> V4PostRecordsRecordIdFinalizeAsyncWithHttpInfo (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null);
        /// <summary>
        /// Create Related Details for Record
        /// </summary>
        /// <remarks>
        /// Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdRelatedAsync (string contentType, string authorization, string recordId, List<string> body, string lang = null);

        /// <summary>
        /// Create Related Details for Record
        /// </summary>
        /// <remarks>
        /// Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdRelatedAsyncWithHttpInfo (string contentType, string authorization, string recordId, List<string> body, string lang = null);
        /// <summary>
        /// Update Record
        /// </summary>
        /// <remarks>
        /// Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of SimpleRecordModel</returns>
        System.Threading.Tasks.Task<SimpleRecordModel> V4PutRecordsIdAsync (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null);

        /// <summary>
        /// Update Record
        /// </summary>
        /// <remarks>
        /// Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (SimpleRecordModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleRecordModel>> V4PutRecordsIdAsyncWithHttpInfo (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null);
        /// <summary>
        /// Update Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordAdditionalModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordAdditionalModelArray> V4PutRecordsRecordIdAdditionalAsync (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null);

        /// <summary>
        /// Update Additional Details for Record
        /// </summary>
        /// <remarks>
        /// Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordAdditionalModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordAdditionalModelArray>> V4PutRecordsRecordIdAdditionalAsyncWithHttpInfo (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsApi : IRecordsApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Records Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteRecordsIds (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteRecordsIdsWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Records Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteRecordsIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4DeleteRecordsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4DeleteRecordsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsApi->V4DeleteRecordsIds");

            var localVarPath = "/v4/records/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Records Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsIdsAsync (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteRecordsIdsAsyncWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Records Deletes the specified record. **API Endpoint**:  DELETE /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the records to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4DeleteRecordsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4DeleteRecordsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsApi->V4DeleteRecordsIds");

            var localVarPath = "/v4/records/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Related Details from Record Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteRecordsRecordIdRelatedChildRecordIds (string contentType, string authorization, string recordId, string childRecordIds, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteRecordsRecordIdRelatedChildRecordIdsWithHttpInfo(contentType, authorization, recordId, childRecordIds, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Related Details from Record Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteRecordsRecordIdRelatedChildRecordIdsWithHttpInfo (string contentType, string authorization, string recordId, string childRecordIds, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");
            // verify the required parameter 'childRecordIds' is set
            if (childRecordIds == null)
                throw new ApiException(400, "Missing required parameter 'childRecordIds' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");

            var localVarPath = "/v4/records/{recordId}/related/{childRecordIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (childRecordIds != null) localVarPathParams.Add("childRecordIds", this.Configuration.ApiClient.ParameterToString(childRecordIds)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdRelatedChildRecordIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Related Details from Record Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdRelatedChildRecordIdsAsync (string contentType, string authorization, string recordId, string childRecordIds, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteRecordsRecordIdRelatedChildRecordIdsAsyncWithHttpInfo(contentType, authorization, recordId, childRecordIds, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Related Details from Record Removes the relationship between the specifed child record(s) and their specified parent record. **API Endpoint**:  DELETE /v4/records/{recordId}/related/{childRecordIds}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="childRecordIds">Comma-delimited IDs of the related records to be removed.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdRelatedChildRecordIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string childRecordIds, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");
            // verify the required parameter 'childRecordIds' is set
            if (childRecordIds == null)
                throw new ApiException(400, "Missing required parameter 'childRecordIds' when calling RecordsApi->V4DeleteRecordsRecordIdRelatedChildRecordIds");

            var localVarPath = "/v4/records/{recordId}/related/{childRecordIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (childRecordIds != null) localVarPathParams.Add("childRecordIds", this.Configuration.ApiClient.ParameterToString(childRecordIds)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdRelatedChildRecordIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Records Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModelArray</returns>
        public ResponseSimpleRecordModelArray V4GetRecords (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModelArray> localVarResponse = V4GetRecordsWithHttpInfo(contentType, authorization, type, openedDateFrom, openedDateTo, customId, module, status, assignedToDepartment, assignedUser, assignedDateFrom, assignedDateTo, completedDateFrom, completedDateTo, statusDateFrom, statusDateTo, completedByDepartment, completedByUser, closedDateFrom, closedDateTo, closedByDepartment, closedByUser, recordClass, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Records Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModelArray</returns>
        public ApiResponse< ResponseSimpleRecordModelArray > V4GetRecordsWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecords");

            var localVarPath = "/v4/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (openedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateFrom", openedDateFrom)); // query parameter
            if (openedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateTo", openedDateTo)); // query parameter
            if (customId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customId", customId)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (assignedToDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedToDepartment", assignedToDepartment)); // query parameter
            if (assignedUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedUser", assignedUser)); // query parameter
            if (assignedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateFrom", assignedDateFrom)); // query parameter
            if (assignedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateTo", assignedDateTo)); // query parameter
            if (completedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateFrom", completedDateFrom)); // query parameter
            if (completedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateTo", completedDateTo)); // query parameter
            if (statusDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateFrom", statusDateFrom)); // query parameter
            if (statusDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateTo", statusDateTo)); // query parameter
            if (completedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByDepartment", completedByDepartment)); // query parameter
            if (completedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByUser", completedByUser)); // query parameter
            if (closedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateFrom", closedDateFrom)); // query parameter
            if (closedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateTo", closedDateTo)); // query parameter
            if (closedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByDepartment", closedByDepartment)); // query parameter
            if (closedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByUser", closedByUser)); // query parameter
            if (recordClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordClass", recordClass)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModelArray)));
        }

        /// <summary>
        /// Get All Records Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSimpleRecordModelArray> V4GetRecordsAsync (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModelArray> localVarResponse = await V4GetRecordsAsyncWithHttpInfo(contentType, authorization, type, openedDateFrom, openedDateTo, customId, module, status, assignedToDepartment, assignedUser, assignedDateFrom, assignedDateTo, completedDateFrom, completedDateTo, statusDateFrom, statusDateTo, completedByDepartment, completedByUser, closedDateFrom, closedDateTo, closedByDepartment, closedByUser, recordClass, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Records Gets record information, based on the specified query parameters. **API Endpoint**:  GET /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedToDepartment">Filter by the assigned department. (optional)</param>
        /// <param name="assignedUser">Filter by the assigned user. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModelArray>> V4GetRecordsAsyncWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedToDepartment = null, string assignedUser = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecords");

            var localVarPath = "/v4/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (openedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateFrom", openedDateFrom)); // query parameter
            if (openedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateTo", openedDateTo)); // query parameter
            if (customId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customId", customId)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (assignedToDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedToDepartment", assignedToDepartment)); // query parameter
            if (assignedUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedUser", assignedUser)); // query parameter
            if (assignedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateFrom", assignedDateFrom)); // query parameter
            if (assignedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateTo", assignedDateTo)); // query parameter
            if (completedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateFrom", completedDateFrom)); // query parameter
            if (completedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateTo", completedDateTo)); // query parameter
            if (statusDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateFrom", statusDateFrom)); // query parameter
            if (statusDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateTo", statusDateTo)); // query parameter
            if (completedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByDepartment", completedByDepartment)); // query parameter
            if (completedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByUser", completedByUser)); // query parameter
            if (closedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateFrom", closedDateFrom)); // query parameter
            if (closedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateTo", closedDateTo)); // query parameter
            if (closedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByDepartment", closedByDepartment)); // query parameter
            if (closedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByUser", closedByUser)); // query parameter
            if (recordClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordClass", recordClass)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModelArray)));
        }

        /// <summary>
        /// Describe Required Record Attributes Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDescribeRecordModel</returns>
        public ResponseDescribeRecordModel V4GetRecordsDescribeCreate (string contentType, string authorization, string type, string lang = null)
        {
             ApiResponse<ResponseDescribeRecordModel> localVarResponse = V4GetRecordsDescribeCreateWithHttpInfo(contentType, authorization, type, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Describe Required Record Attributes Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDescribeRecordModel</returns>
        public ApiResponse< ResponseDescribeRecordModel > V4GetRecordsDescribeCreateWithHttpInfo (string contentType, string authorization, string type, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsDescribeCreate");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsDescribeCreate");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RecordsApi->V4GetRecordsDescribeCreate");

            var localVarPath = "/v4/records/describe/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsDescribeCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDescribeRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDescribeRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDescribeRecordModel)));
        }

        /// <summary>
        /// Describe Required Record Attributes Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDescribeRecordModel</returns>
        public async System.Threading.Tasks.Task<ResponseDescribeRecordModel> V4GetRecordsDescribeCreateAsync (string contentType, string authorization, string type, string lang = null)
        {
             ApiResponse<ResponseDescribeRecordModel> localVarResponse = await V4GetRecordsDescribeCreateAsyncWithHttpInfo(contentType, authorization, type, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Describe Required Record Attributes Gets the field and element values the system requires in order to create a specific type of record. **API Endpoint**:  GET /v4/records/describe/create   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Type](./api-settings.html#operation/v4.get.settings.records.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDescribeRecordModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDescribeRecordModel>> V4GetRecordsDescribeCreateAsyncWithHttpInfo (string contentType, string authorization, string type, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsDescribeCreate");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsDescribeCreate");
            // verify the required parameter 'type' is set
            if (type == null)
                throw new ApiException(400, "Missing required parameter 'type' when calling RecordsApi->V4GetRecordsDescribeCreate");

            var localVarPath = "/v4/records/describe/create";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsDescribeCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDescribeRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDescribeRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDescribeRecordModel)));
        }

        /// <summary>
        /// Get Records Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordModelArray</returns>
        public ResponseRecordModelArray V4GetRecordsIds (string contentType, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordModelArray> localVarResponse = V4GetRecordsIdsWithHttpInfo(contentType, ids, expand, expandCustomForms, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Records Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordModelArray</returns>
        public ApiResponse< ResponseRecordModelArray > V4GetRecordsIdsWithHttpInfo (string contentType, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsApi->V4GetRecordsIds");

            var localVarPath = "/v4/records/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (expandCustomForms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expandCustomForms", expandCustomForms)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordModelArray)));
        }

        /// <summary>
        /// Get Records Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordModelArray> V4GetRecordsIdsAsync (string contentType, string authorization, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordModelArray> localVarResponse = await V4GetRecordsIdsAsyncWithHttpInfo(contentType,authorization,  ids, expand, expandCustomForms, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Records Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordModelArray>> V4GetRecordsIdsAsyncWithHttpInfo (string contentType,string authorization, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsApi->V4GetRecordsIds");

            var localVarPath = "/v4/records/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (expandCustomForms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expandCustomForms", expandCustomForms)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordModelArray)));
        }
        //-------------------------------------------------------------------------------------
        /// <summary>
        /// Get Records Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordModelArray</returns>
        public async System.Threading.Tasks.Task<string> V4GetRecordsIdsStringAsync(string contentType, string authorization, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null)
        {
           var recordstring = await V4GetRecordsIdsStringAsyncWithHttpInfo(contentType, authorization, ids, expand, expandCustomForms, fields, lang);
            return recordstring;

        }

        /// <summary>
        /// Get Records Gets the requested record(s). **API Endpoint**:  GET /v4/records/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="ids">Comma-delimited IDs of the records to fetch.</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot; If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordModelArray)</returns>
        public async System.Threading.Tasks.Task<string> V4GetRecordsIdsStringAsyncWithHttpInfo(string contentType, string authorization, string ids, string expand = null, string expandCustomForms = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsApi->V4GetRecordsIds");

            var localVarPath = "/v4/records/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (expandCustomForms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expandCustomForms", expandCustomForms)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return localVarResponse.Content.ToString();
        }


        // -------------------------------------------------------------------------------------
        /// <summary>
        /// Get My Records Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordExtModel1Array</returns>
        public ResponseRecordExtModel1Array V4GetRecordsMine (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordExtModel1Array> localVarResponse = V4GetRecordsMineWithHttpInfo(contentType, authorization, type, openedDateFrom, openedDateTo, customId, module, status, assignedDateFrom, assignedDateTo, completedDateFrom, completedDateTo, statusDateFrom, statusDateTo, updateDateFrom, updateDateTo, completedByDepartment, completedByUser, closedDateFrom, closedDateTo, closedByDepartment, closedByUser, recordClass, types, modules, statusTypes, expand, expandCustomForms, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get My Records Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordExtModel1Array</returns>
        public ApiResponse< ResponseRecordExtModel1Array > V4GetRecordsMineWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsMine");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsMine");

            var localVarPath = "/v4/records/mine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (openedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateFrom", openedDateFrom)); // query parameter
            if (openedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateTo", openedDateTo)); // query parameter
            if (customId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customId", customId)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (assignedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateFrom", assignedDateFrom)); // query parameter
            if (assignedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateTo", assignedDateTo)); // query parameter
            if (completedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateFrom", completedDateFrom)); // query parameter
            if (completedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateTo", completedDateTo)); // query parameter
            if (statusDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateFrom", statusDateFrom)); // query parameter
            if (statusDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateTo", statusDateTo)); // query parameter
            if (updateDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDateFrom", updateDateFrom)); // query parameter
            if (updateDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDateTo", updateDateTo)); // query parameter
            if (completedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByDepartment", completedByDepartment)); // query parameter
            if (completedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByUser", completedByUser)); // query parameter
            if (closedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateFrom", closedDateFrom)); // query parameter
            if (closedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateTo", closedDateTo)); // query parameter
            if (closedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByDepartment", closedByDepartment)); // query parameter
            if (closedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByUser", closedByUser)); // query parameter
            if (recordClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordClass", recordClass)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (modules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modules", modules)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusTypes", statusTypes)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (expandCustomForms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expandCustomForms", expandCustomForms)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsMine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordExtModel1Array>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordExtModel1Array) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordExtModel1Array)));
        }

        /// <summary>
        /// Get My Records Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordExtModel1Array</returns>
        public async System.Threading.Tasks.Task<ResponseRecordExtModel1Array> V4GetRecordsMineAsync (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordExtModel1Array> localVarResponse = await V4GetRecordsMineAsyncWithHttpInfo(contentType, authorization, type, openedDateFrom, openedDateTo, customId, module, status, assignedDateFrom, assignedDateTo, completedDateFrom, completedDateTo, statusDateFrom, statusDateTo, updateDateFrom, updateDateTo, completedByDepartment, completedByUser, closedDateFrom, closedDateTo, closedByDepartment, closedByUser, recordClass, types, modules, statusTypes, expand, expandCustomForms, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get My Records Gets records for the currently logged-in user. **API Endpoint**:  GET /v4/records/mine  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by record type. See [Get All Record Types](./api-settings.html#operation/v4.get.settings.records.types). (optional)</param>
        /// <param name="openedDateFrom">Filter by the record&#39;s open date range, beginning with this date. (optional)</param>
        /// <param name="openedDateTo">Filter by the record&#39;s open date range, ending with this date. (optional)</param>
        /// <param name="customId">Filter by the record custom id. (optional)</param>
        /// <param name="module">Filter by module. See [Get All Modules](./api-settings.html#operation/v4.get.settings.modules). (optional)</param>
        /// <param name="status">Filter by record status. (optional)</param>
        /// <param name="assignedDateFrom">Filter by the record&#39;s assigned date range starting with this date. (optional)</param>
        /// <param name="assignedDateTo">Filter by the record&#39;s assigned date range ending with this date. (optional)</param>
        /// <param name="completedDateFrom">Filter by the record&#39;s completed date range starting with this date. (optional)</param>
        /// <param name="completedDateTo">Filter by the record&#39;s completed date range ending with this date. (optional)</param>
        /// <param name="statusDateFrom">Filter by the record&#39;s status date range starting with this date. (optional)</param>
        /// <param name="statusDateTo">Filter by the record&#39;s status date range ending with this date. (optional)</param>
        /// <param name="updateDateFrom">Record update Date From (optional)</param>
        /// <param name="updateDateTo">Record update Date To (optional)</param>
        /// <param name="completedByDepartment">Filter by the deparment which completed the application. (optional)</param>
        /// <param name="completedByUser">Filter by the user who completed the application. (optional)</param>
        /// <param name="closedDateFrom">Filter by the record&#39;s closed date range starting with this date. (optional)</param>
        /// <param name="closedDateTo">Filter by the record&#39;s closed date range ending with this date. (optional)</param>
        /// <param name="closedByDepartment">Filter by the department which closed the application. (optional)</param>
        /// <param name="closedByUser">Filter by the user who closed the application. (optional)</param>
        /// <param name="recordClass">Filter by record class (optional)</param>
        /// <param name="types">Filter by comma-separated multiple record types. (optional)</param>
        /// <param name="modules">Filter by comma-separated multiple modules. (optional)</param>
        /// <param name="statusTypes">Filter by comma-separated multiple record status types. (optional)</param>
        /// <param name="expand">Comma-delimited list of related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="expandCustomForms">Valid values: \&quot;addresses\&quot;            If {expand} includes any of addresses, parcels, owners, or contacts, {expandCustomForms} specifies which {expand} objects should include custom forms. By default, custom forms for addresses, parcels, owners, and contacts are not included in the response data. Note that requesting APO custom forms may have performance implications, depending on the amount of data and connectivity to any external data source. Added in Civic Platform version: 9.2.0  (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordExtModel1Array)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordExtModel1Array>> V4GetRecordsMineAsyncWithHttpInfo (string contentType, string authorization, string type = null, string openedDateFrom = null, string openedDateTo = null, string customId = null, string module = null, string status = null, string assignedDateFrom = null, string assignedDateTo = null, string completedDateFrom = null, string completedDateTo = null, string statusDateFrom = null, string statusDateTo = null, string updateDateFrom = null, string updateDateTo = null, string completedByDepartment = null, string completedByUser = null, string closedDateFrom = null, string closedDateTo = null, string closedByDepartment = null, string closedByUser = null, string recordClass = null, string types = null, string modules = null, string statusTypes = null, string expand = null, string expandCustomForms = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsMine");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsMine");

            var localVarPath = "/v4/records/mine";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (openedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateFrom", openedDateFrom)); // query parameter
            if (openedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "openedDateTo", openedDateTo)); // query parameter
            if (customId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customId", customId)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (assignedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateFrom", assignedDateFrom)); // query parameter
            if (assignedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assignedDateTo", assignedDateTo)); // query parameter
            if (completedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateFrom", completedDateFrom)); // query parameter
            if (completedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedDateTo", completedDateTo)); // query parameter
            if (statusDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateFrom", statusDateFrom)); // query parameter
            if (statusDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusDateTo", statusDateTo)); // query parameter
            if (updateDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDateFrom", updateDateFrom)); // query parameter
            if (updateDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDateTo", updateDateTo)); // query parameter
            if (completedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByDepartment", completedByDepartment)); // query parameter
            if (completedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "completedByUser", completedByUser)); // query parameter
            if (closedDateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateFrom", closedDateFrom)); // query parameter
            if (closedDateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedDateTo", closedDateTo)); // query parameter
            if (closedByDepartment != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByDepartment", closedByDepartment)); // query parameter
            if (closedByUser != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "closedByUser", closedByUser)); // query parameter
            if (recordClass != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "recordClass", recordClass)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (modules != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "modules", modules)); // query parameter
            if (statusTypes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "statusTypes", statusTypes)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (expandCustomForms != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expandCustomForms", expandCustomForms)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsMine", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordExtModel1Array>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordExtModel1Array) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordExtModel1Array)));
        }

        /// <summary>
        /// Get Additional Details for Record Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordAdditionalModelArray</returns>
        public ResponseRecordAdditionalModelArray V4GetRecordsRecordIdAdditional (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordAdditionalModelArray> localVarResponse = V4GetRecordsRecordIdAdditionalWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Additional Details for Record Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordAdditionalModelArray</returns>
        public ApiResponse< ResponseRecordAdditionalModelArray > V4GetRecordsRecordIdAdditionalWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsRecordIdAdditional");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsRecordIdAdditional");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4GetRecordsRecordIdAdditional");

            var localVarPath = "/v4/records/{recordId}/additional";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdAdditional", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordAdditionalModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordAdditionalModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordAdditionalModelArray)));
        }

        /// <summary>
        /// Get Additional Details for Record Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordAdditionalModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordAdditionalModelArray> V4GetRecordsRecordIdAdditionalAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordAdditionalModelArray> localVarResponse = await V4GetRecordsRecordIdAdditionalAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Additional Details for Record Gets additional information for the requested record.  **API Endpoint**:  GET /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of record to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordAdditionalModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordAdditionalModelArray>> V4GetRecordsRecordIdAdditionalAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsRecordIdAdditional");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsRecordIdAdditional");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4GetRecordsRecordIdAdditional");

            var localVarPath = "/v4/records/{recordId}/additional";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdAdditional", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordAdditionalModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordAdditionalModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordAdditionalModelArray)));
        }

        /// <summary>
        /// Get All Related Details for Record Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordRelatedModelArray</returns>
        public ResponseRecordRelatedModelArray V4GetRecordsRecordIdRelated (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordRelatedModelArray> localVarResponse = V4GetRecordsRecordIdRelatedWithHttpInfo(contentType, authorization, recordId, relationship, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Related Details for Record Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordRelatedModelArray</returns>
        public ApiResponse< ResponseRecordRelatedModelArray > V4GetRecordsRecordIdRelatedWithHttpInfo (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsRecordIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsRecordIdRelated");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4GetRecordsRecordIdRelated");

            var localVarPath = "/v4/records/{recordId}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (relationship != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relationship", relationship)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordRelatedModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordRelatedModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordRelatedModelArray)));
        }

        /// <summary>
        /// Get All Related Details for Record Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordRelatedModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordRelatedModelArray> V4GetRecordsRecordIdRelatedAsync (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordRelatedModelArray> localVarResponse = await V4GetRecordsRecordIdRelatedAsyncWithHttpInfo(contentType, authorization, recordId, relationship, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Related Details for Record Gets the records related, by a parent or child relation, to the specified record. **API Endpoint**:  GET /v4/records/{recordId}/related  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="relationship">Filter by record relationship. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordRelatedModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordRelatedModelArray>> V4GetRecordsRecordIdRelatedAsyncWithHttpInfo (string contentType, string authorization, string recordId, string relationship = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4GetRecordsRecordIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4GetRecordsRecordIdRelated");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4GetRecordsRecordIdRelated");

            var localVarPath = "/v4/records/{recordId}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (relationship != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "relationship", relationship)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordRelatedModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordRelatedModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordRelatedModelArray)));
        }

        /// <summary>
        /// Create Record Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModel</returns>
        public ResponseSimpleRecordModel V4PostRecords (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModel> localVarResponse = V4PostRecordsWithHttpInfo(contentType, authorization, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Record Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModel</returns>
        public ApiResponse< ResponseSimpleRecordModel > V4PostRecordsWithHttpInfo (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecords");

            var localVarPath = "/v4/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModel)));
        }

        /// <summary>
        /// Create Record Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModel</returns>
        public async System.Threading.Tasks.Task<ResponseSimpleRecordModel> V4PostRecordsAsync (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModel> localVarResponse = await V4PostRecordsAsyncWithHttpInfo(contentType, authorization, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Record Creates a new, full record in Civic Platform. The Create Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Create Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) after the Create Record request. **API Endpoint**:  POST /v4/records  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The create record information to be added. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModel>> V4PostRecordsAsyncWithHttpInfo (string contentType, string authorization, RequestCreateRecordModel body = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecords");

            var localVarPath = "/v4/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModel)));
        }

        /// <summary>
        /// Create Partial Record Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModel</returns>
        public ResponseSimpleRecordModel V4PostRecordsInitialize (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModel> localVarResponse = V4PostRecordsInitializeWithHttpInfo(contentType, authorization, body, isFeeEstimate, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Partial Record Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModel</returns>
        public ApiResponse< ResponseSimpleRecordModel > V4PostRecordsInitializeWithHttpInfo (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecordsInitialize");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecordsInitialize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PostRecordsInitialize");

            var localVarPath = "/v4/records/initialize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isFeeEstimate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFeeEstimate", isFeeEstimate)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsInitialize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModel)));
        }

        /// <summary>
        /// Create Partial Record Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModel</returns>
        public async System.Threading.Tasks.Task<ResponseSimpleRecordModel> V4PostRecordsInitializeAsync (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModel> localVarResponse = await V4PostRecordsInitializeAsyncWithHttpInfo(contentType, authorization, body, isFeeEstimate, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Partial Record Creates a partial record that allows a user to save an incomplete application that is work in-progress. To submit the completed application, use the [Finalize Record](./api-records.html#operation/v4.post.records.recordId.finalize) method. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Create Partial Record in tandem with Finalize Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.  Note: The Create Partial Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/initialize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The record information to be initialized.</param>
        /// <param name="isFeeEstimate">Indicates whether or not it is for a fee estimate. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModel>> V4PostRecordsInitializeAsyncWithHttpInfo (string contentType, string authorization, RequestRecordModel body, bool? isFeeEstimate = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecordsInitialize");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecordsInitialize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PostRecordsInitialize");

            var localVarPath = "/v4/records/initialize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (isFeeEstimate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFeeEstimate", isFeeEstimate)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsInitialize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModel)));
        }

        /// <summary>
        /// Finalize Record Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModel</returns>
        public ResponseSimpleRecordModel V4PostRecordsRecordIdFinalize (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModel> localVarResponse = V4PostRecordsRecordIdFinalizeWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Finalize Record Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModel</returns>
        public ApiResponse< ResponseSimpleRecordModel > V4PostRecordsRecordIdFinalizeWithHttpInfo (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecordsRecordIdFinalize");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecordsRecordIdFinalize");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4PostRecordsRecordIdFinalize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PostRecordsRecordIdFinalize");

            var localVarPath = "/v4/records/{recordId}/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdFinalize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModel)));
        }

        /// <summary>
        /// Finalize Record Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModel</returns>
        public async System.Threading.Tasks.Task<ResponseSimpleRecordModel> V4PostRecordsRecordIdFinalizeAsync (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModel> localVarResponse = await V4PostRecordsRecordIdFinalizeAsyncWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Finalize Record Creates the finalized record in the database. Use this method after calling Create Partial Record to submit the completed record. See [Creating Records](https://developer.accela.com/docs/construct-api-records.html#construct-api-records__creatingRecords) for more information about calling Finalize Record in tandem with Create Partial Record.   The Create Partial Record API triggers the business rules engine event ApplicationSubmitAfter.   Note: The Finalize Record API does not include custom forms and custom tables in the request body. To add or update custom forms and custom tables, use the [Update Record Custom Forms](./api-records.html#operation/v4.put.records.recordId.customForms) and [Update Record Custom Tables](./api-records.html#operation/v4.put.records.recordId.customForms) between the Create Partial Record and Finalize Record requests. **API Endpoint**:  POST /v4/records/{recordId}/finalize  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Create Record request information.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModel>> V4PostRecordsRecordIdFinalizeAsyncWithHttpInfo (string contentType, string authorization, string recordId, RequestRecordModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecordsRecordIdFinalize");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecordsRecordIdFinalize");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4PostRecordsRecordIdFinalize");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PostRecordsRecordIdFinalize");

            var localVarPath = "/v4/records/{recordId}/finalize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdFinalize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModel)));
        }

        /// <summary>
        /// Create Related Details for Record Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostRecordsRecordIdRelated (string contentType, string authorization, string recordId, List<string> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostRecordsRecordIdRelatedWithHttpInfo(contentType, authorization, recordId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Related Details for Record Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostRecordsRecordIdRelatedWithHttpInfo (string contentType, string authorization, string recordId, List<string> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecordsRecordIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecordsRecordIdRelated");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4PostRecordsRecordIdRelated");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PostRecordsRecordIdRelated");

            var localVarPath = "/v4/records/{recordId}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Related Details for Record Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdRelatedAsync (string contentType, string authorization, string recordId, List<string> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostRecordsRecordIdRelatedAsyncWithHttpInfo(contentType, authorization, recordId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Related Details for Record Creates a child relationship to the specified (parent) record. **API Endpoint**:  POST /v4/records/{recordId}/related   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Related record information to be added.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdRelatedAsyncWithHttpInfo (string contentType, string authorization, string recordId, List<string> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PostRecordsRecordIdRelated");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PostRecordsRecordIdRelated");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4PostRecordsRecordIdRelated");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PostRecordsRecordIdRelated");

            var localVarPath = "/v4/records/{recordId}/related";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdRelated", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Record Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>SimpleRecordModel</returns>
        public SimpleRecordModel V4PutRecordsId (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null)
        {
             ApiResponse<SimpleRecordModel> localVarResponse = V4PutRecordsIdWithHttpInfo(contentType, authorization, id, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of SimpleRecordModel</returns>
        public ApiResponse< SimpleRecordModel > V4PutRecordsIdWithHttpInfo (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PutRecordsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PutRecordsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsApi->V4PutRecordsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PutRecordsId");

            var localVarPath = "/v4/Records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleRecordModel)));
        }

        /// <summary>
        /// Update Record Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of SimpleRecordModel</returns>
        public async System.Threading.Tasks.Task<SimpleRecordModel> V4PutRecordsIdAsync (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null)
        {
             ApiResponse<SimpleRecordModel> localVarResponse = await V4PutRecordsIdAsyncWithHttpInfo(contentType, authorization, id, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Record Updates details for the specified record.  **API Endpoint**:  PUT /v4/records/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The id of the record to update.</param>
        /// <param name="body">Record information to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (SimpleRecordModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleRecordModel>> V4PutRecordsIdAsyncWithHttpInfo (string contentType, string authorization, string id, RequestSimpleRecordModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PutRecordsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PutRecordsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsApi->V4PutRecordsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PutRecordsId");

            var localVarPath = "/v4/Records/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleRecordModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SimpleRecordModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleRecordModel)));
        }

        /// <summary>
        /// Update Additional Details for Record Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordAdditionalModelArray</returns>
        public ResponseRecordAdditionalModelArray V4PutRecordsRecordIdAdditional (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordAdditionalModelArray> localVarResponse = V4PutRecordsRecordIdAdditionalWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Additional Details for Record Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordAdditionalModelArray</returns>
        public ApiResponse< ResponseRecordAdditionalModelArray > V4PutRecordsRecordIdAdditionalWithHttpInfo (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PutRecordsRecordIdAdditional");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PutRecordsRecordIdAdditional");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4PutRecordsRecordIdAdditional");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PutRecordsRecordIdAdditional");

            var localVarPath = "/v4/records/{recordId}/additional";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdAdditional", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordAdditionalModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordAdditionalModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordAdditionalModelArray)));
        }

        /// <summary>
        /// Update Additional Details for Record Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordAdditionalModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordAdditionalModelArray> V4PutRecordsRecordIdAdditionalAsync (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordAdditionalModelArray> localVarResponse = await V4PutRecordsRecordIdAdditionalAsyncWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Additional Details for Record Updates additional information for the specified record.  **API Endpoint**:  PUT /v4/records/{recordId}/additional  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch.</param>
        /// <param name="body">Additional record information for update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordAdditionalModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordAdditionalModelArray>> V4PutRecordsRecordIdAdditionalAsyncWithHttpInfo (string contentType, string authorization, string recordId, RecordAdditionalModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsApi->V4PutRecordsRecordIdAdditional");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsApi->V4PutRecordsRecordIdAdditional");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsApi->V4PutRecordsRecordIdAdditional");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsApi->V4PutRecordsRecordIdAdditional");

            var localVarPath = "/v4/records/{recordId}/additional";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdAdditional", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordAdditionalModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordAdditionalModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordAdditionalModelArray)));
        }

    }
}
