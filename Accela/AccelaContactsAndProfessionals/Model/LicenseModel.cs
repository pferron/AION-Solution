/* 
 * Contacts and Professionals
 *
 * The Contacts and Professionals APIs enable apps to manage reference contacts and licensed professionals.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaContactsAndProfessionals.Client.SwaggerDateConverter;

namespace AccelaContactsAndProfessionals.Model
{
    /// <summary>
    /// LicenseModel
    /// </summary>
    [DataContract]
    public partial class LicenseModel :  IEquatable<LicenseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LicenseModel" /> class.
        /// </summary>
        /// <param name="addressLine1">The first line of the address..</param>
        /// <param name="addressLine2">The second line of the address..</param>
        /// <param name="addressLine3">The third line of the address..</param>
        /// <param name="birthDate">The birth date..</param>
        /// <param name="businessLicense">The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types..</param>
        /// <param name="businessName">A business name for the applicable individual..</param>
        /// <param name="businessName2">A secondary business name for the applicable individual..</param>
        /// <param name="citizenPermission">Access permissions for the selected Citizen Access user groups..</param>
        /// <param name="city">The name of the city..</param>
        /// <param name="comment">A comment about the inspection contact..</param>
        /// <param name="contractorBusinessName">The contractor&#39;s business name (65 char limit)..</param>
        /// <param name="contractorLicenseNumber">The contractor&#39;s license number.(30 char limit)..</param>
        /// <param name="country">country.</param>
        /// <param name="email">The contact&#39;s email address..</param>
        /// <param name="fax">The fax number for the contact..</param>
        /// <param name="federalEmployerId">The Federal Employer Identification Number. It is used to identify a business for tax purposes..</param>
        /// <param name="firstName">The contact&#39;s first name..</param>
        /// <param name="gender">gender.</param>
        /// <param name="id">The licensed professional system id assigned by the Civic Platform server..</param>
        /// <param name="insuranceAmount">The insurance cost..</param>
        /// <param name="insuranceCompany">The name of the company insuring the professional..</param>
        /// <param name="insuranceExpirationDate">The date when the insurance policy is due to expire..</param>
        /// <param name="insurancePolicyNumber">The insurance policy number..</param>
        /// <param name="lastName">The last name (surname)..</param>
        /// <param name="lastRenewalDate">The last date for a professionals renewal license..</param>
        /// <param name="licenseExpirationDate">The date when the license expires and is no longer valid..</param>
        /// <param name="licenseIssueDate">The license date of issuance..</param>
        /// <param name="licenseNumber">The licensed professional&#39;s license number. The license is from the Contractors State License Board..</param>
        /// <param name="licenseState">The state that issued the license..</param>
        /// <param name="licenseType">licenseType.</param>
        /// <param name="licensingBoard">licensingBoard.</param>
        /// <param name="middleName">The middle name. .</param>
        /// <param name="phone1">The primary telephone number of the contact..</param>
        /// <param name="phone1CountryCode">Phone Number 1 Country Code.</param>
        /// <param name="phone2">The secondary telephone number of the contact..</param>
        /// <param name="phone2CountryCode">Phone Number 2 Country Code.</param>
        /// <param name="phone3">The tertiary telephone number for the contact..</param>
        /// <param name="phone3CountryCode">Phone Number 3 Country Code.</param>
        /// <param name="postOfficeBox">The post office box number..</param>
        /// <param name="postalCode">The postal ZIP code for the address..</param>
        /// <param name="salutation">salutation.</param>
        /// <param name="serviceProviderCode">The unique agency identifier.</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="suffix">The contact name suffix..</param>
        /// <param name="title">The individual&#39;s business title..</param>
        /// <param name="workerCompensationExemption">The code associated with the Worker&#39;s Compensation Insurance Company..</param>
        /// <param name="workerCompensationExpirationDate">This is the expiration date of the Worker&#39;s Compensation Insurance Policy..</param>
        /// <param name="workerCompensationPolicyNumber">This is the policy number for the Worker&#39;s Compensation Insurance. Limit of 30 characters..</param>
        /// <param name="workerInsuranceCompanyCode">The code associated with the Worker&#39;s Compensation Insurance Company..</param>
        public LicenseModel(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), DateTime? birthDate = default(DateTime?), string businessLicense = default(string), string businessName = default(string), string businessName2 = default(string), string citizenPermission = default(string), string city = default(string), string comment = default(string), string contractorBusinessName = default(string), long? contractorLicenseNumber = default(long?), ContactAddressModelCountry country = default(ContactAddressModelCountry), string email = default(string), string fax = default(string), string federalEmployerId = default(string), string firstName = default(string), ContactModelGender gender = default(ContactModelGender), long? id = default(long?), double? insuranceAmount = default(double?), string insuranceCompany = default(string), DateTime? insuranceExpirationDate = default(DateTime?), string insurancePolicyNumber = default(string), string lastName = default(string), DateTime? lastRenewalDate = default(DateTime?), DateTime? licenseExpirationDate = default(DateTime?), DateTime? licenseIssueDate = default(DateTime?), string licenseNumber = default(string), string licenseState = default(string), LicenseModelLicenseType licenseType = default(LicenseModelLicenseType), LicenseModelLicensingBoard licensingBoard = default(LicenseModelLicensingBoard), string middleName = default(string), string phone1 = default(string), string phone1CountryCode = default(string), string phone2 = default(string), string phone2CountryCode = default(string), string phone3 = default(string), string phone3CountryCode = default(string), string postOfficeBox = default(string), string postalCode = default(string), ContactModelSalutation salutation = default(ContactModelSalutation), string serviceProviderCode = default(string), LicenseModelState state = default(LicenseModelState), LicenseModelStatus status = default(LicenseModelStatus), string suffix = default(string), string title = default(string), string workerCompensationExemption = default(string), DateTime? workerCompensationExpirationDate = default(DateTime?), string workerCompensationPolicyNumber = default(string), string workerInsuranceCompanyCode = default(string))
        {
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.BirthDate = birthDate;
            this.BusinessLicense = businessLicense;
            this.BusinessName = businessName;
            this.BusinessName2 = businessName2;
            this.CitizenPermission = citizenPermission;
            this.City = city;
            this.Comment = comment;
            this.ContractorBusinessName = contractorBusinessName;
            this.ContractorLicenseNumber = contractorLicenseNumber;
            this.Country = country;
            this.Email = email;
            this.Fax = fax;
            this.FederalEmployerId = federalEmployerId;
            this.FirstName = firstName;
            this.Gender = gender;
            this.Id = id;
            this.InsuranceAmount = insuranceAmount;
            this.InsuranceCompany = insuranceCompany;
            this.InsuranceExpirationDate = insuranceExpirationDate;
            this.InsurancePolicyNumber = insurancePolicyNumber;
            this.LastName = lastName;
            this.LastRenewalDate = lastRenewalDate;
            this.LicenseExpirationDate = licenseExpirationDate;
            this.LicenseIssueDate = licenseIssueDate;
            this.LicenseNumber = licenseNumber;
            this.LicenseState = licenseState;
            this.LicenseType = licenseType;
            this.LicensingBoard = licensingBoard;
            this.MiddleName = middleName;
            this.Phone1 = phone1;
            this.Phone1CountryCode = phone1CountryCode;
            this.Phone2 = phone2;
            this.Phone2CountryCode = phone2CountryCode;
            this.Phone3 = phone3;
            this.Phone3CountryCode = phone3CountryCode;
            this.PostOfficeBox = postOfficeBox;
            this.PostalCode = postalCode;
            this.Salutation = salutation;
            this.ServiceProviderCode = serviceProviderCode;
            this.State = state;
            this.Status = status;
            this.Suffix = suffix;
            this.Title = title;
            this.WorkerCompensationExemption = workerCompensationExemption;
            this.WorkerCompensationExpirationDate = workerCompensationExpirationDate;
            this.WorkerCompensationPolicyNumber = workerCompensationPolicyNumber;
            this.WorkerInsuranceCompanyCode = workerInsuranceCompanyCode;
        }
        
        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        /// <value>The second line of the address.</value>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        /// <value>The third line of the address.</value>
        [DataMember(Name="addressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The birth date.
        /// </summary>
        /// <value>The birth date.</value>
        [DataMember(Name="birthDate", EmitDefaultValue=false)]
        public DateTime? BirthDate { get; set; }

        /// <summary>
        /// The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types.
        /// </summary>
        /// <value>The official business license number issued by an agency. A licensed professional can have the same license number assigned to multiple license types.</value>
        [DataMember(Name="businessLicense", EmitDefaultValue=false)]
        public string BusinessLicense { get; set; }

        /// <summary>
        /// A business name for the applicable individual.
        /// </summary>
        /// <value>A business name for the applicable individual.</value>
        [DataMember(Name="businessName", EmitDefaultValue=false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// A secondary business name for the applicable individual.
        /// </summary>
        /// <value>A secondary business name for the applicable individual.</value>
        [DataMember(Name="businessName2", EmitDefaultValue=false)]
        public string BusinessName2 { get; set; }

        /// <summary>
        /// Access permissions for the selected Citizen Access user groups.
        /// </summary>
        /// <value>Access permissions for the selected Citizen Access user groups.</value>
        [DataMember(Name="citizenPermission", EmitDefaultValue=false)]
        public string CitizenPermission { get; set; }

        /// <summary>
        /// The name of the city.
        /// </summary>
        /// <value>The name of the city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// A comment about the inspection contact.
        /// </summary>
        /// <value>A comment about the inspection contact.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The contractor&#39;s business name (65 char limit).
        /// </summary>
        /// <value>The contractor&#39;s business name (65 char limit).</value>
        [DataMember(Name="contractorBusinessName", EmitDefaultValue=false)]
        public string ContractorBusinessName { get; set; }

        /// <summary>
        /// The contractor&#39;s license number.(30 char limit).
        /// </summary>
        /// <value>The contractor&#39;s license number.(30 char limit).</value>
        [DataMember(Name="contractorLicenseNumber", EmitDefaultValue=false)]
        public long? ContractorLicenseNumber { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public ContactAddressModelCountry Country { get; set; }

        /// <summary>
        /// The contact&#39;s email address.
        /// </summary>
        /// <value>The contact&#39;s email address.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The fax number for the contact.
        /// </summary>
        /// <value>The fax number for the contact.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// The Federal Employer Identification Number. It is used to identify a business for tax purposes.
        /// </summary>
        /// <value>The Federal Employer Identification Number. It is used to identify a business for tax purposes.</value>
        [DataMember(Name="federalEmployerId", EmitDefaultValue=false)]
        public string FederalEmployerId { get; set; }

        /// <summary>
        /// The contact&#39;s first name.
        /// </summary>
        /// <value>The contact&#39;s first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name="gender", EmitDefaultValue=false)]
        public ContactModelGender Gender { get; set; }

        /// <summary>
        /// The licensed professional system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The licensed professional system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The insurance cost.
        /// </summary>
        /// <value>The insurance cost.</value>
        [DataMember(Name="insuranceAmount", EmitDefaultValue=false)]
        public double? InsuranceAmount { get; set; }

        /// <summary>
        /// The name of the company insuring the professional.
        /// </summary>
        /// <value>The name of the company insuring the professional.</value>
        [DataMember(Name="insuranceCompany", EmitDefaultValue=false)]
        public string InsuranceCompany { get; set; }

        /// <summary>
        /// The date when the insurance policy is due to expire.
        /// </summary>
        /// <value>The date when the insurance policy is due to expire.</value>
        [DataMember(Name="insuranceExpirationDate", EmitDefaultValue=false)]
        public DateTime? InsuranceExpirationDate { get; set; }

        /// <summary>
        /// The insurance policy number.
        /// </summary>
        /// <value>The insurance policy number.</value>
        [DataMember(Name="insurancePolicyNumber", EmitDefaultValue=false)]
        public string InsurancePolicyNumber { get; set; }

        /// <summary>
        /// The last name (surname).
        /// </summary>
        /// <value>The last name (surname).</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// The last date for a professionals renewal license.
        /// </summary>
        /// <value>The last date for a professionals renewal license.</value>
        [DataMember(Name="lastRenewalDate", EmitDefaultValue=false)]
        public DateTime? LastRenewalDate { get; set; }

        /// <summary>
        /// The date when the license expires and is no longer valid.
        /// </summary>
        /// <value>The date when the license expires and is no longer valid.</value>
        [DataMember(Name="licenseExpirationDate", EmitDefaultValue=false)]
        public DateTime? LicenseExpirationDate { get; set; }

        /// <summary>
        /// The license date of issuance.
        /// </summary>
        /// <value>The license date of issuance.</value>
        [DataMember(Name="licenseIssueDate", EmitDefaultValue=false)]
        public DateTime? LicenseIssueDate { get; set; }

        /// <summary>
        /// The licensed professional&#39;s license number. The license is from the Contractors State License Board.
        /// </summary>
        /// <value>The licensed professional&#39;s license number. The license is from the Contractors State License Board.</value>
        [DataMember(Name="licenseNumber", EmitDefaultValue=false)]
        public string LicenseNumber { get; set; }

        /// <summary>
        /// The state that issued the license.
        /// </summary>
        /// <value>The state that issued the license.</value>
        [DataMember(Name="licenseState", EmitDefaultValue=false)]
        public string LicenseState { get; set; }

        /// <summary>
        /// Gets or Sets LicenseType
        /// </summary>
        [DataMember(Name="licenseType", EmitDefaultValue=false)]
        public LicenseModelLicenseType LicenseType { get; set; }

        /// <summary>
        /// Gets or Sets LicensingBoard
        /// </summary>
        [DataMember(Name="licensingBoard", EmitDefaultValue=false)]
        public LicenseModelLicensingBoard LicensingBoard { get; set; }

        /// <summary>
        /// The middle name. 
        /// </summary>
        /// <value>The middle name. </value>
        [DataMember(Name="middleName", EmitDefaultValue=false)]
        public string MiddleName { get; set; }

        /// <summary>
        /// The primary telephone number of the contact.
        /// </summary>
        /// <value>The primary telephone number of the contact.</value>
        [DataMember(Name="phone1", EmitDefaultValue=false)]
        public string Phone1 { get; set; }

        /// <summary>
        /// Phone Number 1 Country Code
        /// </summary>
        /// <value>Phone Number 1 Country Code</value>
        [DataMember(Name="phone1CountryCode", EmitDefaultValue=false)]
        public string Phone1CountryCode { get; set; }

        /// <summary>
        /// The secondary telephone number of the contact.
        /// </summary>
        /// <value>The secondary telephone number of the contact.</value>
        [DataMember(Name="phone2", EmitDefaultValue=false)]
        public string Phone2 { get; set; }

        /// <summary>
        /// Phone Number 2 Country Code
        /// </summary>
        /// <value>Phone Number 2 Country Code</value>
        [DataMember(Name="phone2CountryCode", EmitDefaultValue=false)]
        public string Phone2CountryCode { get; set; }

        /// <summary>
        /// The tertiary telephone number for the contact.
        /// </summary>
        /// <value>The tertiary telephone number for the contact.</value>
        [DataMember(Name="phone3", EmitDefaultValue=false)]
        public string Phone3 { get; set; }

        /// <summary>
        /// Phone Number 3 Country Code
        /// </summary>
        /// <value>Phone Number 3 Country Code</value>
        [DataMember(Name="phone3CountryCode", EmitDefaultValue=false)]
        public string Phone3CountryCode { get; set; }

        /// <summary>
        /// The post office box number.
        /// </summary>
        /// <value>The post office box number.</value>
        [DataMember(Name="postOfficeBox", EmitDefaultValue=false)]
        public string PostOfficeBox { get; set; }

        /// <summary>
        /// The postal ZIP code for the address.
        /// </summary>
        /// <value>The postal ZIP code for the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets Salutation
        /// </summary>
        [DataMember(Name="salutation", EmitDefaultValue=false)]
        public ContactModelSalutation Salutation { get; set; }

        /// <summary>
        /// The unique agency identifier
        /// </summary>
        /// <value>The unique agency identifier</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public LicenseModelState State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public LicenseModelStatus Status { get; set; }

        /// <summary>
        /// The contact name suffix.
        /// </summary>
        /// <value>The contact name suffix.</value>
        [DataMember(Name="suffix", EmitDefaultValue=false)]
        public string Suffix { get; set; }

        /// <summary>
        /// The individual&#39;s business title.
        /// </summary>
        /// <value>The individual&#39;s business title.</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// The code associated with the Worker&#39;s Compensation Insurance Company.
        /// </summary>
        /// <value>The code associated with the Worker&#39;s Compensation Insurance Company.</value>
        [DataMember(Name="workerCompensationExemption", EmitDefaultValue=false)]
        public string WorkerCompensationExemption { get; set; }

        /// <summary>
        /// This is the expiration date of the Worker&#39;s Compensation Insurance Policy.
        /// </summary>
        /// <value>This is the expiration date of the Worker&#39;s Compensation Insurance Policy.</value>
        [DataMember(Name="workerCompensationExpirationDate", EmitDefaultValue=false)]
        public DateTime? WorkerCompensationExpirationDate { get; set; }

        /// <summary>
        /// This is the policy number for the Worker&#39;s Compensation Insurance. Limit of 30 characters.
        /// </summary>
        /// <value>This is the policy number for the Worker&#39;s Compensation Insurance. Limit of 30 characters.</value>
        [DataMember(Name="workerCompensationPolicyNumber", EmitDefaultValue=false)]
        public string WorkerCompensationPolicyNumber { get; set; }

        /// <summary>
        /// The code associated with the Worker&#39;s Compensation Insurance Company.
        /// </summary>
        /// <value>The code associated with the Worker&#39;s Compensation Insurance Company.</value>
        [DataMember(Name="workerInsuranceCompanyCode", EmitDefaultValue=false)]
        public string WorkerInsuranceCompanyCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LicenseModel {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
            sb.Append("  BusinessLicense: ").Append(BusinessLicense).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  BusinessName2: ").Append(BusinessName2).Append("\n");
            sb.Append("  CitizenPermission: ").Append(CitizenPermission).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ContractorBusinessName: ").Append(ContractorBusinessName).Append("\n");
            sb.Append("  ContractorLicenseNumber: ").Append(ContractorLicenseNumber).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FederalEmployerId: ").Append(FederalEmployerId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InsuranceAmount: ").Append(InsuranceAmount).Append("\n");
            sb.Append("  InsuranceCompany: ").Append(InsuranceCompany).Append("\n");
            sb.Append("  InsuranceExpirationDate: ").Append(InsuranceExpirationDate).Append("\n");
            sb.Append("  InsurancePolicyNumber: ").Append(InsurancePolicyNumber).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  LastRenewalDate: ").Append(LastRenewalDate).Append("\n");
            sb.Append("  LicenseExpirationDate: ").Append(LicenseExpirationDate).Append("\n");
            sb.Append("  LicenseIssueDate: ").Append(LicenseIssueDate).Append("\n");
            sb.Append("  LicenseNumber: ").Append(LicenseNumber).Append("\n");
            sb.Append("  LicenseState: ").Append(LicenseState).Append("\n");
            sb.Append("  LicenseType: ").Append(LicenseType).Append("\n");
            sb.Append("  LicensingBoard: ").Append(LicensingBoard).Append("\n");
            sb.Append("  MiddleName: ").Append(MiddleName).Append("\n");
            sb.Append("  Phone1: ").Append(Phone1).Append("\n");
            sb.Append("  Phone1CountryCode: ").Append(Phone1CountryCode).Append("\n");
            sb.Append("  Phone2: ").Append(Phone2).Append("\n");
            sb.Append("  Phone2CountryCode: ").Append(Phone2CountryCode).Append("\n");
            sb.Append("  Phone3: ").Append(Phone3).Append("\n");
            sb.Append("  Phone3CountryCode: ").Append(Phone3CountryCode).Append("\n");
            sb.Append("  PostOfficeBox: ").Append(PostOfficeBox).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Salutation: ").Append(Salutation).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Suffix: ").Append(Suffix).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  WorkerCompensationExemption: ").Append(WorkerCompensationExemption).Append("\n");
            sb.Append("  WorkerCompensationExpirationDate: ").Append(WorkerCompensationExpirationDate).Append("\n");
            sb.Append("  WorkerCompensationPolicyNumber: ").Append(WorkerCompensationPolicyNumber).Append("\n");
            sb.Append("  WorkerInsuranceCompanyCode: ").Append(WorkerInsuranceCompanyCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LicenseModel);
        }

        /// <summary>
        /// Returns true if LicenseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LicenseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LicenseModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.BirthDate == input.BirthDate ||
                    (this.BirthDate != null &&
                    this.BirthDate.Equals(input.BirthDate))
                ) && 
                (
                    this.BusinessLicense == input.BusinessLicense ||
                    (this.BusinessLicense != null &&
                    this.BusinessLicense.Equals(input.BusinessLicense))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.BusinessName2 == input.BusinessName2 ||
                    (this.BusinessName2 != null &&
                    this.BusinessName2.Equals(input.BusinessName2))
                ) && 
                (
                    this.CitizenPermission == input.CitizenPermission ||
                    (this.CitizenPermission != null &&
                    this.CitizenPermission.Equals(input.CitizenPermission))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.ContractorBusinessName == input.ContractorBusinessName ||
                    (this.ContractorBusinessName != null &&
                    this.ContractorBusinessName.Equals(input.ContractorBusinessName))
                ) && 
                (
                    this.ContractorLicenseNumber == input.ContractorLicenseNumber ||
                    (this.ContractorLicenseNumber != null &&
                    this.ContractorLicenseNumber.Equals(input.ContractorLicenseNumber))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FederalEmployerId == input.FederalEmployerId ||
                    (this.FederalEmployerId != null &&
                    this.FederalEmployerId.Equals(input.FederalEmployerId))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Gender == input.Gender ||
                    (this.Gender != null &&
                    this.Gender.Equals(input.Gender))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InsuranceAmount == input.InsuranceAmount ||
                    (this.InsuranceAmount != null &&
                    this.InsuranceAmount.Equals(input.InsuranceAmount))
                ) && 
                (
                    this.InsuranceCompany == input.InsuranceCompany ||
                    (this.InsuranceCompany != null &&
                    this.InsuranceCompany.Equals(input.InsuranceCompany))
                ) && 
                (
                    this.InsuranceExpirationDate == input.InsuranceExpirationDate ||
                    (this.InsuranceExpirationDate != null &&
                    this.InsuranceExpirationDate.Equals(input.InsuranceExpirationDate))
                ) && 
                (
                    this.InsurancePolicyNumber == input.InsurancePolicyNumber ||
                    (this.InsurancePolicyNumber != null &&
                    this.InsurancePolicyNumber.Equals(input.InsurancePolicyNumber))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.LastRenewalDate == input.LastRenewalDate ||
                    (this.LastRenewalDate != null &&
                    this.LastRenewalDate.Equals(input.LastRenewalDate))
                ) && 
                (
                    this.LicenseExpirationDate == input.LicenseExpirationDate ||
                    (this.LicenseExpirationDate != null &&
                    this.LicenseExpirationDate.Equals(input.LicenseExpirationDate))
                ) && 
                (
                    this.LicenseIssueDate == input.LicenseIssueDate ||
                    (this.LicenseIssueDate != null &&
                    this.LicenseIssueDate.Equals(input.LicenseIssueDate))
                ) && 
                (
                    this.LicenseNumber == input.LicenseNumber ||
                    (this.LicenseNumber != null &&
                    this.LicenseNumber.Equals(input.LicenseNumber))
                ) && 
                (
                    this.LicenseState == input.LicenseState ||
                    (this.LicenseState != null &&
                    this.LicenseState.Equals(input.LicenseState))
                ) && 
                (
                    this.LicenseType == input.LicenseType ||
                    (this.LicenseType != null &&
                    this.LicenseType.Equals(input.LicenseType))
                ) && 
                (
                    this.LicensingBoard == input.LicensingBoard ||
                    (this.LicensingBoard != null &&
                    this.LicensingBoard.Equals(input.LicensingBoard))
                ) && 
                (
                    this.MiddleName == input.MiddleName ||
                    (this.MiddleName != null &&
                    this.MiddleName.Equals(input.MiddleName))
                ) && 
                (
                    this.Phone1 == input.Phone1 ||
                    (this.Phone1 != null &&
                    this.Phone1.Equals(input.Phone1))
                ) && 
                (
                    this.Phone1CountryCode == input.Phone1CountryCode ||
                    (this.Phone1CountryCode != null &&
                    this.Phone1CountryCode.Equals(input.Phone1CountryCode))
                ) && 
                (
                    this.Phone2 == input.Phone2 ||
                    (this.Phone2 != null &&
                    this.Phone2.Equals(input.Phone2))
                ) && 
                (
                    this.Phone2CountryCode == input.Phone2CountryCode ||
                    (this.Phone2CountryCode != null &&
                    this.Phone2CountryCode.Equals(input.Phone2CountryCode))
                ) && 
                (
                    this.Phone3 == input.Phone3 ||
                    (this.Phone3 != null &&
                    this.Phone3.Equals(input.Phone3))
                ) && 
                (
                    this.Phone3CountryCode == input.Phone3CountryCode ||
                    (this.Phone3CountryCode != null &&
                    this.Phone3CountryCode.Equals(input.Phone3CountryCode))
                ) && 
                (
                    this.PostOfficeBox == input.PostOfficeBox ||
                    (this.PostOfficeBox != null &&
                    this.PostOfficeBox.Equals(input.PostOfficeBox))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Salutation == input.Salutation ||
                    (this.Salutation != null &&
                    this.Salutation.Equals(input.Salutation))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Suffix == input.Suffix ||
                    (this.Suffix != null &&
                    this.Suffix.Equals(input.Suffix))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.WorkerCompensationExemption == input.WorkerCompensationExemption ||
                    (this.WorkerCompensationExemption != null &&
                    this.WorkerCompensationExemption.Equals(input.WorkerCompensationExemption))
                ) && 
                (
                    this.WorkerCompensationExpirationDate == input.WorkerCompensationExpirationDate ||
                    (this.WorkerCompensationExpirationDate != null &&
                    this.WorkerCompensationExpirationDate.Equals(input.WorkerCompensationExpirationDate))
                ) && 
                (
                    this.WorkerCompensationPolicyNumber == input.WorkerCompensationPolicyNumber ||
                    (this.WorkerCompensationPolicyNumber != null &&
                    this.WorkerCompensationPolicyNumber.Equals(input.WorkerCompensationPolicyNumber))
                ) && 
                (
                    this.WorkerInsuranceCompanyCode == input.WorkerInsuranceCompanyCode ||
                    (this.WorkerInsuranceCompanyCode != null &&
                    this.WorkerInsuranceCompanyCode.Equals(input.WorkerInsuranceCompanyCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.BirthDate != null)
                    hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
                if (this.BusinessLicense != null)
                    hashCode = hashCode * 59 + this.BusinessLicense.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.BusinessName2 != null)
                    hashCode = hashCode * 59 + this.BusinessName2.GetHashCode();
                if (this.CitizenPermission != null)
                    hashCode = hashCode * 59 + this.CitizenPermission.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.ContractorBusinessName != null)
                    hashCode = hashCode * 59 + this.ContractorBusinessName.GetHashCode();
                if (this.ContractorLicenseNumber != null)
                    hashCode = hashCode * 59 + this.ContractorLicenseNumber.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FederalEmployerId != null)
                    hashCode = hashCode * 59 + this.FederalEmployerId.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Gender != null)
                    hashCode = hashCode * 59 + this.Gender.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InsuranceAmount != null)
                    hashCode = hashCode * 59 + this.InsuranceAmount.GetHashCode();
                if (this.InsuranceCompany != null)
                    hashCode = hashCode * 59 + this.InsuranceCompany.GetHashCode();
                if (this.InsuranceExpirationDate != null)
                    hashCode = hashCode * 59 + this.InsuranceExpirationDate.GetHashCode();
                if (this.InsurancePolicyNumber != null)
                    hashCode = hashCode * 59 + this.InsurancePolicyNumber.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.LastRenewalDate != null)
                    hashCode = hashCode * 59 + this.LastRenewalDate.GetHashCode();
                if (this.LicenseExpirationDate != null)
                    hashCode = hashCode * 59 + this.LicenseExpirationDate.GetHashCode();
                if (this.LicenseIssueDate != null)
                    hashCode = hashCode * 59 + this.LicenseIssueDate.GetHashCode();
                if (this.LicenseNumber != null)
                    hashCode = hashCode * 59 + this.LicenseNumber.GetHashCode();
                if (this.LicenseState != null)
                    hashCode = hashCode * 59 + this.LicenseState.GetHashCode();
                if (this.LicenseType != null)
                    hashCode = hashCode * 59 + this.LicenseType.GetHashCode();
                if (this.LicensingBoard != null)
                    hashCode = hashCode * 59 + this.LicensingBoard.GetHashCode();
                if (this.MiddleName != null)
                    hashCode = hashCode * 59 + this.MiddleName.GetHashCode();
                if (this.Phone1 != null)
                    hashCode = hashCode * 59 + this.Phone1.GetHashCode();
                if (this.Phone1CountryCode != null)
                    hashCode = hashCode * 59 + this.Phone1CountryCode.GetHashCode();
                if (this.Phone2 != null)
                    hashCode = hashCode * 59 + this.Phone2.GetHashCode();
                if (this.Phone2CountryCode != null)
                    hashCode = hashCode * 59 + this.Phone2CountryCode.GetHashCode();
                if (this.Phone3 != null)
                    hashCode = hashCode * 59 + this.Phone3.GetHashCode();
                if (this.Phone3CountryCode != null)
                    hashCode = hashCode * 59 + this.Phone3CountryCode.GetHashCode();
                if (this.PostOfficeBox != null)
                    hashCode = hashCode * 59 + this.PostOfficeBox.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Salutation != null)
                    hashCode = hashCode * 59 + this.Salutation.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Suffix != null)
                    hashCode = hashCode * 59 + this.Suffix.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.WorkerCompensationExemption != null)
                    hashCode = hashCode * 59 + this.WorkerCompensationExemption.GetHashCode();
                if (this.WorkerCompensationExpirationDate != null)
                    hashCode = hashCode * 59 + this.WorkerCompensationExpirationDate.GetHashCode();
                if (this.WorkerCompensationPolicyNumber != null)
                    hashCode = hashCode * 59 + this.WorkerCompensationPolicyNumber.GetHashCode();
                if (this.WorkerInsuranceCompanyCode != null)
                    hashCode = hashCode * 59 + this.WorkerInsuranceCompanyCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
