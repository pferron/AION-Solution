/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using AccelaSettings.Client;
using AccelaSettings.Model;

namespace AccelaSettings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsRecordsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Record Construction Types
        /// </summary>
        /// <remarks>
        /// Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        ResponseSettingValueModelArray V4GetSettingsRecordsConstructionTypes (string contentType, string authorization, string lang = null);

        /// <summary>
        /// Get All Record Construction Types
        /// </summary>
        /// <remarks>
        /// Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        ApiResponse<ResponseSettingValueModelArray> V4GetSettingsRecordsConstructionTypesWithHttpInfo (string contentType, string authorization, string lang = null);
        /// <summary>
        /// Get All Record Expiration Statuses
        /// </summary>
        /// <remarks>
        /// Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        ResponseSettingValueModelArray V4GetSettingsRecordsExpirationStatuses (string contentType, string authorization, string lang = null);

        /// <summary>
        /// Get All Record Expiration Statuses
        /// </summary>
        /// <remarks>
        /// Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        ApiResponse<ResponseSettingValueModelArray> V4GetSettingsRecordsExpirationStatusesWithHttpInfo (string contentType, string authorization, string lang = null);
        /// <summary>
        /// Get All Record Types
        /// </summary>
        /// <remarks>
        /// Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordTypeModelArray</returns>
        ResponseRecordTypeModelArray V4GetSettingsRecordsTypes (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Record Types
        /// </summary>
        /// <remarks>
        /// Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordTypeModelArray</returns>
        ApiResponse<ResponseRecordTypeModelArray> V4GetSettingsRecordsTypesWithHttpInfo (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetSettingsRecordsTypesIdCustomForms (string contentType, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetSettingsRecordsTypesIdCustomFormsWithHttpInfo (string contentType, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        ResponseCustomTableMetadataModelArray V4GetSettingsRecordsTypesIdCustomTables (string contentType, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        ApiResponse<ResponseCustomTableMetadataModelArray> V4GetSettingsRecordsTypesIdCustomTablesWithHttpInfo (string contentType, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Fee Schedules for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        ResponseSettingValueModelArray V4GetSettingsRecordsTypesIdFeesSchedules (string contentType, string authorization, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Fee Schedules for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        ApiResponse<ResponseSettingValueModelArray> V4GetSettingsRecordsTypesIdFeesSchedulesWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Statuses for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordStatusModelArray</returns>
        ResponseRecordStatusModelArray V4GetSettingsRecordsTypesIdStatuses (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get All Statuses for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordStatusModelArray</returns>
        ApiResponse<ResponseRecordStatusModelArray> V4GetSettingsRecordsTypesIdStatusesWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get All Asset Types for Record Type
        /// </summary>
        /// <remarks>
        /// Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordTypeAssetTypeModelArray</returns>
        ResponseRecordTypeAssetTypeModelArray V4GetSettingsRecordsTypesRecordTypeIdAssetTypes (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Types for Record Type
        /// </summary>
        /// <remarks>
        /// Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordTypeAssetTypeModelArray</returns>
        ApiResponse<ResponseRecordTypeAssetTypeModelArray> V4GetSettingsRecordsTypesRecordTypeIdAssetTypesWithHttpInfo (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Record Construction Types
        /// </summary>
        /// <remarks>
        /// Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsRecordsConstructionTypesAsync (string contentType, string authorization, string lang = null);

        /// <summary>
        /// Get All Record Construction Types
        /// </summary>
        /// <remarks>
        /// Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsRecordsConstructionTypesAsyncWithHttpInfo (string contentType, string authorization, string lang = null);
        /// <summary>
        /// Get All Record Expiration Statuses
        /// </summary>
        /// <remarks>
        /// Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsRecordsExpirationStatusesAsync (string contentType, string authorization, string lang = null);

        /// <summary>
        /// Get All Record Expiration Statuses
        /// </summary>
        /// <remarks>
        /// Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsRecordsExpirationStatusesAsyncWithHttpInfo (string contentType, string authorization, string lang = null);
        /// <summary>
        /// Get All Record Types
        /// </summary>
        /// <remarks>
        /// Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordTypeModelArray> V4GetSettingsRecordsTypesAsync (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Record Types
        /// </summary>
        /// <remarks>
        /// Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordTypeModelArray>> V4GetSettingsRecordsTypesAsyncWithHttpInfo (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetSettingsRecordsTypesIdCustomFormsAsync (string contentType, string authorization, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization"></param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetSettingsRecordsTypesIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetSettingsRecordsTypesIdCustomTablesAsync (string contentType, string authorization, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetSettingsRecordsTypesIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Fee Schedules for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsRecordsTypesIdFeesSchedulesAsync (string contentType, string authorization, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Fee Schedules for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsRecordsTypesIdFeesSchedulesAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Statuses for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordStatusModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordStatusModelArray> V4GetSettingsRecordsTypesIdStatusesAsync (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get All Statuses for Record Type
        /// </summary>
        /// <remarks>
        /// Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordStatusModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordStatusModelArray>> V4GetSettingsRecordsTypesIdStatusesAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get All Asset Types for Record Type
        /// </summary>
        /// <remarks>
        /// Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordTypeAssetTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordTypeAssetTypeModelArray> V4GetSettingsRecordsTypesRecordTypeIdAssetTypesAsync (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Types for Record Type
        /// </summary>
        /// <remarks>
        /// Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordTypeAssetTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordTypeAssetTypeModelArray>> V4GetSettingsRecordsTypesRecordTypeIdAssetTypesAsyncWithHttpInfo (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsRecordsApi : ISettingsRecordsApi
    {
        private AccelaSettings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsRecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsRecordsApi(String basePath)
        {
            this.Configuration = new AccelaSettings.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsRecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsRecordsApi(AccelaSettings.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaSettings.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaSettings.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaSettings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Record Construction Types Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        public ResponseSettingValueModelArray V4GetSettingsRecordsConstructionTypes (string contentType, string authorization, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = V4GetSettingsRecordsConstructionTypesWithHttpInfo(contentType, authorization, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Record Construction Types Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        public ApiResponse< ResponseSettingValueModelArray > V4GetSettingsRecordsConstructionTypesWithHttpInfo (string contentType, string authorization, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsConstructionTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsConstructionTypes");

            var localVarPath = "/v4/settings/records/constructionTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsConstructionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Record Construction Types Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsRecordsConstructionTypesAsync (string contentType, string authorization, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = await V4GetSettingsRecordsConstructionTypesAsyncWithHttpInfo(contentType, authorization, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Record Construction Types Gets the construction types for the specified record type. **API Endpoint**:  GET /v4/settings/records/constructionTypes  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsRecordsConstructionTypesAsyncWithHttpInfo (string contentType, string authorization, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsConstructionTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsConstructionTypes");

            var localVarPath = "/v4/settings/records/constructionTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsConstructionTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Record Expiration Statuses Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        public ResponseSettingValueModelArray V4GetSettingsRecordsExpirationStatuses (string contentType, string authorization, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = V4GetSettingsRecordsExpirationStatusesWithHttpInfo(contentType, authorization, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Record Expiration Statuses Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        public ApiResponse< ResponseSettingValueModelArray > V4GetSettingsRecordsExpirationStatusesWithHttpInfo (string contentType, string authorization, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsExpirationStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsExpirationStatuses");

            var localVarPath = "/v4/settings/records/expirationStatuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsExpirationStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Record Expiration Statuses Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsRecordsExpirationStatusesAsync (string contentType, string authorization, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = await V4GetSettingsRecordsExpirationStatusesAsyncWithHttpInfo(contentType, authorization, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Record Expiration Statuses Gets the expiration status values for use with records.. **API Endpoint**:  GET /v4/settings/records/expirationStatuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsRecordsExpirationStatusesAsyncWithHttpInfo (string contentType, string authorization, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsExpirationStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsExpirationStatuses");

            var localVarPath = "/v4/settings/records/expirationStatuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsExpirationStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Record Types Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordTypeModelArray</returns>
        public ResponseRecordTypeModelArray V4GetSettingsRecordsTypes (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordTypeModelArray> localVarResponse = V4GetSettingsRecordsTypesWithHttpInfo(contentType, module, offset, limit, isFeeEstimate, action, expand, filterName, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Record Types Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordTypeModelArray</returns>
        public ApiResponse< ResponseRecordTypeModelArray > V4GetSettingsRecordsTypesWithHttpInfo (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypes");
            // verify the required parameter 'module' is set
            if (module == null)
                throw new ApiException(400, "Missing required parameter 'module' when calling SettingsRecordsApi->V4GetSettingsRecordsTypes");

            var localVarPath = "/v4/settings/records/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (isFeeEstimate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFeeEstimate", isFeeEstimate)); // query parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (filterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterName", filterName)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordTypeModelArray)));
        }

        /// <summary>
        /// Get All Record Types Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordTypeModelArray> V4GetSettingsRecordsTypesAsync (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordTypeModelArray> localVarResponse = await V4GetSettingsRecordsTypesAsyncWithHttpInfo(contentType, module, offset, limit, isFeeEstimate, action, expand, filterName, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Record Types Gets predefined record types. **API Endpoint**:  GET /v4/settings/records/types  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="module">Filter by module.</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="isFeeEstimate">Filter by whether or not it is a fee estimate. (optional)</param>
        /// <param name="action">Filter by action associated with the record type. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="filterName">Filter by record type filter name. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordTypeModelArray>> V4GetSettingsRecordsTypesAsyncWithHttpInfo (string contentType, string module, long? offset = null, long? limit = null, bool? isFeeEstimate = null, string action = null, string expand = null, string filterName = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypes");
            // verify the required parameter 'module' is set
            if (module == null)
                throw new ApiException(400, "Missing required parameter 'module' when calling SettingsRecordsApi->V4GetSettingsRecordsTypes");

            var localVarPath = "/v4/settings/records/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (module != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "module", module)); // query parameter
            if (isFeeEstimate != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isFeeEstimate", isFeeEstimate)); // query parameter
            if (action != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "action", action)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (filterName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filterName", filterName)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordTypeModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Type Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetSettingsRecordsTypesIdCustomForms (string contentType, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetSettingsRecordsTypesIdCustomFormsWithHttpInfo(contentType, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Type Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetSettingsRecordsTypesIdCustomFormsWithHttpInfo (string contentType, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomForms");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomForms");

            var localVarPath = "/v4/settings/records/types/{id}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Type Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetSettingsRecordsTypesIdCustomFormsAsync (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetSettingsRecordsTypesIdCustomFormsAsyncWithHttpInfo(contentType, authorization, id, fields: fields, lang: lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Type Gets the metadata of custom forms for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization"></param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetSettingsRecordsTypesIdCustomFormsAsyncWithHttpInfo(string contentType, string authorization, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomFormsAsync");

            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomFormsAsync");// verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomFormsAsync");


            var localVarPath = "/v4/settings/records/types/{id}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Type Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        public ResponseCustomTableMetadataModelArray V4GetSettingsRecordsTypesIdCustomTables (string contentType, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = V4GetSettingsRecordsTypesIdCustomTablesWithHttpInfo(contentType, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Type Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        public ApiResponse< ResponseCustomTableMetadataModelArray > V4GetSettingsRecordsTypesIdCustomTablesWithHttpInfo (string contentType, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomTables");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomTables");

            var localVarPath = "/v4/settings/records/types/{id}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Type Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetSettingsRecordsTypesIdCustomTablesAsync (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = await V4GetSettingsRecordsTypesIdCustomTablesAsyncWithHttpInfo(contentType, authorization, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Type Gets the metadata of all custom tables for a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="id">The id of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetSettingsRecordsTypesIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomTablesAsync");
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomTablesAsync");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdCustomTablesAsync");

            var localVarPath = "/v4/settings/records/types/{id}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get All Fee Schedules for Record Type Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseSettingValueModelArray</returns>
        public ResponseSettingValueModelArray V4GetSettingsRecordsTypesIdFeesSchedules (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = V4GetSettingsRecordsTypesIdFeesSchedulesWithHttpInfo(contentType, authorization, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Fee Schedules for Record Type Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSettingValueModelArray</returns>
        public ApiResponse< ResponseSettingValueModelArray > V4GetSettingsRecordsTypesIdFeesSchedulesWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdFeesSchedules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdFeesSchedules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdFeesSchedules");

            var localVarPath = "/v4/settings/records/types/{id}/fees/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdFeesSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Fee Schedules for Record Type Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSettingValueModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSettingValueModelArray> V4GetSettingsRecordsTypesIdFeesSchedulesAsync (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSettingValueModelArray> localVarResponse = await V4GetSettingsRecordsTypesIdFeesSchedulesAsyncWithHttpInfo(contentType, authorization, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Fee Schedules for Record Type Gets the types of available fee schedules. **API Endpoint**:  GET /v4/settings/records/types/{id}/fees/schedules  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSettingValueModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSettingValueModelArray>> V4GetSettingsRecordsTypesIdFeesSchedulesAsyncWithHttpInfo (string contentType, string authorization, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdFeesSchedules");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdFeesSchedules");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdFeesSchedules");

            var localVarPath = "/v4/settings/records/types/{id}/fees/schedules";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdFeesSchedules", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSettingValueModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSettingValueModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSettingValueModelArray)));
        }

        /// <summary>
        /// Get All Statuses for Record Type Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordStatusModelArray</returns>
        public ResponseRecordStatusModelArray V4GetSettingsRecordsTypesIdStatuses (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseRecordStatusModelArray> localVarResponse = V4GetSettingsRecordsTypesIdStatusesWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Statuses for Record Type Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordStatusModelArray</returns>
        public ApiResponse< ResponseRecordStatusModelArray > V4GetSettingsRecordsTypesIdStatusesWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdStatuses");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdStatuses");

            var localVarPath = "/v4/settings/records/types/{id}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordStatusModelArray)));
        }

        /// <summary>
        /// Get All Statuses for Record Type Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordStatusModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordStatusModelArray> V4GetSettingsRecordsTypesIdStatusesAsync (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseRecordStatusModelArray> localVarResponse = await V4GetSettingsRecordsTypesIdStatusesAsyncWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Statuses for Record Type Gets the status values for use with a specified record type. **API Endpoint**:  GET /v4/settings/records/types/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the record type to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordStatusModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordStatusModelArray>> V4GetSettingsRecordsTypesIdStatusesAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdStatuses");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesIdStatuses");

            var localVarPath = "/v4/settings/records/types/{id}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesIdStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordStatusModelArray)));
        }

        /// <summary>
        /// Get All Asset Types for Record Type Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordTypeAssetTypeModelArray</returns>
        public ResponseRecordTypeAssetTypeModelArray V4GetSettingsRecordsTypesRecordTypeIdAssetTypes (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordTypeAssetTypeModelArray> localVarResponse = V4GetSettingsRecordsTypesRecordTypeIdAssetTypesWithHttpInfo(contentType, recordTypeId, group, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Asset Types for Record Type Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordTypeAssetTypeModelArray</returns>
        public ApiResponse< ResponseRecordTypeAssetTypeModelArray > V4GetSettingsRecordsTypesRecordTypeIdAssetTypesWithHttpInfo (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesRecordTypeIdAssetTypes");
            // verify the required parameter 'recordTypeId' is set
            if (recordTypeId == null)
                throw new ApiException(400, "Missing required parameter 'recordTypeId' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesRecordTypeIdAssetTypes");

            var localVarPath = "/v4/settings/records/types/{recordTypeId}/assetTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordTypeId != null) localVarPathParams.Add("recordTypeId", this.Configuration.ApiClient.ParameterToString(recordTypeId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesRecordTypeIdAssetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordTypeAssetTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordTypeAssetTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordTypeAssetTypeModelArray)));
        }

        /// <summary>
        /// Get All Asset Types for Record Type Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordTypeAssetTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordTypeAssetTypeModelArray> V4GetSettingsRecordsTypesRecordTypeIdAssetTypesAsync (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordTypeAssetTypeModelArray> localVarResponse = await V4GetSettingsRecordsTypesRecordTypeIdAssetTypesAsyncWithHttpInfo(contentType, recordTypeId, group, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Asset Types for Record Type Returns all asset types for a given record type. **API Endpoint**:  GET /v4/settings/records/types/{recordTypeId}/assetTypes  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="recordTypeId">The id of the record type to fetch.</param>
        /// <param name="group">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordTypeAssetTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordTypeAssetTypeModelArray>> V4GetSettingsRecordsTypesRecordTypeIdAssetTypesAsyncWithHttpInfo (string contentType, string recordTypeId, string group = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesRecordTypeIdAssetTypes");
            // verify the required parameter 'recordTypeId' is set
            if (recordTypeId == null)
                throw new ApiException(400, "Missing required parameter 'recordTypeId' when calling SettingsRecordsApi->V4GetSettingsRecordsTypesRecordTypeIdAssetTypes");

            var localVarPath = "/v4/settings/records/types/{recordTypeId}/assetTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordTypeId != null) localVarPathParams.Add("recordTypeId", this.Configuration.ApiClient.ParameterToString(recordTypeId)); // path parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsRecordsTypesRecordTypeIdAssetTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordTypeAssetTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordTypeAssetTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordTypeAssetTypeModelArray)));
        }

    }
}
