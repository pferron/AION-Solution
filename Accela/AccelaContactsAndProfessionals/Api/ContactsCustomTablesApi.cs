/* 
 * Contacts and Professionals
 *
 * The Contacts and Professionals APIs enable apps to manage reference contacts and licensed professionals.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaContactsAndProfessionals.Client;
using AccelaContactsAndProfessionals.Model;

namespace AccelaContactsAndProfessionals.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        ResponseTableModelArray V4GetContactsContactIdCustomTables (string contentType, string authorization, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        ApiResponse<ResponseTableModelArray> V4GetContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetContactsContactIdCustomTablesMeta (string contentType, string authorization, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetContactsContactIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetContactsContactIdCustomTablesTableIdMeta (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetContactsContactIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutContactsContactIdCustomTables (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null);

        /// <summary>
        /// Update Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        System.Threading.Tasks.Task<ResponseTableModelArray> V4GetContactsContactIdCustomTablesAsync (string contentType, string authorization, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsContactIdCustomTablesMetaAsync (string contentType, string authorization, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsContactIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsContactIdCustomTablesTableIdMetaAsync (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table Metadata for Contact
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsContactIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutContactsContactIdCustomTablesAsync (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null);

        /// <summary>
        /// Update Custom Tables for Contact
        /// </summary>
        /// <remarks>
        /// Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsCustomTablesApi : IContactsCustomTablesApi
    {
        private AccelaContactsAndProfessionals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsCustomTablesApi(String basePath)
        {
            this.Configuration = new AccelaContactsAndProfessionals.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsCustomTablesApi(AccelaContactsAndProfessionals.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaContactsAndProfessionals.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaContactsAndProfessionals.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaContactsAndProfessionals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Custom Tables for Contact Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        public ResponseTableModelArray V4GetContactsContactIdCustomTables (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = V4GetContactsContactIdCustomTablesWithHttpInfo(contentType, authorization, contactId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables for Contact Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        public ApiResponse< ResponseTableModelArray > V4GetContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTables");

            var localVarPath = "/v4/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables for Contact Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTableModelArray> V4GetContactsContactIdCustomTablesAsync (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = await V4GetContactsContactIdCustomTablesAsyncWithHttpInfo(contentType, authorization, contactId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables for Contact Gets the custom tables associated with the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTables");

            var localVarPath = "/v4/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Contact Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetContactsContactIdCustomTablesMeta (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetContactsContactIdCustomTablesMetaWithHttpInfo(contentType, authorization, contactId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Contact Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetContactsContactIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesMeta");

            var localVarPath = "/v4/contacts/{contactId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Contact Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsContactIdCustomTablesMetaAsync (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetContactsContactIdCustomTablesMetaAsyncWithHttpInfo(contentType, authorization, contactId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables Metadata for Contact Gets the metadata associated with all custom tables for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsContactIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesMeta");

            var localVarPath = "/v4/contacts/{contactId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get Custom Table Metadata for Contact Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetContactsContactIdCustomTablesTableIdMeta (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetContactsContactIdCustomTablesTableIdMetaWithHttpInfo(contentType, authorization, contactId, tableId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Table Metadata for Contact Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetContactsContactIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/contacts/{contactId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get Custom Table Metadata for Contact Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetContactsContactIdCustomTablesTableIdMetaAsync (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetContactsContactIdCustomTablesTableIdMetaAsyncWithHttpInfo(contentType, authorization, contactId, tableId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Table Metadata for Contact Gets the metadata associated with the specified custom table for the contact. **API Endpoint**:  GET /v4/contacts/{contactId}/customTables/{tableId}/meta  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetContactsContactIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, long? contactId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling ContactsCustomTablesApi->V4GetContactsContactIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/contacts/{contactId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Update Custom Tables for Contact Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutContactsContactIdCustomTables (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutContactsContactIdCustomTablesWithHttpInfo(contentType, authorization, contactId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Tables for Contact Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutContactsContactIdCustomTablesWithHttpInfo (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");

            var localVarPath = "/v4/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Custom Tables for Contact Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutContactsContactIdCustomTablesAsync (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutContactsContactIdCustomTablesAsyncWithHttpInfo(contentType, authorization, contactId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Custom Tables for Contact Updates a custom table for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/customTables  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Custom tables to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutContactsContactIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? contactId, List<TableModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsCustomTablesApi->V4PutContactsContactIdCustomTables");

            var localVarPath = "/v4/contacts/{contactId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutContactsContactIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
