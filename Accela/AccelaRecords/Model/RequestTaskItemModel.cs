/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// RequestTaskItemModel
    /// </summary>
    [DataContract]
    public partial class RequestTaskItemModel :  IEquatable<RequestTaskItemModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the item is billable.
        /// </summary>
        /// <value>Indicates whether or not the item is billable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the item is billable.
        /// </summary>
        /// <value>Indicates whether or not the item is billable.</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public BillableEnum? Billable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestTaskItemModel" /> class.
        /// </summary>
        /// <param name="actionbyDepartment">actionbyDepartment.</param>
        /// <param name="actionbyUser">actionbyUser.</param>
        /// <param name="approval">Used to indicate supervisory approval of an adhoc task..</param>
        /// <param name="assignEmailDisplay">Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address..</param>
        /// <param name="billable">Indicates whether or not the item is billable..</param>
        /// <param name="comment">Comments or notes about the current context..</param>
        /// <param name="commentDisplay">Indicates whether or not Accela Citizen Access users can view the inspection results comments. .</param>
        /// <param name="commentPublicVisible">Specifies the type of user who can view the inspection result comments. &lt;br/&gt;\&quot;All ACA Users\&quot; - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. &lt;br/&gt;\&quot;Record Creator Only\&quot; - the user who created the record can see the comments for the inspection results. &lt;br/&gt;\&quot;Record Creator and Licensed Professional\&quot; - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results..</param>
        /// <param name="dueDate">The desired completion date of the task..</param>
        /// <param name="endTime">The time the workflow task was completed..</param>
        /// <param name="hoursSpent">Number of hours used for a workflow or workflow task..</param>
        /// <param name="overTime">A labor cost factor that indicates time worked beyond a worker&#39;s regular working hours..</param>
        /// <param name="startTime">The time the workflow task started..</param>
        /// <param name="status">status.</param>
        /// <param name="statusDate">The date when the current status changed..</param>
        public RequestTaskItemModel(RecordConditionModelActionbyDepartment actionbyDepartment = default(RecordConditionModelActionbyDepartment), RecordConditionModelActionbyUser actionbyUser = default(RecordConditionModelActionbyUser), string approval = default(string), string assignEmailDisplay = default(string), BillableEnum? billable = default(BillableEnum?), string comment = default(string), string commentDisplay = default(string), List<string> commentPublicVisible = default(List<string>), DateTime? dueDate = default(DateTime?), DateTime? endTime = default(DateTime?), double? hoursSpent = default(double?), string overTime = default(string), DateTime? startTime = default(DateTime?), TaskItemModelStatus status = default(TaskItemModelStatus), DateTime? statusDate = default(DateTime?))
        {
            this.ActionbyDepartment = actionbyDepartment;
            this.ActionbyUser = actionbyUser;
            this.Approval = approval;
            this.AssignEmailDisplay = assignEmailDisplay;
            this.Billable = billable;
            this.Comment = comment;
            this.CommentDisplay = commentDisplay;
            this.CommentPublicVisible = commentPublicVisible;
            this.DueDate = dueDate;
            this.EndTime = endTime;
            this.HoursSpent = hoursSpent;
            this.OverTime = overTime;
            this.StartTime = startTime;
            this.Status = status;
            this.StatusDate = statusDate;
        }
        
        /// <summary>
        /// Gets or Sets ActionbyDepartment
        /// </summary>
        [DataMember(Name="actionbyDepartment", EmitDefaultValue=false)]
        public RecordConditionModelActionbyDepartment ActionbyDepartment { get; set; }

        /// <summary>
        /// Gets or Sets ActionbyUser
        /// </summary>
        [DataMember(Name="actionbyUser", EmitDefaultValue=false)]
        public RecordConditionModelActionbyUser ActionbyUser { get; set; }

        /// <summary>
        /// Used to indicate supervisory approval of an adhoc task.
        /// </summary>
        /// <value>Used to indicate supervisory approval of an adhoc task.</value>
        [DataMember(Name="approval", EmitDefaultValue=false)]
        public string Approval { get; set; }

        /// <summary>
        /// Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.
        /// </summary>
        /// <value>Indicates whether or not to display the agency employeeâ€™s email address in ACA. Public users can then click the e-mail hyperlink and send an e-mail to the agency employee. â€œYâ€ : display the email address. â€œNâ€ : hide the email address.</value>
        [DataMember(Name="assignEmailDisplay", EmitDefaultValue=false)]
        public string AssignEmailDisplay { get; set; }


        /// <summary>
        /// Comments or notes about the current context.
        /// </summary>
        /// <value>Comments or notes about the current context.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Indicates whether or not Accela Citizen Access users can view the inspection results comments. 
        /// </summary>
        /// <value>Indicates whether or not Accela Citizen Access users can view the inspection results comments. </value>
        [DataMember(Name="commentDisplay", EmitDefaultValue=false)]
        public string CommentDisplay { get; set; }

        /// <summary>
        /// Specifies the type of user who can view the inspection result comments. &lt;br/&gt;\&quot;All ACA Users\&quot; - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. &lt;br/&gt;\&quot;Record Creator Only\&quot; - the user who created the record can see the comments for the inspection results. &lt;br/&gt;\&quot;Record Creator and Licensed Professional\&quot; - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.
        /// </summary>
        /// <value>Specifies the type of user who can view the inspection result comments. &lt;br/&gt;\&quot;All ACA Users\&quot; - Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. &lt;br/&gt;\&quot;Record Creator Only\&quot; - the user who created the record can see the comments for the inspection results. &lt;br/&gt;\&quot;Record Creator and Licensed Professional\&quot; - The user who created the record and the licensed professional associated with the record can see the comments for the inspection results.</value>
        [DataMember(Name="commentPublicVisible", EmitDefaultValue=false)]
        public List<string> CommentPublicVisible { get; set; }

        /// <summary>
        /// The desired completion date of the task.
        /// </summary>
        /// <value>The desired completion date of the task.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The time the workflow task was completed.
        /// </summary>
        /// <value>The time the workflow task was completed.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Number of hours used for a workflow or workflow task.
        /// </summary>
        /// <value>Number of hours used for a workflow or workflow task.</value>
        [DataMember(Name="hoursSpent", EmitDefaultValue=false)]
        public double? HoursSpent { get; set; }

        /// <summary>
        /// A labor cost factor that indicates time worked beyond a worker&#39;s regular working hours.
        /// </summary>
        /// <value>A labor cost factor that indicates time worked beyond a worker&#39;s regular working hours.</value>
        [DataMember(Name="overTime", EmitDefaultValue=false)]
        public string OverTime { get; set; }

        /// <summary>
        /// The time the workflow task started.
        /// </summary>
        /// <value>The time the workflow task started.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TaskItemModelStatus Status { get; set; }

        /// <summary>
        /// The date when the current status changed.
        /// </summary>
        /// <value>The date when the current status changed.</value>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public DateTime? StatusDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestTaskItemModel {\n");
            sb.Append("  ActionbyDepartment: ").Append(ActionbyDepartment).Append("\n");
            sb.Append("  ActionbyUser: ").Append(ActionbyUser).Append("\n");
            sb.Append("  Approval: ").Append(Approval).Append("\n");
            sb.Append("  AssignEmailDisplay: ").Append(AssignEmailDisplay).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CommentDisplay: ").Append(CommentDisplay).Append("\n");
            sb.Append("  CommentPublicVisible: ").Append(CommentPublicVisible).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  HoursSpent: ").Append(HoursSpent).Append("\n");
            sb.Append("  OverTime: ").Append(OverTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestTaskItemModel);
        }

        /// <summary>
        /// Returns true if RequestTaskItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestTaskItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestTaskItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionbyDepartment == input.ActionbyDepartment ||
                    (this.ActionbyDepartment != null &&
                    this.ActionbyDepartment.Equals(input.ActionbyDepartment))
                ) && 
                (
                    this.ActionbyUser == input.ActionbyUser ||
                    (this.ActionbyUser != null &&
                    this.ActionbyUser.Equals(input.ActionbyUser))
                ) && 
                (
                    this.Approval == input.Approval ||
                    (this.Approval != null &&
                    this.Approval.Equals(input.Approval))
                ) && 
                (
                    this.AssignEmailDisplay == input.AssignEmailDisplay ||
                    (this.AssignEmailDisplay != null &&
                    this.AssignEmailDisplay.Equals(input.AssignEmailDisplay))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CommentDisplay == input.CommentDisplay ||
                    (this.CommentDisplay != null &&
                    this.CommentDisplay.Equals(input.CommentDisplay))
                ) && 
                (
                    this.CommentPublicVisible == input.CommentPublicVisible ||
                    this.CommentPublicVisible != null &&
                    this.CommentPublicVisible.SequenceEqual(input.CommentPublicVisible)
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.HoursSpent == input.HoursSpent ||
                    (this.HoursSpent != null &&
                    this.HoursSpent.Equals(input.HoursSpent))
                ) && 
                (
                    this.OverTime == input.OverTime ||
                    (this.OverTime != null &&
                    this.OverTime.Equals(input.OverTime))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionbyDepartment != null)
                    hashCode = hashCode * 59 + this.ActionbyDepartment.GetHashCode();
                if (this.ActionbyUser != null)
                    hashCode = hashCode * 59 + this.ActionbyUser.GetHashCode();
                if (this.Approval != null)
                    hashCode = hashCode * 59 + this.Approval.GetHashCode();
                if (this.AssignEmailDisplay != null)
                    hashCode = hashCode * 59 + this.AssignEmailDisplay.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CommentDisplay != null)
                    hashCode = hashCode * 59 + this.CommentDisplay.GetHashCode();
                if (this.CommentPublicVisible != null)
                    hashCode = hashCode * 59 + this.CommentPublicVisible.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.HoursSpent != null)
                    hashCode = hashCode * 59 + this.HoursSpent.GetHashCode();
                if (this.OverTime != null)
                    hashCode = hashCode * 59 + this.OverTime.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
