/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsCustomTablesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Custom Tables for Record
        /// </summary>
        /// <remarks>
        /// Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        ResponseTableModelArray V4GetRecordsRecordIdCustomTables (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Record
        /// </summary>
        /// <remarks>
        /// Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        ApiResponse<ResponseTableModelArray> V4GetRecordsRecordIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdCustomTablesMeta (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        ApiResponse<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get Record Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        ResponseTableModelArray V4GetRecordsRecordIdCustomTablesTableId (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        ApiResponse<ResponseTableModelArray> V4GetRecordsRecordIdCustomTablesTableIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdCustomTablesTableIdMeta (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        ApiResponse<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutRecordsRecordIdCustomTables (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutRecordsRecordIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Custom Tables for Record
        /// </summary>
        /// <remarks>
        /// Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        System.Threading.Tasks.Task<ResponseTableModelArray> V4GetRecordsRecordIdCustomTablesAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables for Record
        /// </summary>
        /// <remarks>
        /// Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetRecordsRecordIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdCustomTablesMetaAsync (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get Record Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        System.Threading.Tasks.Task<ResponseTableModelArray> V4GetRecordsRecordIdCustomTablesTableIdAsync (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Custom Table
        /// </summary>
        /// <remarks>
        /// Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetRecordsRecordIdCustomTablesTableIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Get Custom Table Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdCustomTablesTableIdMetaAsync (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);

        /// <summary>
        /// Get Custom Table Metadata for Record
        /// </summary>
        /// <remarks>
        /// Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdCustomTablesAsync (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null);

        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdCustomTablesListAsync(string contentType, string authorization, string recordId, string body, string fields = null, string lang = null);



        /// <summary>
        /// Update Record Custom Tables
        /// </summary>
        /// <remarks>
        /// Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null);
        
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdCustomTablesListAsyncWithHttpInfo (string contentType, string authorization, string recordId, string body, string fields = null, string lang = null);



        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsCustomTablesApi : IRecordsCustomTablesApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsCustomTablesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsCustomTablesApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsCustomTablesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsCustomTablesApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Custom Tables for Record Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        public ResponseTableModelArray V4GetRecordsRecordIdCustomTables (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = V4GetRecordsRecordIdCustomTablesWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables for Record Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        public ApiResponse< ResponseTableModelArray > V4GetRecordsRecordIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables for Record Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTableModelArray> V4GetRecordsRecordIdCustomTablesAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = await V4GetRecordsRecordIdCustomTablesAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables for Record Gets all the custom tables associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetRecordsRecordIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        public ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdCustomTablesMeta (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = V4GetRecordsRecordIdCustomTablesMetaWithHttpInfo(contentType, authorization, xAccelaAppid, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        public ApiResponse< ResponseCustomFormSubgroupModelArray > V4GetRecordsRecordIdCustomTablesMetaWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");

            var localVarPath = "/v4/records/{recordId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdCustomTablesMetaAsync (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = await V4GetRecordsRecordIdCustomTablesMetaAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, recordId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables Metadata for Record Gets detailed data associated with the custom tables for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdCustomTablesMetaAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesMeta");

            var localVarPath = "/v4/records/{recordId}/customTables/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTablesMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get Record Custom Table Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTableModelArray</returns>
        public ResponseTableModelArray V4GetRecordsRecordIdCustomTablesTableId (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = V4GetRecordsRecordIdCustomTablesTableIdWithHttpInfo(contentType, authorization, xAccelaAppid, recordId, tableId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Record Custom Table Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTableModelArray</returns>
        public ApiResponse< ResponseTableModelArray > V4GetRecordsRecordIdCustomTablesTableIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");

            var localVarPath = "/v4/records/{recordId}/customTables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTablesTableId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get Record Custom Table Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTableModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTableModelArray> V4GetRecordsRecordIdCustomTablesTableIdAsync (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTableModelArray> localVarResponse = await V4GetRecordsRecordIdCustomTablesTableIdAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, recordId, tableId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Record Custom Table Gets the requested custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}  **Scope**:  records  **App Type**:  All  **Authorization Type**:   No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTableModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTableModelArray>> V4GetRecordsRecordIdCustomTablesTableIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableId");

            var localVarPath = "/v4/records/{recordId}/customTables/{tableId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTablesTableId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTableModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTableModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTableModelArray)));
        }

        /// <summary>
        /// Get Custom Table Metadata for Record Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        public ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdCustomTablesTableIdMeta (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = V4GetRecordsRecordIdCustomTablesTableIdMetaWithHttpInfo(contentType, authorization, xAccelaAppid, recordId, tableId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Custom Table Metadata for Record Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        public ApiResponse< ResponseCustomFormSubgroupModelArray > V4GetRecordsRecordIdCustomTablesTableIdMetaWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/records/{recordId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get Custom Table Metadata for Record Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdCustomTablesTableIdMetaAsync (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = await V4GetRecordsRecordIdCustomTablesTableIdMetaAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, recordId, tableId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Custom Table Metadata for Record Gets the detailed data associated with the specified custom table for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/customTables/{tableId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  No authorization required  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="tableId">The ID of the custom table to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdCustomTablesTableIdMetaAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string recordId, string tableId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");
            // verify the required parameter 'tableId' is set
            if (tableId == null)
                throw new ApiException(400, "Missing required parameter 'tableId' when calling RecordsCustomTablesApi->V4GetRecordsRecordIdCustomTablesTableIdMeta");

            var localVarPath = "/v4/records/{recordId}/customTables/{tableId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (tableId != null) localVarPathParams.Add("tableId", this.Configuration.ApiClient.ParameterToString(tableId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdCustomTablesTableIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutRecordsRecordIdCustomTables (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutRecordsRecordIdCustomTablesWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutRecordsRecordIdCustomTablesWithHttpInfo (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Record Custom Tables Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdCustomTablesAsync (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutRecordsRecordIdCustomTablesAsyncWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;

        }
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdCustomTablesListAsync(string contentType, string authorization, string recordId, string body, string fields = null, string lang = null)
        {
            ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutRecordsRecordIdCustomTablesListAsyncWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
            return localVarResponse.Data;

        }
        /// <summary>
        /// Update Record Custom Tables Updates the custom table for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/customTables   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">Custom table data to be updated.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, string recordId, List<TableModel> body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdCustomTablesListAsyncWithHttpInfo(string contentType, string authorization, string recordId, string body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsCustomTablesApi->V4PutRecordsRecordIdCustomTables");

            var localVarPath = "/v4/records/{recordId}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(string))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdCustomTablesList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }
    }
}
