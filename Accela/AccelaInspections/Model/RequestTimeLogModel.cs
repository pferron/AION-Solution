/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// RequestTimeLogModel
    /// </summary>
    [DataContract]
    public partial class RequestTimeLogModel :  IEquatable<RequestTimeLogModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the item is billable.
        /// </summary>
        /// <value>Indicates whether or not the item is billable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the item is billable.
        /// </summary>
        /// <value>Indicates whether or not the item is billable.</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public BillableEnum? Billable { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestTimeLogModel" /> class.
        /// </summary>
        /// <param name="billable">Indicates whether or not the item is billable..</param>
        /// <param name="cost">The calculated cost of the entry..</param>
        /// <param name="createBy">The unique user id of the individual that created this entry..</param>
        /// <param name="createDate"> The date the entry was created..</param>
        /// <param name="duration">The duration of the entry, using the format hh:mm..</param>
        /// <param name="endTime">The end time for the time accounting entry..</param>
        /// <param name="entityId">The unique ID of the entity or record..</param>
        /// <param name="entityType">The type of entity, such as \&quot;Record\&quot;..</param>
        /// <param name="group">group.</param>
        /// <param name="id">The time accounting entry&#39;s system id assigned by the Civic Platform server..</param>
        /// <param name="percent">The percentage point for calculating the cost. 50 stands for 50%, 80 stands for 80%, and 150 stands for 150%..</param>
        /// <param name="rate">The cost rate..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="startTime">The start time of the time accounting entry..</param>
        /// <param name="totalMinutes">The total number of billable minutes..</param>
        /// <param name="type">type.</param>
        /// <param name="userId">The userid assigned to the time accounting entry..</param>
        public RequestTimeLogModel(BillableEnum? billable = default(BillableEnum?), double? cost = default(double?), string createBy = default(string), DateTime? createDate = default(DateTime?), string duration = default(string), string endTime = default(string), string entityId = default(string), string entityType = default(string), TimeLogModelGroup group = default(TimeLogModelGroup), long? id = default(long?), double? percent = default(double?), double? rate = default(double?), RecordIdModel recordId = default(RecordIdModel), string serviceProviderCode = default(string), string startTime = default(string), long? totalMinutes = default(long?), TimeLogModelType type = default(TimeLogModelType), string userId = default(string))
        {
            this.Billable = billable;
            this.Cost = cost;
            this.CreateBy = createBy;
            this.CreateDate = createDate;
            this.Duration = duration;
            this.EndTime = endTime;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.Group = group;
            this.Id = id;
            this.Percent = percent;
            this.Rate = rate;
            this.RecordId = recordId;
            this.ServiceProviderCode = serviceProviderCode;
            this.StartTime = startTime;
            this.TotalMinutes = totalMinutes;
            this.Type = type;
            this.UserId = userId;
        }
        

        /// <summary>
        /// The calculated cost of the entry.
        /// </summary>
        /// <value>The calculated cost of the entry.</value>
        [DataMember(Name="cost", EmitDefaultValue=false)]
        public double? Cost { get; set; }

        /// <summary>
        /// The unique user id of the individual that created this entry.
        /// </summary>
        /// <value>The unique user id of the individual that created this entry.</value>
        [DataMember(Name="createBy", EmitDefaultValue=false)]
        public string CreateBy { get; set; }

        /// <summary>
        ///  The date the entry was created.
        /// </summary>
        /// <value> The date the entry was created.</value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// The duration of the entry, using the format hh:mm.
        /// </summary>
        /// <value>The duration of the entry, using the format hh:mm.</value>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// The end time for the time accounting entry.
        /// </summary>
        /// <value>The end time for the time accounting entry.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// The unique ID of the entity or record.
        /// </summary>
        /// <value>The unique ID of the entity or record.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The type of entity, such as \&quot;Record\&quot;.
        /// </summary>
        /// <value>The type of entity, such as \&quot;Record\&quot;.</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public TimeLogModelGroup Group { get; set; }

        /// <summary>
        /// The time accounting entry&#39;s system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The time accounting entry&#39;s system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The percentage point for calculating the cost. 50 stands for 50%, 80 stands for 80%, and 150 stands for 150%.
        /// </summary>
        /// <value>The percentage point for calculating the cost. 50 stands for 50%, 80 stands for 80%, and 150 stands for 150%.</value>
        [DataMember(Name="percent", EmitDefaultValue=false)]
        public double? Percent { get; set; }

        /// <summary>
        /// The cost rate.
        /// </summary>
        /// <value>The cost rate.</value>
        [DataMember(Name="rate", EmitDefaultValue=false)]
        public double? Rate { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// The start time of the time accounting entry.
        /// </summary>
        /// <value>The start time of the time accounting entry.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// The total number of billable minutes.
        /// </summary>
        /// <value>The total number of billable minutes.</value>
        [DataMember(Name="totalMinutes", EmitDefaultValue=false)]
        public long? TotalMinutes { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TimeLogModelType Type { get; set; }

        /// <summary>
        /// The userid assigned to the time accounting entry.
        /// </summary>
        /// <value>The userid assigned to the time accounting entry.</value>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestTimeLogModel {\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Cost: ").Append(Cost).Append("\n");
            sb.Append("  CreateBy: ").Append(CreateBy).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Percent: ").Append(Percent).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  TotalMinutes: ").Append(TotalMinutes).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestTimeLogModel);
        }

        /// <summary>
        /// Returns true if RequestTimeLogModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestTimeLogModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestTimeLogModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Cost == input.Cost ||
                    (this.Cost != null &&
                    this.Cost.Equals(input.Cost))
                ) && 
                (
                    this.CreateBy == input.CreateBy ||
                    (this.CreateBy != null &&
                    this.CreateBy.Equals(input.CreateBy))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Duration == input.Duration ||
                    (this.Duration != null &&
                    this.Duration.Equals(input.Duration))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Percent == input.Percent ||
                    (this.Percent != null &&
                    this.Percent.Equals(input.Percent))
                ) && 
                (
                    this.Rate == input.Rate ||
                    (this.Rate != null &&
                    this.Rate.Equals(input.Rate))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.TotalMinutes == input.TotalMinutes ||
                    (this.TotalMinutes != null &&
                    this.TotalMinutes.Equals(input.TotalMinutes))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Cost != null)
                    hashCode = hashCode * 59 + this.Cost.GetHashCode();
                if (this.CreateBy != null)
                    hashCode = hashCode * 59 + this.CreateBy.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Duration != null)
                    hashCode = hashCode * 59 + this.Duration.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Percent != null)
                    hashCode = hashCode * 59 + this.Percent.GetHashCode();
                if (this.Rate != null)
                    hashCode = hashCode * 59 + this.Rate.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.TotalMinutes != null)
                    hashCode = hashCode * 59 + this.TotalMinutes.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
