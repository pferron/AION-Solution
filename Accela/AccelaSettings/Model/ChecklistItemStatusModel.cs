/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// ChecklistItemStatusModel
    /// </summary>
    [DataContract]
    public partial class ChecklistItemStatusModel :  IEquatable<ChecklistItemStatusModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChecklistItemStatusModel" /> class.
        /// </summary>
        /// <param name="criticalScore"> The critical score for the status of a guidesheet item that is a Major Violation/Critical Item..</param>
        /// <param name="displayOrder"> The order of the item in comparison to the other items..</param>
        /// <param name="lhsType"> Indicates whether or not the checklist is for LHS (Life/Health/Safety). For LHS-type items, the maximum point value becomes the default score..</param>
        /// <param name="majorViolation"> The number of major violations..</param>
        /// <param name="nonCriticalScore"> The non-critical score for the status of a guidesheet item that is not a Major Violation/Critical Item..</param>
        /// <param name="resultType"> The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app..</param>
        /// <param name="text">The checklist status name..</param>
        /// <param name="value">The checklist status value..</param>
        public ChecklistItemStatusModel(long? criticalScore = default(long?), long? displayOrder = default(long?), string lhsType = default(string), string majorViolation = default(string), long? nonCriticalScore = default(long?), string resultType = default(string), string text = default(string), string value = default(string))
        {
            this.CriticalScore = criticalScore;
            this.DisplayOrder = displayOrder;
            this.LhsType = lhsType;
            this.MajorViolation = majorViolation;
            this.NonCriticalScore = nonCriticalScore;
            this.ResultType = resultType;
            this.Text = text;
            this.Value = value;
        }
        
        /// <summary>
        ///  The critical score for the status of a guidesheet item that is a Major Violation/Critical Item.
        /// </summary>
        /// <value> The critical score for the status of a guidesheet item that is a Major Violation/Critical Item.</value>
        [DataMember(Name="criticalScore", EmitDefaultValue=false)]
        public long? CriticalScore { get; set; }

        /// <summary>
        ///  The order of the item in comparison to the other items.
        /// </summary>
        /// <value> The order of the item in comparison to the other items.</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        ///  Indicates whether or not the checklist is for LHS (Life/Health/Safety). For LHS-type items, the maximum point value becomes the default score.
        /// </summary>
        /// <value> Indicates whether or not the checklist is for LHS (Life/Health/Safety). For LHS-type items, the maximum point value becomes the default score.</value>
        [DataMember(Name="lhsType", EmitDefaultValue=false)]
        public string LhsType { get; set; }

        /// <summary>
        ///  The number of major violations.
        /// </summary>
        /// <value> The number of major violations.</value>
        [DataMember(Name="majorViolation", EmitDefaultValue=false)]
        public string MajorViolation { get; set; }

        /// <summary>
        ///  The non-critical score for the status of a guidesheet item that is not a Major Violation/Critical Item.
        /// </summary>
        /// <value> The non-critical score for the status of a guidesheet item that is not a Major Violation/Critical Item.</value>
        [DataMember(Name="nonCriticalScore", EmitDefaultValue=false)]
        public long? NonCriticalScore { get; set; }

        /// <summary>
        ///  The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app.
        /// </summary>
        /// <value> The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app.</value>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public string ResultType { get; set; }

        /// <summary>
        /// The checklist status name.
        /// </summary>
        /// <value>The checklist status name.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The checklist status value.
        /// </summary>
        /// <value>The checklist status value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChecklistItemStatusModel {\n");
            sb.Append("  CriticalScore: ").Append(CriticalScore).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  LhsType: ").Append(LhsType).Append("\n");
            sb.Append("  MajorViolation: ").Append(MajorViolation).Append("\n");
            sb.Append("  NonCriticalScore: ").Append(NonCriticalScore).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChecklistItemStatusModel);
        }

        /// <summary>
        /// Returns true if ChecklistItemStatusModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ChecklistItemStatusModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChecklistItemStatusModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CriticalScore == input.CriticalScore ||
                    (this.CriticalScore != null &&
                    this.CriticalScore.Equals(input.CriticalScore))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.LhsType == input.LhsType ||
                    (this.LhsType != null &&
                    this.LhsType.Equals(input.LhsType))
                ) && 
                (
                    this.MajorViolation == input.MajorViolation ||
                    (this.MajorViolation != null &&
                    this.MajorViolation.Equals(input.MajorViolation))
                ) && 
                (
                    this.NonCriticalScore == input.NonCriticalScore ||
                    (this.NonCriticalScore != null &&
                    this.NonCriticalScore.Equals(input.NonCriticalScore))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CriticalScore != null)
                    hashCode = hashCode * 59 + this.CriticalScore.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.LhsType != null)
                    hashCode = hashCode * 59 + this.LhsType.GetHashCode();
                if (this.MajorViolation != null)
                    hashCode = hashCode * 59 + this.MajorViolation.GetHashCode();
                if (this.NonCriticalScore != null)
                    hashCode = hashCode * 59 + this.NonCriticalScore.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
