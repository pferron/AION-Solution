/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaCitizens.Client;
using AccelaCitizens.Model;

namespace AccelaCitizens.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAnnouncementsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Announcements
        /// </summary>
        /// <remarks>
        /// Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseMessageModelArray</returns>
        ResponseMessageModelArray V4GetAnnouncements (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Announcements
        /// </summary>
        /// <remarks>
        /// Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseMessageModelArray</returns>
        ApiResponse<ResponseMessageModelArray> V4GetAnnouncementsWithHttpInfo (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null);
        /// <summary>
        /// Mark Announcements as Read
        /// </summary>
        /// <remarks>
        /// Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutAnnouncementsIdsRead (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Mark Announcements as Read
        /// </summary>
        /// <remarks>
        /// Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutAnnouncementsIdsReadWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Announcements
        /// </summary>
        /// <remarks>
        /// Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseMessageModelArray</returns>
        System.Threading.Tasks.Task<ResponseMessageModelArray> V4GetAnnouncementsAsync (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Announcements
        /// </summary>
        /// <remarks>
        /// Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseMessageModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseMessageModelArray>> V4GetAnnouncementsAsyncWithHttpInfo (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null);
        /// <summary>
        /// Mark Announcements as Read
        /// </summary>
        /// <remarks>
        /// Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutAnnouncementsIdsReadAsync (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Mark Announcements as Read
        /// </summary>
        /// <remarks>
        /// Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutAnnouncementsIdsReadAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AnnouncementsApi : IAnnouncementsApi
    {
        private AccelaCitizens.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnouncementsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AnnouncementsApi(String basePath)
        {
            this.Configuration = new AccelaCitizens.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AnnouncementsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AnnouncementsApi(AccelaCitizens.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaCitizens.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaCitizens.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaCitizens.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Announcements Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseMessageModelArray</returns>
        public ResponseMessageModelArray V4GetAnnouncements (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseMessageModelArray> localVarResponse = V4GetAnnouncementsWithHttpInfo(contentType, authorization, limit, offset, isRead, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Announcements Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseMessageModelArray</returns>
        public ApiResponse< ResponseMessageModelArray > V4GetAnnouncementsWithHttpInfo (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnnouncementsApi->V4GetAnnouncements");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnouncementsApi->V4GetAnnouncements");

            var localVarPath = "/v4/announcements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (isRead != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isRead", isRead)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAnnouncements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseMessageModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseMessageModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseMessageModelArray)));
        }

        /// <summary>
        /// Get All Announcements Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseMessageModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseMessageModelArray> V4GetAnnouncementsAsync (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseMessageModelArray> localVarResponse = await V4GetAnnouncementsAsyncWithHttpInfo(contentType, authorization, limit, offset, isRead, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Announcements Gets all public announcements in the system.    **API Endpoint**:  GET /v4/announcements   **Scope**:  announcements   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="isRead">Filter by whether or not the announcement has been read. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseMessageModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseMessageModelArray>> V4GetAnnouncementsAsyncWithHttpInfo (string contentType, string authorization, long? limit = null, long? offset = null, string isRead = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnnouncementsApi->V4GetAnnouncements");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnouncementsApi->V4GetAnnouncements");

            var localVarPath = "/v4/announcements";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (isRead != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isRead", isRead)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAnnouncements", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseMessageModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseMessageModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseMessageModelArray)));
        }

        /// <summary>
        /// Mark Announcements as Read Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutAnnouncementsIdsRead (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutAnnouncementsIdsReadWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Mark Announcements as Read Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutAnnouncementsIdsReadWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnnouncementsApi->V4PutAnnouncementsIdsRead");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnouncementsApi->V4PutAnnouncementsIdsRead");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AnnouncementsApi->V4PutAnnouncementsIdsRead");

            var localVarPath = "/v4/announcements/{ids}/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutAnnouncementsIdsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Mark Announcements as Read Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutAnnouncementsIdsReadAsync (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutAnnouncementsIdsReadAsyncWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Mark Announcements as Read Updates announcements to indicate that that the user has read the announcement.    **API Endpoint**:  PUT /v4/announcements/{ids}/read   **Scope**:  announcements   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of announcements to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutAnnouncementsIdsReadAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AnnouncementsApi->V4PutAnnouncementsIdsRead");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AnnouncementsApi->V4PutAnnouncementsIdsRead");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling AnnouncementsApi->V4PutAnnouncementsIdsRead");

            var localVarPath = "/v4/announcements/{ids}/read";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutAnnouncementsIdsRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
