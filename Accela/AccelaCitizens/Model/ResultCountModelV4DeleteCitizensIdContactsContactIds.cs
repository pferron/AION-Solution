/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// ResultCountModelV4DeleteCitizensIdContactsContactIds
    /// </summary>
    [DataContract]
    public partial class ResultCountModelV4DeleteCitizensIdContactsContactIds :  IEquatable<ResultCountModelV4DeleteCitizensIdContactsContactIds>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultCountModelV4DeleteCitizensIdContactsContactIds" /> class.
        /// </summary>
        /// <param name="failedCount">failedCount.</param>
        /// <param name="failedIDs">failedIDs.</param>
        /// <param name="successCount">successCount.</param>
        /// <param name="successIDs">successIDs.</param>
        public ResultCountModelV4DeleteCitizensIdContactsContactIds(long? failedCount = default(long?), string failedIDs = default(string), long? successCount = default(long?), string successIDs = default(string))
        {
            this.FailedCount = failedCount;
            this.FailedIDs = failedIDs;
            this.SuccessCount = successCount;
            this.SuccessIDs = successIDs;
        }
        
        /// <summary>
        /// Gets or Sets FailedCount
        /// </summary>
        [DataMember(Name="failedCount", EmitDefaultValue=false)]
        public long? FailedCount { get; set; }

        /// <summary>
        /// Gets or Sets FailedIDs
        /// </summary>
        [DataMember(Name="failedIDs", EmitDefaultValue=false)]
        public string FailedIDs { get; set; }

        /// <summary>
        /// Gets or Sets SuccessCount
        /// </summary>
        [DataMember(Name="successCount", EmitDefaultValue=false)]
        public long? SuccessCount { get; set; }

        /// <summary>
        /// Gets or Sets SuccessIDs
        /// </summary>
        [DataMember(Name="successIDs", EmitDefaultValue=false)]
        public string SuccessIDs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultCountModelV4DeleteCitizensIdContactsContactIds {\n");
            sb.Append("  FailedCount: ").Append(FailedCount).Append("\n");
            sb.Append("  FailedIDs: ").Append(FailedIDs).Append("\n");
            sb.Append("  SuccessCount: ").Append(SuccessCount).Append("\n");
            sb.Append("  SuccessIDs: ").Append(SuccessIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultCountModelV4DeleteCitizensIdContactsContactIds);
        }

        /// <summary>
        /// Returns true if ResultCountModelV4DeleteCitizensIdContactsContactIds instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultCountModelV4DeleteCitizensIdContactsContactIds to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultCountModelV4DeleteCitizensIdContactsContactIds input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FailedCount == input.FailedCount ||
                    (this.FailedCount != null &&
                    this.FailedCount.Equals(input.FailedCount))
                ) && 
                (
                    this.FailedIDs == input.FailedIDs ||
                    (this.FailedIDs != null &&
                    this.FailedIDs.Equals(input.FailedIDs))
                ) && 
                (
                    this.SuccessCount == input.SuccessCount ||
                    (this.SuccessCount != null &&
                    this.SuccessCount.Equals(input.SuccessCount))
                ) && 
                (
                    this.SuccessIDs == input.SuccessIDs ||
                    (this.SuccessIDs != null &&
                    this.SuccessIDs.Equals(input.SuccessIDs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FailedCount != null)
                    hashCode = hashCode * 59 + this.FailedCount.GetHashCode();
                if (this.FailedIDs != null)
                    hashCode = hashCode * 59 + this.FailedIDs.GetHashCode();
                if (this.SuccessCount != null)
                    hashCode = hashCode * 59 + this.SuccessCount.GetHashCode();
                if (this.SuccessIDs != null)
                    hashCode = hashCode * 59 + this.SuccessIDs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
