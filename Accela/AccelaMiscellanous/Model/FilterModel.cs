/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaMiscellanous.Client.SwaggerDateConverter;

namespace AccelaMiscellanous.Model
{
    /// <summary>
    /// FilterModel
    /// </summary>
    [DataContract]
    public partial class FilterModel :  IEquatable<FilterModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterModel" /> class.
        /// </summary>
        /// <param name="datafilterType">Indicates whether a search filter is pre-defined (\&quot;QuickQuery\&quot;) or user-defined (\&quot;UserQuickQuery\&quot;)..</param>
        /// <param name="description">Describes the search filter..</param>
        /// <param name="id">The search filter system id assigned by the Civic Platform server..</param>
        /// <param name="name">The display name of the search filter..</param>
        /// <param name="primary">Indicates whether or not the search filter is the primary search filter..</param>
        /// <param name="type">The type of search filter..</param>
        public FilterModel(string datafilterType = default(string), string description = default(string), long? id = default(long?), string name = default(string), string primary = default(string), string type = default(string))
        {
            this.DatafilterType = datafilterType;
            this.Description = description;
            this.Id = id;
            this.Name = name;
            this.Primary = primary;
            this.Type = type;
        }
        
        /// <summary>
        /// Indicates whether a search filter is pre-defined (\&quot;QuickQuery\&quot;) or user-defined (\&quot;UserQuickQuery\&quot;).
        /// </summary>
        /// <value>Indicates whether a search filter is pre-defined (\&quot;QuickQuery\&quot;) or user-defined (\&quot;UserQuickQuery\&quot;).</value>
        [DataMember(Name="datafilterType", EmitDefaultValue=false)]
        public string DatafilterType { get; set; }

        /// <summary>
        /// Describes the search filter.
        /// </summary>
        /// <value>Describes the search filter.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The search filter system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The search filter system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The display name of the search filter.
        /// </summary>
        /// <value>The display name of the search filter.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Indicates whether or not the search filter is the primary search filter.
        /// </summary>
        /// <value>Indicates whether or not the search filter is the primary search filter.</value>
        [DataMember(Name="primary", EmitDefaultValue=false)]
        public string Primary { get; set; }

        /// <summary>
        /// The type of search filter.
        /// </summary>
        /// <value>The type of search filter.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterModel {\n");
            sb.Append("  DatafilterType: ").Append(DatafilterType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Primary: ").Append(Primary).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FilterModel);
        }

        /// <summary>
        /// Returns true if FilterModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FilterModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatafilterType == input.DatafilterType ||
                    (this.DatafilterType != null &&
                    this.DatafilterType.Equals(input.DatafilterType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Primary == input.Primary ||
                    (this.Primary != null &&
                    this.Primary.Equals(input.Primary))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatafilterType != null)
                    hashCode = hashCode * 59 + this.DatafilterType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Primary != null)
                    hashCode = hashCode * 59 + this.Primary.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
