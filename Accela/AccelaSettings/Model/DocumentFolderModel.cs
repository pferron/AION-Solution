/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// DocumentFolderModel
    /// </summary>
    [DataContract]
    public partial class DocumentFolderModel :  IEquatable<DocumentFolderModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the document folder is active.
        /// </summary>
        /// <value>Indicates whether or not the document folder is active.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsActiveEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the document folder is active.
        /// </summary>
        /// <value>Indicates whether or not the document folder is active.</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public IsActiveEnum? IsActive { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFolderModel" /> class.
        /// </summary>
        /// <param name="description">description.</param>
        /// <param name="groupId">The ID of the document group..</param>
        /// <param name="groupName">The name of the document group..</param>
        /// <param name="id">The ID of the document folder assigned by the Civic Platform server..</param>
        /// <param name="isActive">Indicates whether or not the document folder is active..</param>
        /// <param name="order">The document folder order..</param>
        /// <param name="text">The document folder display name..</param>
        /// <param name="value">The document folder value..</param>
        public DocumentFolderModel(DocumentFolderModelDescription description = default(DocumentFolderModelDescription), string groupId = default(string), string groupName = default(string), string id = default(string), IsActiveEnum? isActive = default(IsActiveEnum?), long? order = default(long?), string text = default(string), string value = default(string))
        {
            this.Description = description;
            this.GroupId = groupId;
            this.GroupName = groupName;
            this.Id = id;
            this.IsActive = isActive;
            this.Order = order;
            this.Text = text;
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public DocumentFolderModelDescription Description { get; set; }

        /// <summary>
        /// The ID of the document group.
        /// </summary>
        /// <value>The ID of the document group.</value>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the document group.
        /// </summary>
        /// <value>The name of the document group.</value>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// The ID of the document folder assigned by the Civic Platform server.
        /// </summary>
        /// <value>The ID of the document folder assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The document folder order.
        /// </summary>
        /// <value>The document folder order.</value>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public long? Order { get; set; }

        /// <summary>
        /// The document folder display name.
        /// </summary>
        /// <value>The document folder display name.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The document folder value.
        /// </summary>
        /// <value>The document folder value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentFolderModel {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentFolderModel);
        }

        /// <summary>
        /// Returns true if DocumentFolderModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentFolderModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentFolderModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.Order == input.Order ||
                    (this.Order != null &&
                    this.Order.Equals(input.Order))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
