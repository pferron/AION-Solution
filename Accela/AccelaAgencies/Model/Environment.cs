/* 
 * Agencies-b
 *
 * The Agencies API provides agency information as configured in the [Construct Admin Portal](https://admin.accela.com).
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAgencies.Client.SwaggerDateConverter;

namespace AccelaAgencies.Model
{
    /// <summary>
    /// Environment
    /// </summary>
    [DataContract]
        public partial class Environment :  IEquatable<Environment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Environment" /> class.
        /// </summary>
        /// <param name="name">The name of an agency&#x27;s API runtime environment, as configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Host} &gt; Environments..</param>
        /// <param name="product">The API provider product, such as \&quot;AA\&quot; for (Civic Platform) Automation..</param>
        /// <param name="version">The version of the API provider product, as specified on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Host} &gt; Environments..</param>
        public Environment(string name = default(string), string product = default(string), string version = default(string))
        {
            this.Name = name;
            this.Product = product;
            this.Version = version;
        }
        
        /// <summary>
        /// The name of an agency&#x27;s API runtime environment, as configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Host} &gt; Environments.
        /// </summary>
        /// <value>The name of an agency&#x27;s API runtime environment, as configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Host} &gt; Environments.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The API provider product, such as \&quot;AA\&quot; for (Civic Platform) Automation.
        /// </summary>
        /// <value>The API provider product, such as \&quot;AA\&quot; for (Civic Platform) Automation.</value>
        [DataMember(Name="product", EmitDefaultValue=false)]
        public string Product { get; set; }

        /// <summary>
        /// The version of the API provider product, as specified on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Host} &gt; Environments.
        /// </summary>
        /// <value>The version of the API provider product, as specified on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Host} &gt; Environments.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Environment {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Product: ").Append(Product).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Environment);
        }

        /// <summary>
        /// Returns true if Environment instances are equal
        /// </summary>
        /// <param name="input">Instance of Environment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Environment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Product == input.Product ||
                    (this.Product != null &&
                    this.Product.Equals(input.Product))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Product != null)
                    hashCode = hashCode * 59 + this.Product.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
