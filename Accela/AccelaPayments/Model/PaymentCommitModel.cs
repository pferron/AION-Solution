/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// PaymentCommitModel
    /// </summary>
    [DataContract]
        public partial class PaymentCommitModel :  IEquatable<PaymentCommitModel>, IValidatableObject
    {
        /// <summary>
        /// The method of payment, either Credit Card or Check.
        /// </summary>
        /// <value>The method of payment, either Credit Card or Check.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PaymentMethodEnum
        {
            /// <summary>
            /// Enum CreditCard for value: Credit Card
            /// </summary>
            [EnumMember(Value = "Credit Card")]
            CreditCard = 0,
            /// <summary>
            /// Enum Check for value: Check
            /// </summary>
            [EnumMember(Value = "Check")]
            Check = 1        }
        /// <summary>
        /// The method of payment, either Credit Card or Check.
        /// </summary>
        /// <value>The method of payment, either Credit Card or Check.</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=false)]
        public PaymentMethodEnum PaymentMethod { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCommitModel" /> class.
        /// </summary>
        /// <param name="amount">The payment amount. (required).</param>
        /// <param name="comments">Comments related to the payment transaction..</param>
        /// <param name="convenienceFee">The payment convenience fee to be applied. Set to 0 if none. (required).</param>
        /// <param name="creditCard">creditCard.</param>
        /// <param name="merchantAccountId">The account ID of the merchant receiving the payment..</param>
        /// <param name="payeePhone">The area code and phone number of the payee..</param>
        /// <param name="paymentMethod">The method of payment, either Credit Card or Check. (required).</param>
        /// <param name="paymentSystemTransactionId">The third party payment system&#x27;s payment transaction ID. (required).</param>
        public PaymentCommitModel(double? amount = default(double?), string comments = default(string), double? convenienceFee = default(double?), CreditCardLastFourDigitsModel creditCard = default(CreditCardLastFourDigitsModel), string merchantAccountId = default(string), string payeePhone = default(string), PaymentMethodEnum paymentMethod = default(PaymentMethodEnum), string paymentSystemTransactionId = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new InvalidDataException("amount is a required property for PaymentCommitModel and cannot be null");
            }
            else
            {
                this.Amount = amount;
            }
            // to ensure "convenienceFee" is required (not null)
            if (convenienceFee == null)
            {
                throw new InvalidDataException("convenienceFee is a required property for PaymentCommitModel and cannot be null");
            }
            else
            {
                this.ConvenienceFee = convenienceFee;
            }
            // to ensure "paymentMethod" is required (not null)
            this.PaymentMethod = paymentMethod;
            // to ensure "paymentSystemTransactionId" is required (not null)
            if (paymentSystemTransactionId == null)
            {
                throw new InvalidDataException("paymentSystemTransactionId is a required property for PaymentCommitModel and cannot be null");
            }
            else
            {
                this.PaymentSystemTransactionId = paymentSystemTransactionId;
            }
            this.Comments = comments;
            this.CreditCard = creditCard;
            this.MerchantAccountId = merchantAccountId;
            this.PayeePhone = payeePhone;
        }
        
        /// <summary>
        /// The payment amount.
        /// </summary>
        /// <value>The payment amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Comments related to the payment transaction.
        /// </summary>
        /// <value>Comments related to the payment transaction.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The payment convenience fee to be applied. Set to 0 if none.
        /// </summary>
        /// <value>The payment convenience fee to be applied. Set to 0 if none.</value>
        [DataMember(Name="convenienceFee", EmitDefaultValue=false)]
        public double? ConvenienceFee { get; set; }

        /// <summary>
        /// Gets or Sets CreditCard
        /// </summary>
        [DataMember(Name="creditCard", EmitDefaultValue=false)]
        public CreditCardLastFourDigitsModel CreditCard { get; set; }

        /// <summary>
        /// The account ID of the merchant receiving the payment.
        /// </summary>
        /// <value>The account ID of the merchant receiving the payment.</value>
        [DataMember(Name="merchantAccountId", EmitDefaultValue=false)]
        public string MerchantAccountId { get; set; }

        /// <summary>
        /// The area code and phone number of the payee.
        /// </summary>
        /// <value>The area code and phone number of the payee.</value>
        [DataMember(Name="payeePhone", EmitDefaultValue=false)]
        public string PayeePhone { get; set; }


        /// <summary>
        /// The third party payment system&#x27;s payment transaction ID.
        /// </summary>
        /// <value>The third party payment system&#x27;s payment transaction ID.</value>
        [DataMember(Name="paymentSystemTransactionId", EmitDefaultValue=false)]
        public string PaymentSystemTransactionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCommitModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ConvenienceFee: ").Append(ConvenienceFee).Append("\n");
            sb.Append("  CreditCard: ").Append(CreditCard).Append("\n");
            sb.Append("  MerchantAccountId: ").Append(MerchantAccountId).Append("\n");
            sb.Append("  PayeePhone: ").Append(PayeePhone).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentSystemTransactionId: ").Append(PaymentSystemTransactionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCommitModel);
        }

        /// <summary>
        /// Returns true if PaymentCommitModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCommitModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCommitModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ConvenienceFee == input.ConvenienceFee ||
                    (this.ConvenienceFee != null &&
                    this.ConvenienceFee.Equals(input.ConvenienceFee))
                ) && 
                (
                    this.CreditCard == input.CreditCard ||
                    (this.CreditCard != null &&
                    this.CreditCard.Equals(input.CreditCard))
                ) && 
                (
                    this.MerchantAccountId == input.MerchantAccountId ||
                    (this.MerchantAccountId != null &&
                    this.MerchantAccountId.Equals(input.MerchantAccountId))
                ) && 
                (
                    this.PayeePhone == input.PayeePhone ||
                    (this.PayeePhone != null &&
                    this.PayeePhone.Equals(input.PayeePhone))
                ) && 
                //(
                //    this.PaymentMethod == input.PaymentMethod ||
                //    (this.PaymentMethod != null &&
                //    this.PaymentMethod.Equals(input.PaymentMethod))
                //) && 
                (
                    this.PaymentSystemTransactionId == input.PaymentSystemTransactionId ||
                    (this.PaymentSystemTransactionId != null &&
                    this.PaymentSystemTransactionId.Equals(input.PaymentSystemTransactionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ConvenienceFee != null)
                    hashCode = hashCode * 59 + this.ConvenienceFee.GetHashCode();
                if (this.CreditCard != null)
                    hashCode = hashCode * 59 + this.CreditCard.GetHashCode();
                if (this.MerchantAccountId != null)
                    hashCode = hashCode * 59 + this.MerchantAccountId.GetHashCode();
                if (this.PayeePhone != null)
                    hashCode = hashCode * 59 + this.PayeePhone.GetHashCode();
                //if (this.PaymentMethod != null)
                //    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentSystemTransactionId != null)
                    hashCode = hashCode * 59 + this.PaymentSystemTransactionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
