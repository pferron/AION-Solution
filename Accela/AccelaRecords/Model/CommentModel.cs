/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// CommentModel
    /// </summary>
    [DataContract]
    public partial class CommentModel :  IEquatable<CommentModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the comment is displayed on inspection.
        /// </summary>
        /// <value>Indicates whether or not the comment is displayed on inspection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DisplayOnInspectionEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the comment is displayed on inspection.
        /// </summary>
        /// <value>Indicates whether or not the comment is displayed on inspection.</value>
        [DataMember(Name="displayOnInspection", EmitDefaultValue=false)]
        public DisplayOnInspectionEnum? DisplayOnInspection { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommentModel" /> class.
        /// </summary>
        /// <param name="displayOnInspection">Indicates whether or not the comment is displayed on inspection..</param>
        /// <param name="text">The comment text..</param>
        public CommentModel(DisplayOnInspectionEnum? displayOnInspection = default(DisplayOnInspectionEnum?), string text = default(string))
        {
            this.DisplayOnInspection = displayOnInspection;
            this.Text = text;
        }
        

        /// <summary>
        /// The comment text.
        /// </summary>
        /// <value>The comment text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentModel {\n");
            sb.Append("  DisplayOnInspection: ").Append(DisplayOnInspection).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommentModel);
        }

        /// <summary>
        /// Returns true if CommentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CommentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayOnInspection == input.DisplayOnInspection ||
                    (this.DisplayOnInspection != null &&
                    this.DisplayOnInspection.Equals(input.DisplayOnInspection))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayOnInspection != null)
                    hashCode = hashCode * 59 + this.DisplayOnInspection.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
