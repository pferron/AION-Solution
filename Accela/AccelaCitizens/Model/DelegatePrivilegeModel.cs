/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// DelegatePrivilegeModel
    /// </summary>
    [DataContract]
    public partial class DelegatePrivilegeModel :  IEquatable<DelegatePrivilegeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DelegatePrivilegeModel" /> class.
        /// </summary>
        /// <param name="firstName">The citizen user&#39;s first name..</param>
        /// <param name="id">Ther citizen delegate&#39;s userid..</param>
        /// <param name="lastName">The citizen user&#39;s last name..</param>
        /// <param name="permissions">An array containing the allowed actions assigned to the user, per module..</param>
        /// <param name="userName">The user who assigned the permission..</param>
        public DelegatePrivilegeModel(string firstName = default(string), string id = default(string), string lastName = default(string), List<PermissionModel> permissions = default(List<PermissionModel>), string userName = default(string))
        {
            this.FirstName = firstName;
            this.Id = id;
            this.LastName = lastName;
            this.Permissions = permissions;
            this.UserName = userName;
        }
        
        /// <summary>
        /// The citizen user&#39;s first name.
        /// </summary>
        /// <value>The citizen user&#39;s first name.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Ther citizen delegate&#39;s userid.
        /// </summary>
        /// <value>Ther citizen delegate&#39;s userid.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The citizen user&#39;s last name.
        /// </summary>
        /// <value>The citizen user&#39;s last name.</value>
        [DataMember(Name="lastName", EmitDefaultValue=false)]
        public string LastName { get; set; }

        /// <summary>
        /// An array containing the allowed actions assigned to the user, per module.
        /// </summary>
        /// <value>An array containing the allowed actions assigned to the user, per module.</value>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public List<PermissionModel> Permissions { get; set; }

        /// <summary>
        /// The user who assigned the permission.
        /// </summary>
        /// <value>The user who assigned the permission.</value>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DelegatePrivilegeModel {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DelegatePrivilegeModel);
        }

        /// <summary>
        /// Returns true if DelegatePrivilegeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DelegatePrivilegeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DelegatePrivilegeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.Permissions == input.Permissions ||
                    this.Permissions != null &&
                    this.Permissions.SequenceEqual(input.Permissions)
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LastName != null)
                    hashCode = hashCode * 59 + this.LastName.GetHashCode();
                if (this.Permissions != null)
                    hashCode = hashCode * 59 + this.Permissions.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
