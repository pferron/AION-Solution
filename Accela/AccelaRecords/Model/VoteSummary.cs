/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// VoteSummary
    /// </summary>
    [DataContract]
    public partial class VoteSummary :  IEquatable<VoteSummary>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VoteSummary" /> class.
        /// </summary>
        /// <param name="downCount">The number of votes that disapprove the specified record..</param>
        /// <param name="upCount">The number of votes that approve the specified record..</param>
        public VoteSummary(int? downCount = default(int?), int? upCount = default(int?))
        {
            this.DownCount = downCount;
            this.UpCount = upCount;
        }
        
        /// <summary>
        /// The number of votes that disapprove the specified record.
        /// </summary>
        /// <value>The number of votes that disapprove the specified record.</value>
        [DataMember(Name="downCount", EmitDefaultValue=false)]
        public int? DownCount { get; set; }

        /// <summary>
        /// The number of votes that approve the specified record.
        /// </summary>
        /// <value>The number of votes that approve the specified record.</value>
        [DataMember(Name="upCount", EmitDefaultValue=false)]
        public int? UpCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VoteSummary {\n");
            sb.Append("  DownCount: ").Append(DownCount).Append("\n");
            sb.Append("  UpCount: ").Append(UpCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VoteSummary);
        }

        /// <summary>
        /// Returns true if VoteSummary instances are equal
        /// </summary>
        /// <param name="input">Instance of VoteSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VoteSummary input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DownCount == input.DownCount ||
                    (this.DownCount != null &&
                    this.DownCount.Equals(input.DownCount))
                ) && 
                (
                    this.UpCount == input.UpCount ||
                    (this.UpCount != null &&
                    this.UpCount.Equals(input.UpCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DownCount != null)
                    hashCode = hashCode * 59 + this.DownCount.GetHashCode();
                if (this.UpCount != null)
                    hashCode = hashCode * 59 + this.UpCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
