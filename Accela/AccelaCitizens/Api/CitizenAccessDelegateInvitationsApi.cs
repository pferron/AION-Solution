/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaCitizens.Client;
using AccelaCitizens.Model;

namespace AccelaCitizens.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICitizenAccessDelegateInvitationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Invitations
        /// </summary>
        /// <remarks>
        /// Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserDelegateModelArray</returns>
        ResponsePublicUserDelegateModelArray V4GetCitizenaccessCitizensInvitations (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Invitations
        /// </summary>
        /// <remarks>
        /// Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserDelegateModelArray</returns>
        ApiResponse<ResponsePublicUserDelegateModelArray> V4GetCitizenaccessCitizensInvitationsWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Update Invitation
        /// </summary>
        /// <remarks>
        /// Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserDelegateStatusModel</returns>
        ResponsePublicUserDelegateStatusModel V4PutCitizenaccessCitizensInvitationId (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null);

        /// <summary>
        /// Update Invitation
        /// </summary>
        /// <remarks>
        /// Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserDelegateStatusModel</returns>
        ApiResponse<ResponsePublicUserDelegateStatusModel> V4PutCitizenaccessCitizensInvitationIdWithHttpInfo (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Invitations
        /// </summary>
        /// <remarks>
        /// Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserDelegateModelArray</returns>
        System.Threading.Tasks.Task<ResponsePublicUserDelegateModelArray> V4GetCitizenaccessCitizensInvitationsAsync (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Invitations
        /// </summary>
        /// <remarks>
        /// Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserDelegateModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserDelegateModelArray>> V4GetCitizenaccessCitizensInvitationsAsyncWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Update Invitation
        /// </summary>
        /// <remarks>
        /// Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserDelegateStatusModel</returns>
        System.Threading.Tasks.Task<ResponsePublicUserDelegateStatusModel> V4PutCitizenaccessCitizensInvitationIdAsync (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null);

        /// <summary>
        /// Update Invitation
        /// </summary>
        /// <remarks>
        /// Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserDelegateStatusModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserDelegateStatusModel>> V4PutCitizenaccessCitizensInvitationIdAsyncWithHttpInfo (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CitizenAccessDelegateInvitationsApi : ICitizenAccessDelegateInvitationsApi
    {
        private AccelaCitizens.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessDelegateInvitationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CitizenAccessDelegateInvitationsApi(String basePath)
        {
            this.Configuration = new AccelaCitizens.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessDelegateInvitationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CitizenAccessDelegateInvitationsApi(AccelaCitizens.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaCitizens.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaCitizens.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaCitizens.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Invitations Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserDelegateModelArray</returns>
        public ResponsePublicUserDelegateModelArray V4GetCitizenaccessCitizensInvitations (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserDelegateModelArray> localVarResponse = V4GetCitizenaccessCitizensInvitationsWithHttpInfo(contentType, authorization, userName, name, delegateStatus, offset, limit, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Invitations Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserDelegateModelArray</returns>
        public ApiResponse< ResponsePublicUserDelegateModelArray > V4GetCitizenaccessCitizensInvitationsWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateInvitationsApi->V4GetCitizenaccessCitizensInvitations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateInvitationsApi->V4GetCitizenaccessCitizensInvitations");

            var localVarPath = "/v4/citizenaccess/citizens/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (delegateStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delegateStatus", delegateStatus)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserDelegateModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserDelegateModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserDelegateModelArray)));
        }

        /// <summary>
        /// Get All Invitations Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserDelegateModelArray</returns>
        public async System.Threading.Tasks.Task<ResponsePublicUserDelegateModelArray> V4GetCitizenaccessCitizensInvitationsAsync (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserDelegateModelArray> localVarResponse = await V4GetCitizenaccessCitizensInvitationsAsyncWithHttpInfo(contentType, authorization, userName, name, delegateStatus, offset, limit, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Invitations Gets invitations or delegate requests received by the logged - in user.To get the logged - in user &#39;s pending invitations, set the {delegateStatus} parameter to PENDING.    **API Endpoint**:  GET /v4/citizenaccess/citizens/invitations   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate&#39; s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39;s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserDelegateModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserDelegateModelArray>> V4GetCitizenaccessCitizensInvitationsAsyncWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateInvitationsApi->V4GetCitizenaccessCitizensInvitations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateInvitationsApi->V4GetCitizenaccessCitizensInvitations");

            var localVarPath = "/v4/citizenaccess/citizens/invitations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (delegateStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delegateStatus", delegateStatus)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensInvitations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserDelegateModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserDelegateModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserDelegateModelArray)));
        }

        /// <summary>
        /// Update Invitation Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserDelegateStatusModel</returns>
        public ResponsePublicUserDelegateStatusModel V4PutCitizenaccessCitizensInvitationId (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null)
        {
             ApiResponse<ResponsePublicUserDelegateStatusModel> localVarResponse = V4PutCitizenaccessCitizensInvitationIdWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Invitation Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserDelegateStatusModel</returns>
        public ApiResponse< ResponsePublicUserDelegateStatusModel > V4PutCitizenaccessCitizensInvitationIdWithHttpInfo (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");

            var localVarPath = "/v4/citizenaccess/citizens/invitation/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizenaccessCitizensInvitationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserDelegateStatusModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserDelegateStatusModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserDelegateStatusModel)));
        }

        /// <summary>
        /// Update Invitation Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserDelegateStatusModel</returns>
        public async System.Threading.Tasks.Task<ResponsePublicUserDelegateStatusModel> V4PutCitizenaccessCitizensInvitationIdAsync (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null)
        {
             ApiResponse<ResponsePublicUserDelegateStatusModel> localVarResponse = await V4PutCitizenaccessCitizensInvitationIdAsyncWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Invitation Updates the status of the delegate invitation sent by a specified user. The Update Invitation API allows the logged-in user to accept or reject the delegate invitation sent by the user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/invitation/{id}    **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information including the delegate status to be updated.</param>
        /// <param name="id">The id of the citizen user who sent the delegate request.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserDelegateStatusModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserDelegateStatusModel>> V4PutCitizenaccessCitizensInvitationIdAsyncWithHttpInfo (string contentType, string authorization, PublicUserDelegateStatusModel body, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessDelegateInvitationsApi->V4PutCitizenaccessCitizensInvitationId");

            var localVarPath = "/v4/citizenaccess/citizens/invitation/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizenaccessCitizensInvitationId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserDelegateStatusModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserDelegateStatusModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserDelegateStatusModel)));
        }

    }
}
