/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// FeeItemModel
    /// </summary>
    [DataContract]
    public partial class FeeItemModel :  IEquatable<FeeItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeItemModel" /> class.
        /// </summary>
        /// <param name="acaRequiredFlag">Indicates whether or not the fee schedule is required in order to make it accessible to citizens..</param>
        /// <param name="accountCode1">The code associated with the first fee.</param>
        /// <param name="accountCode1Allocation">Allocation proportion or amount of account code 1..</param>
        /// <param name="accountCode2">The code associated with the second fee.</param>
        /// <param name="accountCode2Allocation">Allocation proportion or amount of account code 2..</param>
        /// <param name="accountCode3">The code associated with the third fee.</param>
        /// <param name="accountCode3Allocation">Allocation proportion or amount of account code 3..</param>
        /// <param name="allocatedFee1">The allocated fee for account code 1..</param>
        /// <param name="allocatedFee2">The allocated fee for account code 2..</param>
        /// <param name="allocatedFee3">The allocated fee for account code 3..</param>
        /// <param name="amount">The amount of a payment transaction or account balance..</param>
        /// <param name="applyDate">The date the fee is applied..</param>
        /// <param name="autoAssessFlag">Indicates whether or not the fee item is automatically assessed..</param>
        /// <param name="autoInvoiceFlag">Indicates whether or not the fee item is automatically invoiced..</param>
        /// <param name="balanceDue">The amount due..</param>
        /// <param name="calcFlag">Indicates whether or not the fee amount is based on fee calculation..</param>
        /// <param name="calculatedFlag">Indicates whether or not the fee amount is based on fee calculation..</param>
        /// <param name="code">code.</param>
        /// <param name="description">description.</param>
        /// <param name="displayOrder">The display order of the fee item..</param>
        /// <param name="effectDate">Fee item effective date..</param>
        /// <param name="expireDate">The date when the item expires.</param>
        /// <param name="feeAllocationType">The fee allocation type to each account code..</param>
        /// <param name="feeNotes">Notes about the fee..</param>
        /// <param name="id">The fee system id..</param>
        /// <param name="invoiceId">The invoice ID for the fee item..</param>
        /// <param name="maxFee">The maximum fee item..</param>
        /// <param name="minFee">The minimum fee item..</param>
        /// <param name="paymentPeriod">paymentPeriod.</param>
        /// <param name="priority">The priority level assigned to the fee item..</param>
        /// <param name="quantity">The number of units for which the same fee applies..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="status">The fee item status..</param>
        /// <param name="subGroup">subGroup.</param>
        /// <param name="udf1">User defined field 1.</param>
        /// <param name="udf2">User defined field 2.</param>
        /// <param name="udf3">User defined field 3.</param>
        /// <param name="unit">unit.</param>
        /// <param name="variable">The variable associated with the fee item..</param>
        /// <param name="version">version.</param>
        public FeeItemModel(string acaRequiredFlag = default(string), string accountCode1 = default(string), double? accountCode1Allocation = default(double?), string accountCode2 = default(string), double? accountCode2Allocation = default(double?), string accountCode3 = default(string), double? accountCode3Allocation = default(double?), double? allocatedFee1 = default(double?), double? allocatedFee2 = default(double?), double? allocatedFee3 = default(double?), double? amount = default(double?), DateTime? applyDate = default(DateTime?), string autoAssessFlag = default(string), string autoInvoiceFlag = default(string), double? balanceDue = default(double?), string calcFlag = default(string), string calculatedFlag = default(string), FeeItemModelCode code = default(FeeItemModelCode), FeeItemModelDescription description = default(FeeItemModelDescription), long? displayOrder = default(long?), DateTime? effectDate = default(DateTime?), DateTime? expireDate = default(DateTime?), string feeAllocationType = default(string), string feeNotes = default(string), long? id = default(long?), long? invoiceId = default(long?), double? maxFee = default(double?), double? minFee = default(double?), FeeItemBaseModelPaymentPeriod paymentPeriod = default(FeeItemBaseModelPaymentPeriod), long? priority = default(long?), double? quantity = default(double?), RecordIdModel recordId = default(RecordIdModel), FeeItemModelSchedule schedule = default(FeeItemModelSchedule), string status = default(string), FeeItemModelSubGroup subGroup = default(FeeItemModelSubGroup), string udf1 = default(string), string udf2 = default(string), string udf3 = default(string), FeeItemModelUnit unit = default(FeeItemModelUnit), string variable = default(string), FeeItemModelVersion version = default(FeeItemModelVersion))
        {
            this.AcaRequiredFlag = acaRequiredFlag;
            this.AccountCode1 = accountCode1;
            this.AccountCode1Allocation = accountCode1Allocation;
            this.AccountCode2 = accountCode2;
            this.AccountCode2Allocation = accountCode2Allocation;
            this.AccountCode3 = accountCode3;
            this.AccountCode3Allocation = accountCode3Allocation;
            this.AllocatedFee1 = allocatedFee1;
            this.AllocatedFee2 = allocatedFee2;
            this.AllocatedFee3 = allocatedFee3;
            this.Amount = amount;
            this.ApplyDate = applyDate;
            this.AutoAssessFlag = autoAssessFlag;
            this.AutoInvoiceFlag = autoInvoiceFlag;
            this.BalanceDue = balanceDue;
            this.CalcFlag = calcFlag;
            this.CalculatedFlag = calculatedFlag;
            this.Code = code;
            this.Description = description;
            this.DisplayOrder = displayOrder;
            this.EffectDate = effectDate;
            this.ExpireDate = expireDate;
            this.FeeAllocationType = feeAllocationType;
            this.FeeNotes = feeNotes;
            this.Id = id;
            this.InvoiceId = invoiceId;
            this.MaxFee = maxFee;
            this.MinFee = minFee;
            this.PaymentPeriod = paymentPeriod;
            this.Priority = priority;
            this.Quantity = quantity;
            this.RecordId = recordId;
            this.Schedule = schedule;
            this.Status = status;
            this.SubGroup = subGroup;
            this.Udf1 = udf1;
            this.Udf2 = udf2;
            this.Udf3 = udf3;
            this.Unit = unit;
            this.Variable = variable;
            this.Version = version;
        }
        
        /// <summary>
        /// Indicates whether or not the fee schedule is required in order to make it accessible to citizens.
        /// </summary>
        /// <value>Indicates whether or not the fee schedule is required in order to make it accessible to citizens.</value>
        [DataMember(Name="acaRequiredFlag", EmitDefaultValue=false)]
        public string AcaRequiredFlag { get; set; }

        /// <summary>
        /// The code associated with the first fee
        /// </summary>
        /// <value>The code associated with the first fee</value>
        [DataMember(Name="accountCode1", EmitDefaultValue=false)]
        public string AccountCode1 { get; set; }

        /// <summary>
        /// Allocation proportion or amount of account code 1.
        /// </summary>
        /// <value>Allocation proportion or amount of account code 1.</value>
        [DataMember(Name="accountCode1Allocation", EmitDefaultValue=false)]
        public double? AccountCode1Allocation { get; set; }

        /// <summary>
        /// The code associated with the second fee
        /// </summary>
        /// <value>The code associated with the second fee</value>
        [DataMember(Name="accountCode2", EmitDefaultValue=false)]
        public string AccountCode2 { get; set; }

        /// <summary>
        /// Allocation proportion or amount of account code 2.
        /// </summary>
        /// <value>Allocation proportion or amount of account code 2.</value>
        [DataMember(Name="accountCode2Allocation", EmitDefaultValue=false)]
        public double? AccountCode2Allocation { get; set; }

        /// <summary>
        /// The code associated with the third fee
        /// </summary>
        /// <value>The code associated with the third fee</value>
        [DataMember(Name="accountCode3", EmitDefaultValue=false)]
        public string AccountCode3 { get; set; }

        /// <summary>
        /// Allocation proportion or amount of account code 3.
        /// </summary>
        /// <value>Allocation proportion or amount of account code 3.</value>
        [DataMember(Name="accountCode3Allocation", EmitDefaultValue=false)]
        public double? AccountCode3Allocation { get; set; }

        /// <summary>
        /// The allocated fee for account code 1.
        /// </summary>
        /// <value>The allocated fee for account code 1.</value>
        [DataMember(Name="allocatedFee1", EmitDefaultValue=false)]
        public double? AllocatedFee1 { get; set; }

        /// <summary>
        /// The allocated fee for account code 2.
        /// </summary>
        /// <value>The allocated fee for account code 2.</value>
        [DataMember(Name="allocatedFee2", EmitDefaultValue=false)]
        public double? AllocatedFee2 { get; set; }

        /// <summary>
        /// The allocated fee for account code 3.
        /// </summary>
        /// <value>The allocated fee for account code 3.</value>
        [DataMember(Name="allocatedFee3", EmitDefaultValue=false)]
        public double? AllocatedFee3 { get; set; }

        /// <summary>
        /// The amount of a payment transaction or account balance.
        /// </summary>
        /// <value>The amount of a payment transaction or account balance.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// The date the fee is applied.
        /// </summary>
        /// <value>The date the fee is applied.</value>
        [DataMember(Name="applyDate", EmitDefaultValue=false)]
        public DateTime? ApplyDate { get; set; }

        /// <summary>
        /// Indicates whether or not the fee item is automatically assessed.
        /// </summary>
        /// <value>Indicates whether or not the fee item is automatically assessed.</value>
        [DataMember(Name="autoAssessFlag", EmitDefaultValue=false)]
        public string AutoAssessFlag { get; set; }

        /// <summary>
        /// Indicates whether or not the fee item is automatically invoiced.
        /// </summary>
        /// <value>Indicates whether or not the fee item is automatically invoiced.</value>
        [DataMember(Name="autoInvoiceFlag", EmitDefaultValue=false)]
        public string AutoInvoiceFlag { get; set; }

        /// <summary>
        /// The amount due.
        /// </summary>
        /// <value>The amount due.</value>
        [DataMember(Name="balanceDue", EmitDefaultValue=false)]
        public double? BalanceDue { get; set; }

        /// <summary>
        /// Indicates whether or not the fee amount is based on fee calculation.
        /// </summary>
        /// <value>Indicates whether or not the fee amount is based on fee calculation.</value>
        [DataMember(Name="calcFlag", EmitDefaultValue=false)]
        public string CalcFlag { get; set; }

        /// <summary>
        /// Indicates whether or not the fee amount is based on fee calculation.
        /// </summary>
        /// <value>Indicates whether or not the fee amount is based on fee calculation.</value>
        [DataMember(Name="calculatedFlag", EmitDefaultValue=false)]
        public string CalculatedFlag { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public FeeItemModelCode Code { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public FeeItemModelDescription Description { get; set; }

        /// <summary>
        /// The display order of the fee item.
        /// </summary>
        /// <value>The display order of the fee item.</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        /// Fee item effective date.
        /// </summary>
        /// <value>Fee item effective date.</value>
        [DataMember(Name="effectDate", EmitDefaultValue=false)]
        public DateTime? EffectDate { get; set; }

        /// <summary>
        /// The date when the item expires
        /// </summary>
        /// <value>The date when the item expires</value>
        [DataMember(Name="expireDate", EmitDefaultValue=false)]
        public DateTime? ExpireDate { get; set; }

        /// <summary>
        /// The fee allocation type to each account code.
        /// </summary>
        /// <value>The fee allocation type to each account code.</value>
        [DataMember(Name="feeAllocationType", EmitDefaultValue=false)]
        public string FeeAllocationType { get; set; }

        /// <summary>
        /// Notes about the fee.
        /// </summary>
        /// <value>Notes about the fee.</value>
        [DataMember(Name="feeNotes", EmitDefaultValue=false)]
        public string FeeNotes { get; set; }

        /// <summary>
        /// The fee system id.
        /// </summary>
        /// <value>The fee system id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The invoice ID for the fee item.
        /// </summary>
        /// <value>The invoice ID for the fee item.</value>
        [DataMember(Name="invoiceId", EmitDefaultValue=false)]
        public long? InvoiceId { get; set; }

        /// <summary>
        /// The maximum fee item.
        /// </summary>
        /// <value>The maximum fee item.</value>
        [DataMember(Name="maxFee", EmitDefaultValue=false)]
        public double? MaxFee { get; set; }

        /// <summary>
        /// The minimum fee item.
        /// </summary>
        /// <value>The minimum fee item.</value>
        [DataMember(Name="minFee", EmitDefaultValue=false)]
        public double? MinFee { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPeriod
        /// </summary>
        [DataMember(Name="paymentPeriod", EmitDefaultValue=false)]
        public FeeItemBaseModelPaymentPeriod PaymentPeriod { get; set; }

        /// <summary>
        /// The priority level assigned to the fee item.
        /// </summary>
        /// <value>The priority level assigned to the fee item.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public long? Priority { get; set; }

        /// <summary>
        /// The number of units for which the same fee applies.
        /// </summary>
        /// <value>The number of units for which the same fee applies.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public FeeItemModelSchedule Schedule { get; set; }

        /// <summary>
        /// The fee item status.
        /// </summary>
        /// <value>The fee item status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets SubGroup
        /// </summary>
        [DataMember(Name="subGroup", EmitDefaultValue=false)]
        public FeeItemModelSubGroup SubGroup { get; set; }

        /// <summary>
        /// User defined field 1
        /// </summary>
        /// <value>User defined field 1</value>
        [DataMember(Name="udf1", EmitDefaultValue=false)]
        public string Udf1 { get; set; }

        /// <summary>
        /// User defined field 2
        /// </summary>
        /// <value>User defined field 2</value>
        [DataMember(Name="udf2", EmitDefaultValue=false)]
        public string Udf2 { get; set; }

        /// <summary>
        /// User defined field 3
        /// </summary>
        /// <value>User defined field 3</value>
        [DataMember(Name="udf3", EmitDefaultValue=false)]
        public string Udf3 { get; set; }

        /// <summary>
        /// Gets or Sets Unit
        /// </summary>
        [DataMember(Name="unit", EmitDefaultValue=false)]
        public FeeItemModelUnit Unit { get; set; }

        /// <summary>
        /// The variable associated with the fee item.
        /// </summary>
        /// <value>The variable associated with the fee item.</value>
        [DataMember(Name="variable", EmitDefaultValue=false)]
        public string Variable { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public FeeItemModelVersion Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeItemModel {\n");
            sb.Append("  AcaRequiredFlag: ").Append(AcaRequiredFlag).Append("\n");
            sb.Append("  AccountCode1: ").Append(AccountCode1).Append("\n");
            sb.Append("  AccountCode1Allocation: ").Append(AccountCode1Allocation).Append("\n");
            sb.Append("  AccountCode2: ").Append(AccountCode2).Append("\n");
            sb.Append("  AccountCode2Allocation: ").Append(AccountCode2Allocation).Append("\n");
            sb.Append("  AccountCode3: ").Append(AccountCode3).Append("\n");
            sb.Append("  AccountCode3Allocation: ").Append(AccountCode3Allocation).Append("\n");
            sb.Append("  AllocatedFee1: ").Append(AllocatedFee1).Append("\n");
            sb.Append("  AllocatedFee2: ").Append(AllocatedFee2).Append("\n");
            sb.Append("  AllocatedFee3: ").Append(AllocatedFee3).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  ApplyDate: ").Append(ApplyDate).Append("\n");
            sb.Append("  AutoAssessFlag: ").Append(AutoAssessFlag).Append("\n");
            sb.Append("  AutoInvoiceFlag: ").Append(AutoInvoiceFlag).Append("\n");
            sb.Append("  BalanceDue: ").Append(BalanceDue).Append("\n");
            sb.Append("  CalcFlag: ").Append(CalcFlag).Append("\n");
            sb.Append("  CalculatedFlag: ").Append(CalculatedFlag).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  EffectDate: ").Append(EffectDate).Append("\n");
            sb.Append("  ExpireDate: ").Append(ExpireDate).Append("\n");
            sb.Append("  FeeAllocationType: ").Append(FeeAllocationType).Append("\n");
            sb.Append("  FeeNotes: ").Append(FeeNotes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
            sb.Append("  MaxFee: ").Append(MaxFee).Append("\n");
            sb.Append("  MinFee: ").Append(MinFee).Append("\n");
            sb.Append("  PaymentPeriod: ").Append(PaymentPeriod).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubGroup: ").Append(SubGroup).Append("\n");
            sb.Append("  Udf1: ").Append(Udf1).Append("\n");
            sb.Append("  Udf2: ").Append(Udf2).Append("\n");
            sb.Append("  Udf3: ").Append(Udf3).Append("\n");
            sb.Append("  Unit: ").Append(Unit).Append("\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeItemModel);
        }

        /// <summary>
        /// Returns true if FeeItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AcaRequiredFlag == input.AcaRequiredFlag ||
                    (this.AcaRequiredFlag != null &&
                    this.AcaRequiredFlag.Equals(input.AcaRequiredFlag))
                ) && 
                (
                    this.AccountCode1 == input.AccountCode1 ||
                    (this.AccountCode1 != null &&
                    this.AccountCode1.Equals(input.AccountCode1))
                ) && 
                (
                    this.AccountCode1Allocation == input.AccountCode1Allocation ||
                    (this.AccountCode1Allocation != null &&
                    this.AccountCode1Allocation.Equals(input.AccountCode1Allocation))
                ) && 
                (
                    this.AccountCode2 == input.AccountCode2 ||
                    (this.AccountCode2 != null &&
                    this.AccountCode2.Equals(input.AccountCode2))
                ) && 
                (
                    this.AccountCode2Allocation == input.AccountCode2Allocation ||
                    (this.AccountCode2Allocation != null &&
                    this.AccountCode2Allocation.Equals(input.AccountCode2Allocation))
                ) && 
                (
                    this.AccountCode3 == input.AccountCode3 ||
                    (this.AccountCode3 != null &&
                    this.AccountCode3.Equals(input.AccountCode3))
                ) && 
                (
                    this.AccountCode3Allocation == input.AccountCode3Allocation ||
                    (this.AccountCode3Allocation != null &&
                    this.AccountCode3Allocation.Equals(input.AccountCode3Allocation))
                ) && 
                (
                    this.AllocatedFee1 == input.AllocatedFee1 ||
                    (this.AllocatedFee1 != null &&
                    this.AllocatedFee1.Equals(input.AllocatedFee1))
                ) && 
                (
                    this.AllocatedFee2 == input.AllocatedFee2 ||
                    (this.AllocatedFee2 != null &&
                    this.AllocatedFee2.Equals(input.AllocatedFee2))
                ) && 
                (
                    this.AllocatedFee3 == input.AllocatedFee3 ||
                    (this.AllocatedFee3 != null &&
                    this.AllocatedFee3.Equals(input.AllocatedFee3))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.ApplyDate == input.ApplyDate ||
                    (this.ApplyDate != null &&
                    this.ApplyDate.Equals(input.ApplyDate))
                ) && 
                (
                    this.AutoAssessFlag == input.AutoAssessFlag ||
                    (this.AutoAssessFlag != null &&
                    this.AutoAssessFlag.Equals(input.AutoAssessFlag))
                ) && 
                (
                    this.AutoInvoiceFlag == input.AutoInvoiceFlag ||
                    (this.AutoInvoiceFlag != null &&
                    this.AutoInvoiceFlag.Equals(input.AutoInvoiceFlag))
                ) && 
                (
                    this.BalanceDue == input.BalanceDue ||
                    (this.BalanceDue != null &&
                    this.BalanceDue.Equals(input.BalanceDue))
                ) && 
                (
                    this.CalcFlag == input.CalcFlag ||
                    (this.CalcFlag != null &&
                    this.CalcFlag.Equals(input.CalcFlag))
                ) && 
                (
                    this.CalculatedFlag == input.CalculatedFlag ||
                    (this.CalculatedFlag != null &&
                    this.CalculatedFlag.Equals(input.CalculatedFlag))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.EffectDate == input.EffectDate ||
                    (this.EffectDate != null &&
                    this.EffectDate.Equals(input.EffectDate))
                ) && 
                (
                    this.ExpireDate == input.ExpireDate ||
                    (this.ExpireDate != null &&
                    this.ExpireDate.Equals(input.ExpireDate))
                ) && 
                (
                    this.FeeAllocationType == input.FeeAllocationType ||
                    (this.FeeAllocationType != null &&
                    this.FeeAllocationType.Equals(input.FeeAllocationType))
                ) && 
                (
                    this.FeeNotes == input.FeeNotes ||
                    (this.FeeNotes != null &&
                    this.FeeNotes.Equals(input.FeeNotes))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvoiceId == input.InvoiceId ||
                    (this.InvoiceId != null &&
                    this.InvoiceId.Equals(input.InvoiceId))
                ) && 
                (
                    this.MaxFee == input.MaxFee ||
                    (this.MaxFee != null &&
                    this.MaxFee.Equals(input.MaxFee))
                ) && 
                (
                    this.MinFee == input.MinFee ||
                    (this.MinFee != null &&
                    this.MinFee.Equals(input.MinFee))
                ) && 
                (
                    this.PaymentPeriod == input.PaymentPeriod ||
                    (this.PaymentPeriod != null &&
                    this.PaymentPeriod.Equals(input.PaymentPeriod))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubGroup == input.SubGroup ||
                    (this.SubGroup != null &&
                    this.SubGroup.Equals(input.SubGroup))
                ) && 
                (
                    this.Udf1 == input.Udf1 ||
                    (this.Udf1 != null &&
                    this.Udf1.Equals(input.Udf1))
                ) && 
                (
                    this.Udf2 == input.Udf2 ||
                    (this.Udf2 != null &&
                    this.Udf2.Equals(input.Udf2))
                ) && 
                (
                    this.Udf3 == input.Udf3 ||
                    (this.Udf3 != null &&
                    this.Udf3.Equals(input.Udf3))
                ) && 
                (
                    this.Unit == input.Unit ||
                    (this.Unit != null &&
                    this.Unit.Equals(input.Unit))
                ) && 
                (
                    this.Variable == input.Variable ||
                    (this.Variable != null &&
                    this.Variable.Equals(input.Variable))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AcaRequiredFlag != null)
                    hashCode = hashCode * 59 + this.AcaRequiredFlag.GetHashCode();
                if (this.AccountCode1 != null)
                    hashCode = hashCode * 59 + this.AccountCode1.GetHashCode();
                if (this.AccountCode1Allocation != null)
                    hashCode = hashCode * 59 + this.AccountCode1Allocation.GetHashCode();
                if (this.AccountCode2 != null)
                    hashCode = hashCode * 59 + this.AccountCode2.GetHashCode();
                if (this.AccountCode2Allocation != null)
                    hashCode = hashCode * 59 + this.AccountCode2Allocation.GetHashCode();
                if (this.AccountCode3 != null)
                    hashCode = hashCode * 59 + this.AccountCode3.GetHashCode();
                if (this.AccountCode3Allocation != null)
                    hashCode = hashCode * 59 + this.AccountCode3Allocation.GetHashCode();
                if (this.AllocatedFee1 != null)
                    hashCode = hashCode * 59 + this.AllocatedFee1.GetHashCode();
                if (this.AllocatedFee2 != null)
                    hashCode = hashCode * 59 + this.AllocatedFee2.GetHashCode();
                if (this.AllocatedFee3 != null)
                    hashCode = hashCode * 59 + this.AllocatedFee3.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.ApplyDate != null)
                    hashCode = hashCode * 59 + this.ApplyDate.GetHashCode();
                if (this.AutoAssessFlag != null)
                    hashCode = hashCode * 59 + this.AutoAssessFlag.GetHashCode();
                if (this.AutoInvoiceFlag != null)
                    hashCode = hashCode * 59 + this.AutoInvoiceFlag.GetHashCode();
                if (this.BalanceDue != null)
                    hashCode = hashCode * 59 + this.BalanceDue.GetHashCode();
                if (this.CalcFlag != null)
                    hashCode = hashCode * 59 + this.CalcFlag.GetHashCode();
                if (this.CalculatedFlag != null)
                    hashCode = hashCode * 59 + this.CalculatedFlag.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.EffectDate != null)
                    hashCode = hashCode * 59 + this.EffectDate.GetHashCode();
                if (this.ExpireDate != null)
                    hashCode = hashCode * 59 + this.ExpireDate.GetHashCode();
                if (this.FeeAllocationType != null)
                    hashCode = hashCode * 59 + this.FeeAllocationType.GetHashCode();
                if (this.FeeNotes != null)
                    hashCode = hashCode * 59 + this.FeeNotes.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InvoiceId != null)
                    hashCode = hashCode * 59 + this.InvoiceId.GetHashCode();
                if (this.MaxFee != null)
                    hashCode = hashCode * 59 + this.MaxFee.GetHashCode();
                if (this.MinFee != null)
                    hashCode = hashCode * 59 + this.MinFee.GetHashCode();
                if (this.PaymentPeriod != null)
                    hashCode = hashCode * 59 + this.PaymentPeriod.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubGroup != null)
                    hashCode = hashCode * 59 + this.SubGroup.GetHashCode();
                if (this.Udf1 != null)
                    hashCode = hashCode * 59 + this.Udf1.GetHashCode();
                if (this.Udf2 != null)
                    hashCode = hashCode * 59 + this.Udf2.GetHashCode();
                if (this.Udf3 != null)
                    hashCode = hashCode * 59 + this.Udf3.GetHashCode();
                if (this.Unit != null)
                    hashCode = hashCode * 59 + this.Unit.GetHashCode();
                if (this.Variable != null)
                    hashCode = hashCode * 59 + this.Variable.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
