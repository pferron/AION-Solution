/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// InvoiceModel
    /// </summary>
    [DataContract]
        public partial class InvoiceModel :  IEquatable<InvoiceModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceModel" /> class.
        /// </summary>
        /// <param name="amount">The invoice fee amount..</param>
        /// <param name="auditStatus">The audit status of the invoice fee item..</param>
        /// <param name="balance">The amount due..</param>
        /// <param name="dueDate">The invoice due date..</param>
        /// <param name="fees">fees.</param>
        /// <param name="id">The unique id of the invoice..</param>
        /// <param name="invBatchDate">The invoice batch date..</param>
        /// <param name="invComment">A comment related to the invoice..</param>
        /// <param name="invoiceDate">The invoice date..</param>
        /// <param name="invoiceNumber">The invoice number string..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="udf1">Invoice user defined field 1..</param>
        /// <param name="udf2">Invoice user defined field 2..</param>
        /// <param name="udf3">Invoice user defined field 3..</param>
        /// <param name="udf4">Invoice user defined field 4..</param>
        public InvoiceModel(double? amount = default(double?), string auditStatus = default(string), double? balance = default(double?), DateTime? dueDate = default(DateTime?), List<FeeItemModel> fees = default(List<FeeItemModel>), long? id = default(long?), DateTime? invBatchDate = default(DateTime?), string invComment = default(string), DateTime? invoiceDate = default(DateTime?), string invoiceNumber = default(string), RecordIdModel recordId = default(RecordIdModel), string serviceProviderCode = default(string), string udf1 = default(string), string udf2 = default(string), string udf3 = default(string), string udf4 = default(string))
        {
            this.Amount = amount;
            this.AuditStatus = auditStatus;
            this.Balance = balance;
            this.DueDate = dueDate;
            this.Fees = fees;
            this.Id = id;
            this.InvBatchDate = invBatchDate;
            this.InvComment = invComment;
            this.InvoiceDate = invoiceDate;
            this.InvoiceNumber = invoiceNumber;
            this.RecordId = recordId;
            this.ServiceProviderCode = serviceProviderCode;
            this.Udf1 = udf1;
            this.Udf2 = udf2;
            this.Udf3 = udf3;
            this.Udf4 = udf4;
        }
        
        /// <summary>
        /// The invoice fee amount.
        /// </summary>
        /// <value>The invoice fee amount.</value>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// The audit status of the invoice fee item.
        /// </summary>
        /// <value>The audit status of the invoice fee item.</value>
        [DataMember(Name="auditStatus", EmitDefaultValue=false)]
        public string AuditStatus { get; set; }

        /// <summary>
        /// The amount due.
        /// </summary>
        /// <value>The amount due.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// The invoice due date.
        /// </summary>
        /// <value>The invoice due date.</value>
        [DataMember(Name="dueDate", EmitDefaultValue=false)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// Gets or Sets Fees
        /// </summary>
        [DataMember(Name="fees", EmitDefaultValue=false)]
        public List<FeeItemModel> Fees { get; set; }

        /// <summary>
        /// The unique id of the invoice.
        /// </summary>
        /// <value>The unique id of the invoice.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The invoice batch date.
        /// </summary>
        /// <value>The invoice batch date.</value>
        [DataMember(Name="invBatchDate", EmitDefaultValue=false)]
        public DateTime? InvBatchDate { get; set; }

        /// <summary>
        /// A comment related to the invoice.
        /// </summary>
        /// <value>A comment related to the invoice.</value>
        [DataMember(Name="invComment", EmitDefaultValue=false)]
        public string InvComment { get; set; }

        /// <summary>
        /// The invoice date.
        /// </summary>
        /// <value>The invoice date.</value>
        [DataMember(Name="invoiceDate", EmitDefaultValue=false)]
        public DateTime? InvoiceDate { get; set; }

        /// <summary>
        /// The invoice number string.
        /// </summary>
        /// <value>The invoice number string.</value>
        [DataMember(Name="invoiceNumber", EmitDefaultValue=false)]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Invoice user defined field 1.
        /// </summary>
        /// <value>Invoice user defined field 1.</value>
        [DataMember(Name="udf1", EmitDefaultValue=false)]
        public string Udf1 { get; set; }

        /// <summary>
        /// Invoice user defined field 2.
        /// </summary>
        /// <value>Invoice user defined field 2.</value>
        [DataMember(Name="udf2", EmitDefaultValue=false)]
        public string Udf2 { get; set; }

        /// <summary>
        /// Invoice user defined field 3.
        /// </summary>
        /// <value>Invoice user defined field 3.</value>
        [DataMember(Name="udf3", EmitDefaultValue=false)]
        public string Udf3 { get; set; }

        /// <summary>
        /// Invoice user defined field 4.
        /// </summary>
        /// <value>Invoice user defined field 4.</value>
        [DataMember(Name="udf4", EmitDefaultValue=false)]
        public string Udf4 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceModel {\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AuditStatus: ").Append(AuditStatus).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  Fees: ").Append(Fees).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InvBatchDate: ").Append(InvBatchDate).Append("\n");
            sb.Append("  InvComment: ").Append(InvComment).Append("\n");
            sb.Append("  InvoiceDate: ").Append(InvoiceDate).Append("\n");
            sb.Append("  InvoiceNumber: ").Append(InvoiceNumber).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Udf1: ").Append(Udf1).Append("\n");
            sb.Append("  Udf2: ").Append(Udf2).Append("\n");
            sb.Append("  Udf3: ").Append(Udf3).Append("\n");
            sb.Append("  Udf4: ").Append(Udf4).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InvoiceModel);
        }

        /// <summary>
        /// Returns true if InvoiceModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InvoiceModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.AuditStatus == input.AuditStatus ||
                    (this.AuditStatus != null &&
                    this.AuditStatus.Equals(input.AuditStatus))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.Fees == input.Fees ||
                    this.Fees != null &&
                    input.Fees != null &&
                    this.Fees.SequenceEqual(input.Fees)
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InvBatchDate == input.InvBatchDate ||
                    (this.InvBatchDate != null &&
                    this.InvBatchDate.Equals(input.InvBatchDate))
                ) && 
                (
                    this.InvComment == input.InvComment ||
                    (this.InvComment != null &&
                    this.InvComment.Equals(input.InvComment))
                ) && 
                (
                    this.InvoiceDate == input.InvoiceDate ||
                    (this.InvoiceDate != null &&
                    this.InvoiceDate.Equals(input.InvoiceDate))
                ) && 
                (
                    this.InvoiceNumber == input.InvoiceNumber ||
                    (this.InvoiceNumber != null &&
                    this.InvoiceNumber.Equals(input.InvoiceNumber))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Udf1 == input.Udf1 ||
                    (this.Udf1 != null &&
                    this.Udf1.Equals(input.Udf1))
                ) && 
                (
                    this.Udf2 == input.Udf2 ||
                    (this.Udf2 != null &&
                    this.Udf2.Equals(input.Udf2))
                ) && 
                (
                    this.Udf3 == input.Udf3 ||
                    (this.Udf3 != null &&
                    this.Udf3.Equals(input.Udf3))
                ) && 
                (
                    this.Udf4 == input.Udf4 ||
                    (this.Udf4 != null &&
                    this.Udf4.Equals(input.Udf4))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.AuditStatus != null)
                    hashCode = hashCode * 59 + this.AuditStatus.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.Fees != null)
                    hashCode = hashCode * 59 + this.Fees.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InvBatchDate != null)
                    hashCode = hashCode * 59 + this.InvBatchDate.GetHashCode();
                if (this.InvComment != null)
                    hashCode = hashCode * 59 + this.InvComment.GetHashCode();
                if (this.InvoiceDate != null)
                    hashCode = hashCode * 59 + this.InvoiceDate.GetHashCode();
                if (this.InvoiceNumber != null)
                    hashCode = hashCode * 59 + this.InvoiceNumber.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Udf1 != null)
                    hashCode = hashCode * 59 + this.Udf1.GetHashCode();
                if (this.Udf2 != null)
                    hashCode = hashCode * 59 + this.Udf2.GetHashCode();
                if (this.Udf3 != null)
                    hashCode = hashCode * 59 + this.Udf3.GetHashCode();
                if (this.Udf4 != null)
                    hashCode = hashCode * 59 + this.Udf4.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
