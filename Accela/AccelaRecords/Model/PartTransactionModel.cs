/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// PartTransactionModel
    /// </summary>
    [DataContract]
    public partial class PartTransactionModel :  IEquatable<PartTransactionModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the part transaction is a hard reservation. \&quot;Y\&quot;: A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. \&quot;N\&quot; : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change.
        /// </summary>
        /// <value>Indicates whether or not the part transaction is a hard reservation. \&quot;Y\&quot;: A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. \&quot;N\&quot; : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HardReservationEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the part transaction is a hard reservation. \&quot;Y\&quot;: A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. \&quot;N\&quot; : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change.
        /// </summary>
        /// <value>Indicates whether or not the part transaction is a hard reservation. \&quot;Y\&quot;: A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. \&quot;N\&quot; : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change.</value>
        [DataMember(Name="hardReservation", EmitDefaultValue=false)]
        public HardReservationEnum? HardReservation { get; set; }
        /// <summary>
        /// Indicates whether or not the part is taxable.
        /// </summary>
        /// <value>Indicates whether or not the part is taxable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TaxableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the part is taxable.
        /// </summary>
        /// <value>Indicates whether or not the part is taxable.</value>
        [DataMember(Name="taxable", EmitDefaultValue=false)]
        public TaxableEnum? Taxable { get; set; }
        /// <summary>
        /// The part transaction type. Possible values:  \&quot;Issue\&quot; : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part.  \&quot;Receive\&quot; : occurs when someone purchases a part or returns a part to a location.  \&quot;Transfer\&quot; : occurs when someone moves a part from one location to another.  \&quot;Adjust\&quot; : occurs when someone makes quantity adjustments for cycle counts.  \&quot;Reserve\&quot; : occurs when someone sets aside parts so they can issue them at a later date.
        /// </summary>
        /// <value>The part transaction type. Possible values:  \&quot;Issue\&quot; : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part.  \&quot;Receive\&quot; : occurs when someone purchases a part or returns a part to a location.  \&quot;Transfer\&quot; : occurs when someone moves a part from one location to another.  \&quot;Adjust\&quot; : occurs when someone makes quantity adjustments for cycle counts.  \&quot;Reserve\&quot; : occurs when someone sets aside parts so they can issue them at a later date.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TransactionTypeEnum
        {
            
            /// <summary>
            /// Enum Issue for value: Issue
            /// </summary>
            [EnumMember(Value = "Issue")]
            Issue = 1,
            
            /// <summary>
            /// Enum Receive for value: Receive
            /// </summary>
            [EnumMember(Value = "Receive")]
            Receive = 2,
            
            /// <summary>
            /// Enum Transfer for value: Transfer
            /// </summary>
            [EnumMember(Value = "Transfer")]
            Transfer = 3,
            
            /// <summary>
            /// Enum Adjust for value: Adjust
            /// </summary>
            [EnumMember(Value = "Adjust")]
            Adjust = 4,
            
            /// <summary>
            /// Enum Reserve for value: Reserve
            /// </summary>
            [EnumMember(Value = "Reserve")]
            Reserve = 5
        }

        /// <summary>
        /// The part transaction type. Possible values:  \&quot;Issue\&quot; : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part.  \&quot;Receive\&quot; : occurs when someone purchases a part or returns a part to a location.  \&quot;Transfer\&quot; : occurs when someone moves a part from one location to another.  \&quot;Adjust\&quot; : occurs when someone makes quantity adjustments for cycle counts.  \&quot;Reserve\&quot; : occurs when someone sets aside parts so they can issue them at a later date.
        /// </summary>
        /// <value>The part transaction type. Possible values:  \&quot;Issue\&quot; : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part.  \&quot;Receive\&quot; : occurs when someone purchases a part or returns a part to a location.  \&quot;Transfer\&quot; : occurs when someone moves a part from one location to another.  \&quot;Adjust\&quot; : occurs when someone makes quantity adjustments for cycle counts.  \&quot;Reserve\&quot; : occurs when someone sets aside parts so they can issue them at a later date.</value>
        [DataMember(Name="transactionType", EmitDefaultValue=false)]
        public TransactionTypeEnum? TransactionType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PartTransactionModel" /> class.
        /// </summary>
        /// <param name="accountName">The budget account name associated with the part transaction..</param>
        /// <param name="accountNumber">The budget account number associated with the part transaction..</param>
        /// <param name="comments">Comments or notes about the current context..</param>
        /// <param name="costTotal">The total cost of the part transaction..</param>
        /// <param name="hardReservation">Indicates whether or not the part transaction is a hard reservation. \&quot;Y\&quot;: A hard reservation which guarantees the reservation, and subtract the order from the quantity on hand. \&quot;N\&quot; : A soft reservation which alerts the warehouse that houses the part that someone may request the part. The quantity on hand of the part does not change..</param>
        /// <param name="id">The part transaction system id assigned by the Civic Platform server..</param>
        /// <param name="locationId">The location ID associated with the part transaction..</param>
        /// <param name="partBin">The name of the part bin..</param>
        /// <param name="partBrand">The name of the part brand..</param>
        /// <param name="partDescription">The description of the part..</param>
        /// <param name="partId">The part ID..</param>
        /// <param name="partLocation">The location of the part..</param>
        /// <param name="partNumber">The number of the part..</param>
        /// <param name="quantity">The number of units for which the same fee applies..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="resToPartLocation">resToPartLocation.</param>
        /// <param name="reservationNumber">The part reservation number..</param>
        /// <param name="reservationStatus">The status of the part reservation..</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="status">status.</param>
        /// <param name="taxable">Indicates whether or not the part is taxable..</param>
        /// <param name="transactionCost">The part transaction cost..</param>
        /// <param name="transactionDate">The part transaction date..</param>
        /// <param name="transactionType">The part transaction type. Possible values:  \&quot;Issue\&quot; : occurs either when someone requests and receives a part on the spot, or when someone receives a reserved part.  \&quot;Receive\&quot; : occurs when someone purchases a part or returns a part to a location.  \&quot;Transfer\&quot; : occurs when someone moves a part from one location to another.  \&quot;Adjust\&quot; : occurs when someone makes quantity adjustments for cycle counts.  \&quot;Reserve\&quot; : occurs when someone sets aside parts so they can issue them at a later date..</param>
        /// <param name="type">type.</param>
        /// <param name="unitCost">The unit cost per part..</param>
        /// <param name="unitMeasurement">unitMeasurement.</param>
        /// <param name="updatedBy">The user who last updated the checklist or checklist item..</param>
        /// <param name="workOrderTaskCode">The work order task code associated with the part transactionmodel..</param>
        /// <param name="workOrderTaskCodeIndex">The work order task code index associated with the part transactionmodel..</param>
        public PartTransactionModel(string accountName = default(string), string accountNumber = default(string), string comments = default(string), double? costTotal = default(double?), HardReservationEnum? hardReservation = default(HardReservationEnum?), long? id = default(long?), long? locationId = default(long?), string partBin = default(string), string partBrand = default(string), string partDescription = default(string), long? partId = default(long?), string partLocation = default(string), string partNumber = default(string), double? quantity = default(double?), RecordIdModel recordId = default(RecordIdModel), string resToPartLocation = default(string), long? reservationNumber = default(long?), string reservationStatus = default(string), string serviceProviderCode = default(string), PartTransactionModelStatus status = default(PartTransactionModelStatus), TaxableEnum? taxable = default(TaxableEnum?), double? transactionCost = default(double?), DateTime? transactionDate = default(DateTime?), TransactionTypeEnum? transactionType = default(TransactionTypeEnum?), PartTransactionModelType type = default(PartTransactionModelType), double? unitCost = default(double?), PartTransactionModelUnitMeasurement unitMeasurement = default(PartTransactionModelUnitMeasurement), string updatedBy = default(string), string workOrderTaskCode = default(string), long? workOrderTaskCodeIndex = default(long?))
        {
            this.AccountName = accountName;
            this.AccountNumber = accountNumber;
            this.Comments = comments;
            this.CostTotal = costTotal;
            this.HardReservation = hardReservation;
            this.Id = id;
            this.LocationId = locationId;
            this.PartBin = partBin;
            this.PartBrand = partBrand;
            this.PartDescription = partDescription;
            this.PartId = partId;
            this.PartLocation = partLocation;
            this.PartNumber = partNumber;
            this.Quantity = quantity;
            this.RecordId = recordId;
            this.ResToPartLocation = resToPartLocation;
            this.ReservationNumber = reservationNumber;
            this.ReservationStatus = reservationStatus;
            this.ServiceProviderCode = serviceProviderCode;
            this.Status = status;
            this.Taxable = taxable;
            this.TransactionCost = transactionCost;
            this.TransactionDate = transactionDate;
            this.TransactionType = transactionType;
            this.Type = type;
            this.UnitCost = unitCost;
            this.UnitMeasurement = unitMeasurement;
            this.UpdatedBy = updatedBy;
            this.WorkOrderTaskCode = workOrderTaskCode;
            this.WorkOrderTaskCodeIndex = workOrderTaskCodeIndex;
        }
        
        /// <summary>
        /// The budget account name associated with the part transaction.
        /// </summary>
        /// <value>The budget account name associated with the part transaction.</value>
        [DataMember(Name="accountName", EmitDefaultValue=false)]
        public string AccountName { get; set; }

        /// <summary>
        /// The budget account number associated with the part transaction.
        /// </summary>
        /// <value>The budget account number associated with the part transaction.</value>
        [DataMember(Name="accountNumber", EmitDefaultValue=false)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// Comments or notes about the current context.
        /// </summary>
        /// <value>Comments or notes about the current context.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The total cost of the part transaction.
        /// </summary>
        /// <value>The total cost of the part transaction.</value>
        [DataMember(Name="costTotal", EmitDefaultValue=false)]
        public double? CostTotal { get; set; }


        /// <summary>
        /// The part transaction system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The part transaction system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The location ID associated with the part transaction.
        /// </summary>
        /// <value>The location ID associated with the part transaction.</value>
        [DataMember(Name="locationId", EmitDefaultValue=false)]
        public long? LocationId { get; set; }

        /// <summary>
        /// The name of the part bin.
        /// </summary>
        /// <value>The name of the part bin.</value>
        [DataMember(Name="partBin", EmitDefaultValue=false)]
        public string PartBin { get; set; }

        /// <summary>
        /// The name of the part brand.
        /// </summary>
        /// <value>The name of the part brand.</value>
        [DataMember(Name="partBrand", EmitDefaultValue=false)]
        public string PartBrand { get; set; }

        /// <summary>
        /// The description of the part.
        /// </summary>
        /// <value>The description of the part.</value>
        [DataMember(Name="partDescription", EmitDefaultValue=false)]
        public string PartDescription { get; set; }

        /// <summary>
        /// The part ID.
        /// </summary>
        /// <value>The part ID.</value>
        [DataMember(Name="partId", EmitDefaultValue=false)]
        public long? PartId { get; set; }

        /// <summary>
        /// The location of the part.
        /// </summary>
        /// <value>The location of the part.</value>
        [DataMember(Name="partLocation", EmitDefaultValue=false)]
        public string PartLocation { get; set; }

        /// <summary>
        /// The number of the part.
        /// </summary>
        /// <value>The number of the part.</value>
        [DataMember(Name="partNumber", EmitDefaultValue=false)]
        public string PartNumber { get; set; }

        /// <summary>
        /// The number of units for which the same fee applies.
        /// </summary>
        /// <value>The number of units for which the same fee applies.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// Gets or Sets ResToPartLocation
        /// </summary>
        [DataMember(Name="resToPartLocation", EmitDefaultValue=false)]
        public string ResToPartLocation { get; set; }

        /// <summary>
        /// The part reservation number.
        /// </summary>
        /// <value>The part reservation number.</value>
        [DataMember(Name="reservationNumber", EmitDefaultValue=false)]
        public long? ReservationNumber { get; set; }

        /// <summary>
        /// The status of the part reservation.
        /// </summary>
        /// <value>The status of the part reservation.</value>
        [DataMember(Name="reservationStatus", EmitDefaultValue=false)]
        public string ReservationStatus { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public PartTransactionModelStatus Status { get; set; }


        /// <summary>
        /// The part transaction cost.
        /// </summary>
        /// <value>The part transaction cost.</value>
        [DataMember(Name="transactionCost", EmitDefaultValue=false)]
        public double? TransactionCost { get; set; }

        /// <summary>
        /// The part transaction date.
        /// </summary>
        /// <value>The part transaction date.</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public DateTime? TransactionDate { get; set; }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public PartTransactionModelType Type { get; set; }

        /// <summary>
        /// The unit cost per part.
        /// </summary>
        /// <value>The unit cost per part.</value>
        [DataMember(Name="unitCost", EmitDefaultValue=false)]
        public double? UnitCost { get; set; }

        /// <summary>
        /// Gets or Sets UnitMeasurement
        /// </summary>
        [DataMember(Name="unitMeasurement", EmitDefaultValue=false)]
        public PartTransactionModelUnitMeasurement UnitMeasurement { get; set; }

        /// <summary>
        /// The user who last updated the checklist or checklist item.
        /// </summary>
        /// <value>The user who last updated the checklist or checklist item.</value>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The work order task code associated with the part transactionmodel.
        /// </summary>
        /// <value>The work order task code associated with the part transactionmodel.</value>
        [DataMember(Name="workOrderTaskCode", EmitDefaultValue=false)]
        public string WorkOrderTaskCode { get; set; }

        /// <summary>
        /// The work order task code index associated with the part transactionmodel.
        /// </summary>
        /// <value>The work order task code index associated with the part transactionmodel.</value>
        [DataMember(Name="workOrderTaskCodeIndex", EmitDefaultValue=false)]
        public long? WorkOrderTaskCodeIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartTransactionModel {\n");
            sb.Append("  AccountName: ").Append(AccountName).Append("\n");
            sb.Append("  AccountNumber: ").Append(AccountNumber).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CostTotal: ").Append(CostTotal).Append("\n");
            sb.Append("  HardReservation: ").Append(HardReservation).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  PartBin: ").Append(PartBin).Append("\n");
            sb.Append("  PartBrand: ").Append(PartBrand).Append("\n");
            sb.Append("  PartDescription: ").Append(PartDescription).Append("\n");
            sb.Append("  PartId: ").Append(PartId).Append("\n");
            sb.Append("  PartLocation: ").Append(PartLocation).Append("\n");
            sb.Append("  PartNumber: ").Append(PartNumber).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ResToPartLocation: ").Append(ResToPartLocation).Append("\n");
            sb.Append("  ReservationNumber: ").Append(ReservationNumber).Append("\n");
            sb.Append("  ReservationStatus: ").Append(ReservationStatus).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Taxable: ").Append(Taxable).Append("\n");
            sb.Append("  TransactionCost: ").Append(TransactionCost).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitCost: ").Append(UnitCost).Append("\n");
            sb.Append("  UnitMeasurement: ").Append(UnitMeasurement).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  WorkOrderTaskCode: ").Append(WorkOrderTaskCode).Append("\n");
            sb.Append("  WorkOrderTaskCodeIndex: ").Append(WorkOrderTaskCodeIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartTransactionModel);
        }

        /// <summary>
        /// Returns true if PartTransactionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PartTransactionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartTransactionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AccountName == input.AccountName ||
                    (this.AccountName != null &&
                    this.AccountName.Equals(input.AccountName))
                ) && 
                (
                    this.AccountNumber == input.AccountNumber ||
                    (this.AccountNumber != null &&
                    this.AccountNumber.Equals(input.AccountNumber))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CostTotal == input.CostTotal ||
                    (this.CostTotal != null &&
                    this.CostTotal.Equals(input.CostTotal))
                ) && 
                (
                    this.HardReservation == input.HardReservation ||
                    (this.HardReservation != null &&
                    this.HardReservation.Equals(input.HardReservation))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LocationId == input.LocationId ||
                    (this.LocationId != null &&
                    this.LocationId.Equals(input.LocationId))
                ) && 
                (
                    this.PartBin == input.PartBin ||
                    (this.PartBin != null &&
                    this.PartBin.Equals(input.PartBin))
                ) && 
                (
                    this.PartBrand == input.PartBrand ||
                    (this.PartBrand != null &&
                    this.PartBrand.Equals(input.PartBrand))
                ) && 
                (
                    this.PartDescription == input.PartDescription ||
                    (this.PartDescription != null &&
                    this.PartDescription.Equals(input.PartDescription))
                ) && 
                (
                    this.PartId == input.PartId ||
                    (this.PartId != null &&
                    this.PartId.Equals(input.PartId))
                ) && 
                (
                    this.PartLocation == input.PartLocation ||
                    (this.PartLocation != null &&
                    this.PartLocation.Equals(input.PartLocation))
                ) && 
                (
                    this.PartNumber == input.PartNumber ||
                    (this.PartNumber != null &&
                    this.PartNumber.Equals(input.PartNumber))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ResToPartLocation == input.ResToPartLocation ||
                    (this.ResToPartLocation != null &&
                    this.ResToPartLocation.Equals(input.ResToPartLocation))
                ) && 
                (
                    this.ReservationNumber == input.ReservationNumber ||
                    (this.ReservationNumber != null &&
                    this.ReservationNumber.Equals(input.ReservationNumber))
                ) && 
                (
                    this.ReservationStatus == input.ReservationStatus ||
                    (this.ReservationStatus != null &&
                    this.ReservationStatus.Equals(input.ReservationStatus))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Taxable == input.Taxable ||
                    (this.Taxable != null &&
                    this.Taxable.Equals(input.Taxable))
                ) && 
                (
                    this.TransactionCost == input.TransactionCost ||
                    (this.TransactionCost != null &&
                    this.TransactionCost.Equals(input.TransactionCost))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                ) && 
                (
                    this.TransactionType == input.TransactionType ||
                    (this.TransactionType != null &&
                    this.TransactionType.Equals(input.TransactionType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnitCost == input.UnitCost ||
                    (this.UnitCost != null &&
                    this.UnitCost.Equals(input.UnitCost))
                ) && 
                (
                    this.UnitMeasurement == input.UnitMeasurement ||
                    (this.UnitMeasurement != null &&
                    this.UnitMeasurement.Equals(input.UnitMeasurement))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.WorkOrderTaskCode == input.WorkOrderTaskCode ||
                    (this.WorkOrderTaskCode != null &&
                    this.WorkOrderTaskCode.Equals(input.WorkOrderTaskCode))
                ) && 
                (
                    this.WorkOrderTaskCodeIndex == input.WorkOrderTaskCodeIndex ||
                    (this.WorkOrderTaskCodeIndex != null &&
                    this.WorkOrderTaskCodeIndex.Equals(input.WorkOrderTaskCodeIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountName != null)
                    hashCode = hashCode * 59 + this.AccountName.GetHashCode();
                if (this.AccountNumber != null)
                    hashCode = hashCode * 59 + this.AccountNumber.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CostTotal != null)
                    hashCode = hashCode * 59 + this.CostTotal.GetHashCode();
                if (this.HardReservation != null)
                    hashCode = hashCode * 59 + this.HardReservation.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LocationId != null)
                    hashCode = hashCode * 59 + this.LocationId.GetHashCode();
                if (this.PartBin != null)
                    hashCode = hashCode * 59 + this.PartBin.GetHashCode();
                if (this.PartBrand != null)
                    hashCode = hashCode * 59 + this.PartBrand.GetHashCode();
                if (this.PartDescription != null)
                    hashCode = hashCode * 59 + this.PartDescription.GetHashCode();
                if (this.PartId != null)
                    hashCode = hashCode * 59 + this.PartId.GetHashCode();
                if (this.PartLocation != null)
                    hashCode = hashCode * 59 + this.PartLocation.GetHashCode();
                if (this.PartNumber != null)
                    hashCode = hashCode * 59 + this.PartNumber.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ResToPartLocation != null)
                    hashCode = hashCode * 59 + this.ResToPartLocation.GetHashCode();
                if (this.ReservationNumber != null)
                    hashCode = hashCode * 59 + this.ReservationNumber.GetHashCode();
                if (this.ReservationStatus != null)
                    hashCode = hashCode * 59 + this.ReservationStatus.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Taxable != null)
                    hashCode = hashCode * 59 + this.Taxable.GetHashCode();
                if (this.TransactionCost != null)
                    hashCode = hashCode * 59 + this.TransactionCost.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                if (this.TransactionType != null)
                    hashCode = hashCode * 59 + this.TransactionType.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitCost != null)
                    hashCode = hashCode * 59 + this.UnitCost.GetHashCode();
                if (this.UnitMeasurement != null)
                    hashCode = hashCode * 59 + this.UnitMeasurement.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.WorkOrderTaskCode != null)
                    hashCode = hashCode * 59 + this.WorkOrderTaskCode.GetHashCode();
                if (this.WorkOrderTaskCodeIndex != null)
                    hashCode = hashCode * 59 + this.WorkOrderTaskCodeIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
