/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// TrustAccountModel
    /// </summary>
    [DataContract]
        public partial class TrustAccountModel :  IEquatable<TrustAccountModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not to designate the trust account as the primary source.
        /// </summary>
        /// <value>Indicates whether or not to designate the trust account as the primary source.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum IsPrimaryEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 0,
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1        }
        /// <summary>
        /// Indicates whether or not to designate the trust account as the primary source.
        /// </summary>
        /// <value>Indicates whether or not to designate the trust account as the primary source.</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public IsPrimaryEnum? IsPrimary { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrustAccountModel" /> class.
        /// </summary>
        /// <param name="account">The account ID number for the trust account..</param>
        /// <param name="associations">associations.</param>
        /// <param name="balance">The balance of the trust account in dollars..</param>
        /// <param name="description">The description of the trust account..</param>
        /// <param name="id">The trust account system id assigned by the Civic Platform server..</param>
        /// <param name="isPrimary">Indicates whether or not to designate the trust account as the primary source..</param>
        /// <param name="ledgerAccount">The ledger account of the trust account..</param>
        /// <param name="overdraft">overdraft.</param>
        /// <param name="overdraftLimit">The overdraft limit amount, in dollars, for the trust account..</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="status">status.</param>
        /// <param name="thresholdAmount">The minimum amount required in a trust account..</param>
        public TrustAccountModel(string account = default(string), TrustAccountRequestModelAssociations associations = default(TrustAccountRequestModelAssociations), double? balance = default(double?), string description = default(string), long? id = default(long?), IsPrimaryEnum? isPrimary = default(IsPrimaryEnum?), string ledgerAccount = default(string), TrustAccountRequestModelOverdraft overdraft = default(TrustAccountRequestModelOverdraft), double? overdraftLimit = default(double?), string serviceProviderCode = default(string), TrustAccountRequestModelStatus status = default(TrustAccountRequestModelStatus), double? thresholdAmount = default(double?))
        {
            this.Account = account;
            this.Associations = associations;
            this.Balance = balance;
            this.Description = description;
            this.Id = id;
            this.IsPrimary = isPrimary;
            this.LedgerAccount = ledgerAccount;
            this.Overdraft = overdraft;
            this.OverdraftLimit = overdraftLimit;
            this.ServiceProviderCode = serviceProviderCode;
            this.Status = status;
            this.ThresholdAmount = thresholdAmount;
        }
        
        /// <summary>
        /// The account ID number for the trust account.
        /// </summary>
        /// <value>The account ID number for the trust account.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations", EmitDefaultValue=false)]
        public TrustAccountRequestModelAssociations Associations { get; set; }

        /// <summary>
        /// The balance of the trust account in dollars.
        /// </summary>
        /// <value>The balance of the trust account in dollars.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// The description of the trust account.
        /// </summary>
        /// <value>The description of the trust account.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The trust account system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The trust account system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// The ledger account of the trust account.
        /// </summary>
        /// <value>The ledger account of the trust account.</value>
        [DataMember(Name="ledgerAccount", EmitDefaultValue=false)]
        public string LedgerAccount { get; set; }

        /// <summary>
        /// Gets or Sets Overdraft
        /// </summary>
        [DataMember(Name="overdraft", EmitDefaultValue=false)]
        public TrustAccountRequestModelOverdraft Overdraft { get; set; }

        /// <summary>
        /// The overdraft limit amount, in dollars, for the trust account.
        /// </summary>
        /// <value>The overdraft limit amount, in dollars, for the trust account.</value>
        [DataMember(Name="overdraftLimit", EmitDefaultValue=false)]
        public double? OverdraftLimit { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TrustAccountRequestModelStatus Status { get; set; }

        /// <summary>
        /// The minimum amount required in a trust account.
        /// </summary>
        /// <value>The minimum amount required in a trust account.</value>
        [DataMember(Name="thresholdAmount", EmitDefaultValue=false)]
        public double? ThresholdAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrustAccountModel {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LedgerAccount: ").Append(LedgerAccount).Append("\n");
            sb.Append("  Overdraft: ").Append(Overdraft).Append("\n");
            sb.Append("  OverdraftLimit: ").Append(OverdraftLimit).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ThresholdAmount: ").Append(ThresholdAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrustAccountModel);
        }

        /// <summary>
        /// Returns true if TrustAccountModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TrustAccountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrustAccountModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LedgerAccount == input.LedgerAccount ||
                    (this.LedgerAccount != null &&
                    this.LedgerAccount.Equals(input.LedgerAccount))
                ) && 
                (
                    this.Overdraft == input.Overdraft ||
                    (this.Overdraft != null &&
                    this.Overdraft.Equals(input.Overdraft))
                ) && 
                (
                    this.OverdraftLimit == input.OverdraftLimit ||
                    (this.OverdraftLimit != null &&
                    this.OverdraftLimit.Equals(input.OverdraftLimit))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ThresholdAmount == input.ThresholdAmount ||
                    (this.ThresholdAmount != null &&
                    this.ThresholdAmount.Equals(input.ThresholdAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Associations != null)
                    hashCode = hashCode * 59 + this.Associations.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LedgerAccount != null)
                    hashCode = hashCode * 59 + this.LedgerAccount.GetHashCode();
                if (this.Overdraft != null)
                    hashCode = hashCode * 59 + this.Overdraft.GetHashCode();
                if (this.OverdraftLimit != null)
                    hashCode = hashCode * 59 + this.OverdraftLimit.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ThresholdAmount != null)
                    hashCode = hashCode * 59 + this.ThresholdAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
