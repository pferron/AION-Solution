/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// InspectionChecklistModel
    /// </summary>
    [DataContract]
    public partial class InspectionChecklistModel :  IEquatable<InspectionChecklistModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the checklist is required.
        /// </summary>
        /// <value>Indicates whether or not the checklist is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the checklist is required.
        /// </summary>
        /// <value>Indicates whether or not the checklist is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionChecklistModel" /> class.
        /// </summary>
        /// <param name="checklistDesc">The checklist description..</param>
        /// <param name="checklistStatus">The status of the checklist..</param>
        /// <param name="customId">An ID based on a different numbering convention from the numbering convention used by the record ID(xxxxx - xx - xxxxx).Accela Automation auto - generates and applies an alternate ID value when you submit a new application..</param>
        /// <param name="defaultOrderBy">The field by which the checklist items are ordered by default ..</param>
        /// <param name="entityType">The type of entity, for example \&quot;INSPECTION\&quot;..</param>
        /// <param name="group">The inspection checklist group..</param>
        /// <param name="guideType">guideType.</param>
        /// <param name="id">The checklist system id assigned by the Civic Platform server..</param>
        /// <param name="inspectionId">The ID of the inspection..</param>
        /// <param name="isRequired">Indicates whether or not the checklist is required..</param>
        /// <param name="items">items.</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        public InspectionChecklistModel(string checklistDesc = default(string), string checklistStatus = default(string), string customId = default(string), string defaultOrderBy = default(string), string entityType = default(string), string group = default(string), InspectionChecklistModelGuideType guideType = default(InspectionChecklistModelGuideType), long? id = default(long?), string inspectionId = default(string), IsRequiredEnum? isRequired = default(IsRequiredEnum?), List<InspectionChecklistItemModel> items = default(List<InspectionChecklistItemModel>), RecordIdModel recordId = default(RecordIdModel), string serviceProviderCode = default(string))
        {
            this.ChecklistDesc = checklistDesc;
            this.ChecklistStatus = checklistStatus;
            this.CustomId = customId;
            this.DefaultOrderBy = defaultOrderBy;
            this.EntityType = entityType;
            this.Group = group;
            this.GuideType = guideType;
            this.Id = id;
            this.InspectionId = inspectionId;
            this.IsRequired = isRequired;
            this.Items = items;
            this.RecordId = recordId;
            this.ServiceProviderCode = serviceProviderCode;
        }
        
        /// <summary>
        /// The checklist description.
        /// </summary>
        /// <value>The checklist description.</value>
        [DataMember(Name="checklistDesc", EmitDefaultValue=false)]
        public string ChecklistDesc { get; set; }

        /// <summary>
        /// The status of the checklist.
        /// </summary>
        /// <value>The status of the checklist.</value>
        [DataMember(Name="checklistStatus", EmitDefaultValue=false)]
        public string ChecklistStatus { get; set; }

        /// <summary>
        /// An ID based on a different numbering convention from the numbering convention used by the record ID(xxxxx - xx - xxxxx).Accela Automation auto - generates and applies an alternate ID value when you submit a new application.
        /// </summary>
        /// <value>An ID based on a different numbering convention from the numbering convention used by the record ID(xxxxx - xx - xxxxx).Accela Automation auto - generates and applies an alternate ID value when you submit a new application.</value>
        [DataMember(Name="customId", EmitDefaultValue=false)]
        public string CustomId { get; set; }

        /// <summary>
        /// The field by which the checklist items are ordered by default .
        /// </summary>
        /// <value>The field by which the checklist items are ordered by default .</value>
        [DataMember(Name="defaultOrderBy", EmitDefaultValue=false)]
        public string DefaultOrderBy { get; set; }

        /// <summary>
        /// The type of entity, for example \&quot;INSPECTION\&quot;.
        /// </summary>
        /// <value>The type of entity, for example \&quot;INSPECTION\&quot;.</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// The inspection checklist group.
        /// </summary>
        /// <value>The inspection checklist group.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets GuideType
        /// </summary>
        [DataMember(Name="guideType", EmitDefaultValue=false)]
        public InspectionChecklistModelGuideType GuideType { get; set; }

        /// <summary>
        /// The checklist system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The checklist system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The ID of the inspection.
        /// </summary>
        /// <value>The ID of the inspection.</value>
        [DataMember(Name="inspectionId", EmitDefaultValue=false)]
        public string InspectionId { get; set; }


        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=false)]
        public List<InspectionChecklistItemModel> Items { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionChecklistModel {\n");
            sb.Append("  ChecklistDesc: ").Append(ChecklistDesc).Append("\n");
            sb.Append("  ChecklistStatus: ").Append(ChecklistStatus).Append("\n");
            sb.Append("  CustomId: ").Append(CustomId).Append("\n");
            sb.Append("  DefaultOrderBy: ").Append(DefaultOrderBy).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  GuideType: ").Append(GuideType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InspectionId: ").Append(InspectionId).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectionChecklistModel);
        }

        /// <summary>
        /// Returns true if InspectionChecklistModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectionChecklistModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionChecklistModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChecklistDesc == input.ChecklistDesc ||
                    (this.ChecklistDesc != null &&
                    this.ChecklistDesc.Equals(input.ChecklistDesc))
                ) && 
                (
                    this.ChecklistStatus == input.ChecklistStatus ||
                    (this.ChecklistStatus != null &&
                    this.ChecklistStatus.Equals(input.ChecklistStatus))
                ) && 
                (
                    this.CustomId == input.CustomId ||
                    (this.CustomId != null &&
                    this.CustomId.Equals(input.CustomId))
                ) && 
                (
                    this.DefaultOrderBy == input.DefaultOrderBy ||
                    (this.DefaultOrderBy != null &&
                    this.DefaultOrderBy.Equals(input.DefaultOrderBy))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.GuideType == input.GuideType ||
                    (this.GuideType != null &&
                    this.GuideType.Equals(input.GuideType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InspectionId == input.InspectionId ||
                    (this.InspectionId != null &&
                    this.InspectionId.Equals(input.InspectionId))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChecklistDesc != null)
                    hashCode = hashCode * 59 + this.ChecklistDesc.GetHashCode();
                if (this.ChecklistStatus != null)
                    hashCode = hashCode * 59 + this.ChecklistStatus.GetHashCode();
                if (this.CustomId != null)
                    hashCode = hashCode * 59 + this.CustomId.GetHashCode();
                if (this.DefaultOrderBy != null)
                    hashCode = hashCode * 59 + this.DefaultOrderBy.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.GuideType != null)
                    hashCode = hashCode * 59 + this.GuideType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InspectionId != null)
                    hashCode = hashCode * 59 + this.InspectionId.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
