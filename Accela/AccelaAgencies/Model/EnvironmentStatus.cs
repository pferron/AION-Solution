/* 
 * Agencies-b
 *
 * The Agencies API provides agency information as configured in the [Construct Admin Portal](https://admin.accela.com).
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAgencies.Client.SwaggerDateConverter;

namespace AccelaAgencies.Model
{
    /// <summary>
    /// EnvironmentStatus
    /// </summary>
    [DataContract]
        public partial class EnvironmentStatus :  IEquatable<EnvironmentStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentStatus" /> class.
        /// </summary>
        /// <param name="isAvailable">Indicates whether or not the requested environment is available. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), false is returned..</param>
        /// <param name="appServerVersion">The Civic Platform app server version. Note that this API requires Accela Gateway 3.2.0+ to return an accurate version of the Civic Platform app server..</param>
        public EnvironmentStatus(bool? isAvailable = default(bool?), string appServerVersion = default(string))
        {
            this.IsAvailable = isAvailable;
            this.AppServerVersion = appServerVersion;
        }
        
        /// <summary>
        /// Indicates whether or not the requested environment is available. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), false is returned.
        /// </summary>
        /// <value>Indicates whether or not the requested environment is available. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), false is returned.</value>
        [DataMember(Name="isAvailable", EmitDefaultValue=false)]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// The Civic Platform app server version. Note that this API requires Accela Gateway 3.2.0+ to return an accurate version of the Civic Platform app server.
        /// </summary>
        /// <value>The Civic Platform app server version. Note that this API requires Accela Gateway 3.2.0+ to return an accurate version of the Civic Platform app server.</value>
        [DataMember(Name="appServerVersion", EmitDefaultValue=false)]
        public string AppServerVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentStatus {\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  AppServerVersion: ").Append(AppServerVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentStatus);
        }

        /// <summary>
        /// Returns true if EnvironmentStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentStatus input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IsAvailable == input.IsAvailable ||
                    (this.IsAvailable != null &&
                    this.IsAvailable.Equals(input.IsAvailable))
                ) && 
                (
                    this.AppServerVersion == input.AppServerVersion ||
                    (this.AppServerVersion != null &&
                    this.AppServerVersion.Equals(input.AppServerVersion))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IsAvailable != null)
                    hashCode = hashCode * 59 + this.IsAvailable.GetHashCode();
                if (this.AppServerVersion != null)
                    hashCode = hashCode * 59 + this.AppServerVersion.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
