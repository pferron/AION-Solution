/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAddressParcelsOwners.Client.SwaggerDateConverter;

namespace AccelaAddressParcelsOwners.Model
{
    /// <summary>
    /// RequestAddressModelWithCustomForms
    /// </summary>
    [DataContract]
    public partial class RequestAddressModelWithCustomForms :  IEquatable<RequestAddressModelWithCustomForms>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RequestAddressModelWithCustomForms" /> class.
        /// </summary>
        /// <param name="addressLine1">The first line of the address..</param>
        /// <param name="addressLine2">The first line of the address..</param>
        /// <param name="addressTypeFlag">addressTypeFlag.</param>
        /// <param name="auditStatus">The audit status of the address..</param>
        /// <param name="city">The name of the city..</param>
        /// <param name="country">country.</param>
        /// <param name="county">The name of the county..</param>
        /// <param name="customForms">customForms.</param>
        /// <param name="description">A description of the address..</param>
        /// <param name="direction">direction.</param>
        /// <param name="distance">The distance from another landmark used to locate the address..</param>
        /// <param name="houseAlphaStart">The beginning alphabetic unit in street address..</param>
        /// <param name="houseAlphaEnd">The ending alphabetic unit in street address..</param>
        /// <param name="houseFractionStart">houseFractionStart.</param>
        /// <param name="houseFractionEnd">houseFractionEnd.</param>
        /// <param name="houseNumberEndFrom">The first of the ending house number range..</param>
        /// <param name="houseNumberEndTo">The last of the ending house number range..</param>
        /// <param name="houseNumberStartFrom">The first of the start house number range..</param>
        /// <param name="houseNumberStartTo">The last of the start house number range..</param>
        /// <param name="inspectionDistrict">The inspection district where the address is located..</param>
        /// <param name="inspectionDistrictPrefix">The prefix for the inspection district where the address is located..</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time..</param>
        /// <param name="levelStart">The starting level number (floor number) that makes up the address within a complex..</param>
        /// <param name="levelEnd">The ending level number (floor number) that makes up the address within a complex..</param>
        /// <param name="levelPrefix">The prefix for the level numbers (floor numbers) that make up the address..</param>
        /// <param name="neighborhood">The neighborhood where the address is located..</param>
        /// <param name="neighborhoodPrefix">The prefix for neighborhood where the address is located..</param>
        /// <param name="postalCode">The postal ZIP code for the address..</param>
        /// <param name="secondaryStreet">This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location..</param>
        /// <param name="secondaryStreetNumber">This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location..</param>
        /// <param name="sourceFlag">The Accela permitting system that stores this address information, such as Civic Platform, Kiva, or Tidemark..</param>
        /// <param name="sourceNumber">A number that identifies the Accela permitting system that stores this address information..</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="streetAddress">The street address..</param>
        /// <param name="streetEnd">The ending number of a street address range..</param>
        /// <param name="streetName">The name of the street..</param>
        /// <param name="streetPrefix">Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \&quot;West\&quot;is the street prefix..</param>
        /// <param name="streetStart">The starting number of a street address range..</param>
        /// <param name="streetSuffix">streetSuffix.</param>
        /// <param name="streetSuffixDirection">streetSuffixDirection.</param>
        /// <param name="unitStart">The starting value of a range of unit numbers..</param>
        /// <param name="unitEnd">The ending value of a range of unit numbers..</param>
        /// <param name="unitType">unitType.</param>
        /// <param name="xCoordinate">The longitudinal coordinate for this address..</param>
        /// <param name="yCoordinate">The latitudinal coordinate for this address..</param>
        public RequestAddressModelWithCustomForms(string addressLine1 = default(string), string addressLine2 = default(string), RequestAddressModelWithCustomFormsAddressTypeFlag addressTypeFlag = default(RequestAddressModelWithCustomFormsAddressTypeFlag), string auditStatus = default(string), string city = default(string), RequestAddressModelWithCustomFormsCountry country = default(RequestAddressModelWithCustomFormsCountry), string county = default(string), List<CustomAttributeModel> customForms = default(List<CustomAttributeModel>), string description = default(string), RequestAddressModelWithCustomFormsDirection direction = default(RequestAddressModelWithCustomFormsDirection), double? distance = default(double?), string houseAlphaStart = default(string), string houseAlphaEnd = default(string), RequestAddressModelWithCustomFormsHouseFractionStart houseFractionStart = default(RequestAddressModelWithCustomFormsHouseFractionStart), RequestAddressModelWithCustomFormsHouseFractionEnd houseFractionEnd = default(RequestAddressModelWithCustomFormsHouseFractionEnd), decimal? houseNumberEndFrom = default(decimal?), decimal? houseNumberEndTo = default(decimal?), decimal? houseNumberStartFrom = default(decimal?), decimal? houseNumberStartTo = default(decimal?), string inspectionDistrict = default(string), string inspectionDistrictPrefix = default(string), string isPrimary = default(string), string levelStart = default(string), string levelEnd = default(string), string levelPrefix = default(string), string neighborhood = default(string), string neighborhoodPrefix = default(string), string postalCode = default(string), string secondaryStreet = default(string), decimal? secondaryStreetNumber = default(decimal?), string sourceFlag = default(string), decimal? sourceNumber = default(decimal?), RequestAddressModelWithCustomFormsCountry state = default(RequestAddressModelWithCustomFormsCountry), RequestAddressModelWithCustomFormsStatus status = default(RequestAddressModelWithCustomFormsStatus), string streetAddress = default(string), decimal? streetEnd = default(decimal?), string streetName = default(string), string streetPrefix = default(string), decimal? streetStart = default(decimal?), RequestAddressModelWithCustomFormsStreetSuffix streetSuffix = default(RequestAddressModelWithCustomFormsStreetSuffix), RequestAddressModelWithCustomFormsStreetSuffixDirection streetSuffixDirection = default(RequestAddressModelWithCustomFormsStreetSuffixDirection), string unitStart = default(string), string unitEnd = default(string), RequestAddressModelWithCustomFormsUnitType unitType = default(RequestAddressModelWithCustomFormsUnitType), double? xCoordinate = default(double?), double? yCoordinate = default(double?))
        {
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressTypeFlag = addressTypeFlag;
            this.AuditStatus = auditStatus;
            this.City = city;
            this.Country = country;
            this.County = county;
            this.CustomForms = customForms;
            this.Description = description;
            this.Direction = direction;
            this.Distance = distance;
            this.HouseAlphaStart = houseAlphaStart;
            this.HouseAlphaEnd = houseAlphaEnd;
            this.HouseFractionStart = houseFractionStart;
            this.HouseFractionEnd = houseFractionEnd;
            this.HouseNumberEndFrom = houseNumberEndFrom;
            this.HouseNumberEndTo = houseNumberEndTo;
            this.HouseNumberStartFrom = houseNumberStartFrom;
            this.HouseNumberStartTo = houseNumberStartTo;
            this.InspectionDistrict = inspectionDistrict;
            this.InspectionDistrictPrefix = inspectionDistrictPrefix;
            this.IsPrimary = isPrimary;
            this.LevelStart = levelStart;
            this.LevelEnd = levelEnd;
            this.LevelPrefix = levelPrefix;
            this.Neighborhood = neighborhood;
            this.NeighborhoodPrefix = neighborhoodPrefix;
            this.PostalCode = postalCode;
            this.SecondaryStreet = secondaryStreet;
            this.SecondaryStreetNumber = secondaryStreetNumber;
            this.SourceFlag = sourceFlag;
            this.SourceNumber = sourceNumber;
            this.State = state;
            this.Status = status;
            this.StreetAddress = streetAddress;
            this.StreetEnd = streetEnd;
            this.StreetName = streetName;
            this.StreetPrefix = streetPrefix;
            this.StreetStart = streetStart;
            this.StreetSuffix = streetSuffix;
            this.StreetSuffixDirection = streetSuffixDirection;
            this.UnitStart = unitStart;
            this.UnitEnd = unitEnd;
            this.UnitType = unitType;
            this.XCoordinate = xCoordinate;
            this.YCoordinate = yCoordinate;
        }
        
        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressTypeFlag
        /// </summary>
        [DataMember(Name="addressTypeFlag", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsAddressTypeFlag AddressTypeFlag { get; set; }

        /// <summary>
        /// The audit status of the address.
        /// </summary>
        /// <value>The audit status of the address.</value>
        [DataMember(Name="auditStatus", EmitDefaultValue=false)]
        public string AuditStatus { get; set; }

        /// <summary>
        /// The name of the city.
        /// </summary>
        /// <value>The name of the city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsCountry Country { get; set; }

        /// <summary>
        /// The name of the county.
        /// </summary>
        /// <value>The name of the county.</value>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }

        /// <summary>
        /// Gets or Sets CustomForms
        /// </summary>
        [DataMember(Name="customForms", EmitDefaultValue=false)]
        public List<CustomAttributeModel> CustomForms { get; set; }

        /// <summary>
        /// A description of the address.
        /// </summary>
        /// <value>A description of the address.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsDirection Direction { get; set; }

        /// <summary>
        /// The distance from another landmark used to locate the address.
        /// </summary>
        /// <value>The distance from another landmark used to locate the address.</value>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// The beginning alphabetic unit in street address.
        /// </summary>
        /// <value>The beginning alphabetic unit in street address.</value>
        [DataMember(Name="houseAlphaStart", EmitDefaultValue=false)]
        public string HouseAlphaStart { get; set; }

        /// <summary>
        /// The ending alphabetic unit in street address.
        /// </summary>
        /// <value>The ending alphabetic unit in street address.</value>
        [DataMember(Name="houseAlphaEnd", EmitDefaultValue=false)]
        public string HouseAlphaEnd { get; set; }

        /// <summary>
        /// Gets or Sets HouseFractionStart
        /// </summary>
        [DataMember(Name="houseFractionStart", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsHouseFractionStart HouseFractionStart { get; set; }

        /// <summary>
        /// Gets or Sets HouseFractionEnd
        /// </summary>
        [DataMember(Name="houseFractionEnd", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsHouseFractionEnd HouseFractionEnd { get; set; }

        /// <summary>
        /// The first of the ending house number range.
        /// </summary>
        /// <value>The first of the ending house number range.</value>
        [DataMember(Name="houseNumberEndFrom", EmitDefaultValue=false)]
        public decimal? HouseNumberEndFrom { get; set; }

        /// <summary>
        /// The last of the ending house number range.
        /// </summary>
        /// <value>The last of the ending house number range.</value>
        [DataMember(Name="houseNumberEndTo", EmitDefaultValue=false)]
        public decimal? HouseNumberEndTo { get; set; }

        /// <summary>
        /// The first of the start house number range.
        /// </summary>
        /// <value>The first of the start house number range.</value>
        [DataMember(Name="houseNumberStartFrom", EmitDefaultValue=false)]
        public decimal? HouseNumberStartFrom { get; set; }

        /// <summary>
        /// The last of the start house number range.
        /// </summary>
        /// <value>The last of the start house number range.</value>
        [DataMember(Name="houseNumberStartTo", EmitDefaultValue=false)]
        public decimal? HouseNumberStartTo { get; set; }

        /// <summary>
        /// The inspection district where the address is located.
        /// </summary>
        /// <value>The inspection district where the address is located.</value>
        [DataMember(Name="inspectionDistrict", EmitDefaultValue=false)]
        public string InspectionDistrict { get; set; }

        /// <summary>
        /// The prefix for the inspection district where the address is located.
        /// </summary>
        /// <value>The prefix for the inspection district where the address is located.</value>
        [DataMember(Name="inspectionDistrictPrefix", EmitDefaultValue=false)]
        public string InspectionDistrictPrefix { get; set; }

        /// <summary>
        /// Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.
        /// </summary>
        /// <value>Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public string IsPrimary { get; set; }

        /// <summary>
        /// The starting level number (floor number) that makes up the address within a complex.
        /// </summary>
        /// <value>The starting level number (floor number) that makes up the address within a complex.</value>
        [DataMember(Name="levelStart", EmitDefaultValue=false)]
        public string LevelStart { get; set; }

        /// <summary>
        /// The ending level number (floor number) that makes up the address within a complex.
        /// </summary>
        /// <value>The ending level number (floor number) that makes up the address within a complex.</value>
        [DataMember(Name="levelEnd", EmitDefaultValue=false)]
        public string LevelEnd { get; set; }

        /// <summary>
        /// The prefix for the level numbers (floor numbers) that make up the address.
        /// </summary>
        /// <value>The prefix for the level numbers (floor numbers) that make up the address.</value>
        [DataMember(Name="levelPrefix", EmitDefaultValue=false)]
        public string LevelPrefix { get; set; }

        /// <summary>
        /// The neighborhood where the address is located.
        /// </summary>
        /// <value>The neighborhood where the address is located.</value>
        [DataMember(Name="neighborhood", EmitDefaultValue=false)]
        public string Neighborhood { get; set; }

        /// <summary>
        /// The prefix for neighborhood where the address is located.
        /// </summary>
        /// <value>The prefix for neighborhood where the address is located.</value>
        [DataMember(Name="neighborhoodPrefix", EmitDefaultValue=false)]
        public string NeighborhoodPrefix { get; set; }

        /// <summary>
        /// The postal ZIP code for the address.
        /// </summary>
        /// <value>The postal ZIP code for the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
        /// </summary>
        /// <value>This field (along with the Secondary Road Number field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.</value>
        [DataMember(Name="secondaryStreet", EmitDefaultValue=false)]
        public string SecondaryStreet { get; set; }

        /// <summary>
        /// This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.
        /// </summary>
        /// <value>This field (along with the Secondary Road field) displays an extra description for the location when two roads that cross or a street with two names makes up the address of the location.</value>
        [DataMember(Name="secondaryStreetNumber", EmitDefaultValue=false)]
        public decimal? SecondaryStreetNumber { get; set; }

        /// <summary>
        /// The Accela permitting system that stores this address information, such as Civic Platform, Kiva, or Tidemark.
        /// </summary>
        /// <value>The Accela permitting system that stores this address information, such as Civic Platform, Kiva, or Tidemark.</value>
        [DataMember(Name="sourceFlag", EmitDefaultValue=false)]
        public string SourceFlag { get; set; }

        /// <summary>
        /// A number that identifies the Accela permitting system that stores this address information.
        /// </summary>
        /// <value>A number that identifies the Accela permitting system that stores this address information.</value>
        [DataMember(Name="sourceNumber", EmitDefaultValue=false)]
        public decimal? SourceNumber { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsCountry State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsStatus Status { get; set; }

        /// <summary>
        /// The street address.
        /// </summary>
        /// <value>The street address.</value>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// The ending number of a street address range.
        /// </summary>
        /// <value>The ending number of a street address range.</value>
        [DataMember(Name="streetEnd", EmitDefaultValue=false)]
        public decimal? StreetEnd { get; set; }

        /// <summary>
        /// The name of the street.
        /// </summary>
        /// <value>The name of the street.</value>
        [DataMember(Name="streetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \&quot;West\&quot;is the street prefix.
        /// </summary>
        /// <value>Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \&quot;West\&quot;is the street prefix.</value>
        [DataMember(Name="streetPrefix", EmitDefaultValue=false)]
        public string StreetPrefix { get; set; }

        /// <summary>
        /// The starting number of a street address range.
        /// </summary>
        /// <value>The starting number of a street address range.</value>
        [DataMember(Name="streetStart", EmitDefaultValue=false)]
        public decimal? StreetStart { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffix
        /// </summary>
        [DataMember(Name="streetSuffix", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsStreetSuffix StreetSuffix { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffixDirection
        /// </summary>
        [DataMember(Name="streetSuffixDirection", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsStreetSuffixDirection StreetSuffixDirection { get; set; }

        /// <summary>
        /// The starting value of a range of unit numbers.
        /// </summary>
        /// <value>The starting value of a range of unit numbers.</value>
        [DataMember(Name="unitStart", EmitDefaultValue=false)]
        public string UnitStart { get; set; }

        /// <summary>
        /// The ending value of a range of unit numbers.
        /// </summary>
        /// <value>The ending value of a range of unit numbers.</value>
        [DataMember(Name="unitEnd", EmitDefaultValue=false)]
        public string UnitEnd { get; set; }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name="unitType", EmitDefaultValue=false)]
        public RequestAddressModelWithCustomFormsUnitType UnitType { get; set; }

        /// <summary>
        /// The longitudinal coordinate for this address.
        /// </summary>
        /// <value>The longitudinal coordinate for this address.</value>
        [DataMember(Name="xCoordinate", EmitDefaultValue=false)]
        public double? XCoordinate { get; set; }

        /// <summary>
        /// The latitudinal coordinate for this address.
        /// </summary>
        /// <value>The latitudinal coordinate for this address.</value>
        [DataMember(Name="yCoordinate", EmitDefaultValue=false)]
        public double? YCoordinate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RequestAddressModelWithCustomForms {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressTypeFlag: ").Append(AddressTypeFlag).Append("\n");
            sb.Append("  AuditStatus: ").Append(AuditStatus).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  CustomForms: ").Append(CustomForms).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  HouseAlphaStart: ").Append(HouseAlphaStart).Append("\n");
            sb.Append("  HouseAlphaEnd: ").Append(HouseAlphaEnd).Append("\n");
            sb.Append("  HouseFractionStart: ").Append(HouseFractionStart).Append("\n");
            sb.Append("  HouseFractionEnd: ").Append(HouseFractionEnd).Append("\n");
            sb.Append("  HouseNumberEndFrom: ").Append(HouseNumberEndFrom).Append("\n");
            sb.Append("  HouseNumberEndTo: ").Append(HouseNumberEndTo).Append("\n");
            sb.Append("  HouseNumberStartFrom: ").Append(HouseNumberStartFrom).Append("\n");
            sb.Append("  HouseNumberStartTo: ").Append(HouseNumberStartTo).Append("\n");
            sb.Append("  InspectionDistrict: ").Append(InspectionDistrict).Append("\n");
            sb.Append("  InspectionDistrictPrefix: ").Append(InspectionDistrictPrefix).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LevelStart: ").Append(LevelStart).Append("\n");
            sb.Append("  LevelEnd: ").Append(LevelEnd).Append("\n");
            sb.Append("  LevelPrefix: ").Append(LevelPrefix).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("  NeighborhoodPrefix: ").Append(NeighborhoodPrefix).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  SecondaryStreet: ").Append(SecondaryStreet).Append("\n");
            sb.Append("  SecondaryStreetNumber: ").Append(SecondaryStreetNumber).Append("\n");
            sb.Append("  SourceFlag: ").Append(SourceFlag).Append("\n");
            sb.Append("  SourceNumber: ").Append(SourceNumber).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  StreetEnd: ").Append(StreetEnd).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetPrefix: ").Append(StreetPrefix).Append("\n");
            sb.Append("  StreetStart: ").Append(StreetStart).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  StreetSuffixDirection: ").Append(StreetSuffixDirection).Append("\n");
            sb.Append("  UnitStart: ").Append(UnitStart).Append("\n");
            sb.Append("  UnitEnd: ").Append(UnitEnd).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  XCoordinate: ").Append(XCoordinate).Append("\n");
            sb.Append("  YCoordinate: ").Append(YCoordinate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RequestAddressModelWithCustomForms);
        }

        /// <summary>
        /// Returns true if RequestAddressModelWithCustomForms instances are equal
        /// </summary>
        /// <param name="input">Instance of RequestAddressModelWithCustomForms to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RequestAddressModelWithCustomForms input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressTypeFlag == input.AddressTypeFlag ||
                    (this.AddressTypeFlag != null &&
                    this.AddressTypeFlag.Equals(input.AddressTypeFlag))
                ) && 
                (
                    this.AuditStatus == input.AuditStatus ||
                    (this.AuditStatus != null &&
                    this.AuditStatus.Equals(input.AuditStatus))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.County == input.County ||
                    (this.County != null &&
                    this.County.Equals(input.County))
                ) && 
                (
                    this.CustomForms == input.CustomForms ||
                    this.CustomForms != null &&
                    this.CustomForms.SequenceEqual(input.CustomForms)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.HouseAlphaStart == input.HouseAlphaStart ||
                    (this.HouseAlphaStart != null &&
                    this.HouseAlphaStart.Equals(input.HouseAlphaStart))
                ) && 
                (
                    this.HouseAlphaEnd == input.HouseAlphaEnd ||
                    (this.HouseAlphaEnd != null &&
                    this.HouseAlphaEnd.Equals(input.HouseAlphaEnd))
                ) && 
                (
                    this.HouseFractionStart == input.HouseFractionStart ||
                    (this.HouseFractionStart != null &&
                    this.HouseFractionStart.Equals(input.HouseFractionStart))
                ) && 
                (
                    this.HouseFractionEnd == input.HouseFractionEnd ||
                    (this.HouseFractionEnd != null &&
                    this.HouseFractionEnd.Equals(input.HouseFractionEnd))
                ) && 
                (
                    this.HouseNumberEndFrom == input.HouseNumberEndFrom ||
                    (this.HouseNumberEndFrom != null &&
                    this.HouseNumberEndFrom.Equals(input.HouseNumberEndFrom))
                ) && 
                (
                    this.HouseNumberEndTo == input.HouseNumberEndTo ||
                    (this.HouseNumberEndTo != null &&
                    this.HouseNumberEndTo.Equals(input.HouseNumberEndTo))
                ) && 
                (
                    this.HouseNumberStartFrom == input.HouseNumberStartFrom ||
                    (this.HouseNumberStartFrom != null &&
                    this.HouseNumberStartFrom.Equals(input.HouseNumberStartFrom))
                ) && 
                (
                    this.HouseNumberStartTo == input.HouseNumberStartTo ||
                    (this.HouseNumberStartTo != null &&
                    this.HouseNumberStartTo.Equals(input.HouseNumberStartTo))
                ) && 
                (
                    this.InspectionDistrict == input.InspectionDistrict ||
                    (this.InspectionDistrict != null &&
                    this.InspectionDistrict.Equals(input.InspectionDistrict))
                ) && 
                (
                    this.InspectionDistrictPrefix == input.InspectionDistrictPrefix ||
                    (this.InspectionDistrictPrefix != null &&
                    this.InspectionDistrictPrefix.Equals(input.InspectionDistrictPrefix))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LevelStart == input.LevelStart ||
                    (this.LevelStart != null &&
                    this.LevelStart.Equals(input.LevelStart))
                ) && 
                (
                    this.LevelEnd == input.LevelEnd ||
                    (this.LevelEnd != null &&
                    this.LevelEnd.Equals(input.LevelEnd))
                ) && 
                (
                    this.LevelPrefix == input.LevelPrefix ||
                    (this.LevelPrefix != null &&
                    this.LevelPrefix.Equals(input.LevelPrefix))
                ) && 
                (
                    this.Neighborhood == input.Neighborhood ||
                    (this.Neighborhood != null &&
                    this.Neighborhood.Equals(input.Neighborhood))
                ) && 
                (
                    this.NeighborhoodPrefix == input.NeighborhoodPrefix ||
                    (this.NeighborhoodPrefix != null &&
                    this.NeighborhoodPrefix.Equals(input.NeighborhoodPrefix))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.SecondaryStreet == input.SecondaryStreet ||
                    (this.SecondaryStreet != null &&
                    this.SecondaryStreet.Equals(input.SecondaryStreet))
                ) && 
                (
                    this.SecondaryStreetNumber == input.SecondaryStreetNumber ||
                    (this.SecondaryStreetNumber != null &&
                    this.SecondaryStreetNumber.Equals(input.SecondaryStreetNumber))
                ) && 
                (
                    this.SourceFlag == input.SourceFlag ||
                    (this.SourceFlag != null &&
                    this.SourceFlag.Equals(input.SourceFlag))
                ) && 
                (
                    this.SourceNumber == input.SourceNumber ||
                    (this.SourceNumber != null &&
                    this.SourceNumber.Equals(input.SourceNumber))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.StreetEnd == input.StreetEnd ||
                    (this.StreetEnd != null &&
                    this.StreetEnd.Equals(input.StreetEnd))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetPrefix == input.StreetPrefix ||
                    (this.StreetPrefix != null &&
                    this.StreetPrefix.Equals(input.StreetPrefix))
                ) && 
                (
                    this.StreetStart == input.StreetStart ||
                    (this.StreetStart != null &&
                    this.StreetStart.Equals(input.StreetStart))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.StreetSuffixDirection == input.StreetSuffixDirection ||
                    (this.StreetSuffixDirection != null &&
                    this.StreetSuffixDirection.Equals(input.StreetSuffixDirection))
                ) && 
                (
                    this.UnitStart == input.UnitStart ||
                    (this.UnitStart != null &&
                    this.UnitStart.Equals(input.UnitStart))
                ) && 
                (
                    this.UnitEnd == input.UnitEnd ||
                    (this.UnitEnd != null &&
                    this.UnitEnd.Equals(input.UnitEnd))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.XCoordinate == input.XCoordinate ||
                    (this.XCoordinate != null &&
                    this.XCoordinate.Equals(input.XCoordinate))
                ) && 
                (
                    this.YCoordinate == input.YCoordinate ||
                    (this.YCoordinate != null &&
                    this.YCoordinate.Equals(input.YCoordinate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressTypeFlag != null)
                    hashCode = hashCode * 59 + this.AddressTypeFlag.GetHashCode();
                if (this.AuditStatus != null)
                    hashCode = hashCode * 59 + this.AuditStatus.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.County != null)
                    hashCode = hashCode * 59 + this.County.GetHashCode();
                if (this.CustomForms != null)
                    hashCode = hashCode * 59 + this.CustomForms.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.HouseAlphaStart != null)
                    hashCode = hashCode * 59 + this.HouseAlphaStart.GetHashCode();
                if (this.HouseAlphaEnd != null)
                    hashCode = hashCode * 59 + this.HouseAlphaEnd.GetHashCode();
                if (this.HouseFractionStart != null)
                    hashCode = hashCode * 59 + this.HouseFractionStart.GetHashCode();
                if (this.HouseFractionEnd != null)
                    hashCode = hashCode * 59 + this.HouseFractionEnd.GetHashCode();
                if (this.HouseNumberEndFrom != null)
                    hashCode = hashCode * 59 + this.HouseNumberEndFrom.GetHashCode();
                if (this.HouseNumberEndTo != null)
                    hashCode = hashCode * 59 + this.HouseNumberEndTo.GetHashCode();
                if (this.HouseNumberStartFrom != null)
                    hashCode = hashCode * 59 + this.HouseNumberStartFrom.GetHashCode();
                if (this.HouseNumberStartTo != null)
                    hashCode = hashCode * 59 + this.HouseNumberStartTo.GetHashCode();
                if (this.InspectionDistrict != null)
                    hashCode = hashCode * 59 + this.InspectionDistrict.GetHashCode();
                if (this.InspectionDistrictPrefix != null)
                    hashCode = hashCode * 59 + this.InspectionDistrictPrefix.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LevelStart != null)
                    hashCode = hashCode * 59 + this.LevelStart.GetHashCode();
                if (this.LevelEnd != null)
                    hashCode = hashCode * 59 + this.LevelEnd.GetHashCode();
                if (this.LevelPrefix != null)
                    hashCode = hashCode * 59 + this.LevelPrefix.GetHashCode();
                if (this.Neighborhood != null)
                    hashCode = hashCode * 59 + this.Neighborhood.GetHashCode();
                if (this.NeighborhoodPrefix != null)
                    hashCode = hashCode * 59 + this.NeighborhoodPrefix.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.SecondaryStreet != null)
                    hashCode = hashCode * 59 + this.SecondaryStreet.GetHashCode();
                if (this.SecondaryStreetNumber != null)
                    hashCode = hashCode * 59 + this.SecondaryStreetNumber.GetHashCode();
                if (this.SourceFlag != null)
                    hashCode = hashCode * 59 + this.SourceFlag.GetHashCode();
                if (this.SourceNumber != null)
                    hashCode = hashCode * 59 + this.SourceNumber.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.StreetEnd != null)
                    hashCode = hashCode * 59 + this.StreetEnd.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetPrefix != null)
                    hashCode = hashCode * 59 + this.StreetPrefix.GetHashCode();
                if (this.StreetStart != null)
                    hashCode = hashCode * 59 + this.StreetStart.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.StreetSuffixDirection != null)
                    hashCode = hashCode * 59 + this.StreetSuffixDirection.GetHashCode();
                if (this.UnitStart != null)
                    hashCode = hashCode * 59 + this.UnitStart.GetHashCode();
                if (this.UnitEnd != null)
                    hashCode = hashCode * 59 + this.UnitEnd.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.XCoordinate != null)
                    hashCode = hashCode * 59 + this.XCoordinate.GetHashCode();
                if (this.YCoordinate != null)
                    hashCode = hashCode * 59 + this.YCoordinate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
