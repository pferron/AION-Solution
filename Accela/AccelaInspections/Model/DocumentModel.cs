/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// DocumentModel
    /// </summary>
    [DataContract]
    public partial class DocumentModel :  IEquatable<DocumentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentModel" /> class.
        /// </summary>
        /// <param name="category">category.</param>
        /// <param name="deletable">deletable.</param>
        /// <param name="department">The name of the department where the inspector works..</param>
        /// <param name="description">The description of the document..</param>
        /// <param name="downloadable">downloadable.</param>
        /// <param name="entityId">The unique ID of the entity or record..</param>
        /// <param name="entityType">The type of entity..</param>
        /// <param name="fileName">The name of the file as it displays in the source location..</param>
        /// <param name="group">group.</param>
        /// <param name="id">The document system id assigned by the Civic Platform server..</param>
        /// <param name="modifiedBy">The user account that last modified the document..</param>
        /// <param name="modifiedDate">The date the document was last modified..</param>
        /// <param name="serviceProviderCode">The unique agency identifier.</param>
        /// <param name="size">The file size of the document..</param>
        /// <param name="source">The name for your agency&#39; s electronic document management system..</param>
        /// <param name="status">status.</param>
        /// <param name="statusDate">The date when the current status changed..</param>
        /// <param name="titleViewable">titleViewable.</param>
        /// <param name="type">The document type..</param>
        /// <param name="uploadedBy">The user who uploaded the document to the record..</param>
        /// <param name="uploadedDate">The date when the document was uploaded to the record..</param>
        /// <param name="virtualFolders">The virtual folder for storing the attachment.With virtual folders you can organize uploaded attachments in groups.</param>
        public DocumentModel(DocumentModelCategory category = default(DocumentModelCategory), UserRolePrivilegeModel deletable = default(UserRolePrivilegeModel), string department = default(string), string description = default(string), UserRolePrivilegeModel downloadable = default(UserRolePrivilegeModel), string entityId = default(string), string entityType = default(string), string fileName = default(string), DocumentModelGroup group = default(DocumentModelGroup), long? id = default(long?), string modifiedBy = default(string), DateTime? modifiedDate = default(DateTime?), string serviceProviderCode = default(string), double? size = default(double?), string source = default(string), DocumentModelStatus status = default(DocumentModelStatus), string statusDate = default(string), UserRolePrivilegeModel titleViewable = default(UserRolePrivilegeModel), string type = default(string), string uploadedBy = default(string), string uploadedDate = default(string), string virtualFolders = default(string))
        {
            this.Category = category;
            this.Deletable = deletable;
            this.Department = department;
            this.Description = description;
            this.Downloadable = downloadable;
            this.EntityId = entityId;
            this.EntityType = entityType;
            this.FileName = fileName;
            this.Group = group;
            this.Id = id;
            this.ModifiedBy = modifiedBy;
            this.ModifiedDate = modifiedDate;
            this.ServiceProviderCode = serviceProviderCode;
            this.Size = size;
            this.Source = source;
            this.Status = status;
            this.StatusDate = statusDate;
            this.TitleViewable = titleViewable;
            this.Type = type;
            this.UploadedBy = uploadedBy;
            this.UploadedDate = uploadedDate;
            this.VirtualFolders = virtualFolders;
        }
        
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public DocumentModelCategory Category { get; set; }

        /// <summary>
        /// Gets or Sets Deletable
        /// </summary>
        [DataMember(Name="deletable", EmitDefaultValue=false)]
        public UserRolePrivilegeModel Deletable { get; set; }

        /// <summary>
        /// The name of the department where the inspector works.
        /// </summary>
        /// <value>The name of the department where the inspector works.</value>
        [DataMember(Name="department", EmitDefaultValue=false)]
        public string Department { get; set; }

        /// <summary>
        /// The description of the document.
        /// </summary>
        /// <value>The description of the document.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Downloadable
        /// </summary>
        [DataMember(Name="downloadable", EmitDefaultValue=false)]
        public UserRolePrivilegeModel Downloadable { get; set; }

        /// <summary>
        /// The unique ID of the entity or record.
        /// </summary>
        /// <value>The unique ID of the entity or record.</value>
        [DataMember(Name="entityId", EmitDefaultValue=false)]
        public string EntityId { get; set; }

        /// <summary>
        /// The type of entity.
        /// </summary>
        /// <value>The type of entity.</value>
        [DataMember(Name="entityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// The name of the file as it displays in the source location.
        /// </summary>
        /// <value>The name of the file as it displays in the source location.</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public DocumentModelGroup Group { get; set; }

        /// <summary>
        /// The document system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The document system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The user account that last modified the document.
        /// </summary>
        /// <value>The user account that last modified the document.</value>
        [DataMember(Name="modifiedBy", EmitDefaultValue=false)]
        public string ModifiedBy { get; set; }

        /// <summary>
        /// The date the document was last modified.
        /// </summary>
        /// <value>The date the document was last modified.</value>
        [DataMember(Name="modifiedDate", EmitDefaultValue=false)]
        public DateTime? ModifiedDate { get; set; }

        /// <summary>
        /// The unique agency identifier
        /// </summary>
        /// <value>The unique agency identifier</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// The file size of the document.
        /// </summary>
        /// <value>The file size of the document.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public double? Size { get; set; }

        /// <summary>
        /// The name for your agency&#39; s electronic document management system.
        /// </summary>
        /// <value>The name for your agency&#39; s electronic document management system.</value>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public DocumentModelStatus Status { get; set; }

        /// <summary>
        /// The date when the current status changed.
        /// </summary>
        /// <value>The date when the current status changed.</value>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public string StatusDate { get; set; }

        /// <summary>
        /// Gets or Sets TitleViewable
        /// </summary>
        [DataMember(Name="titleViewable", EmitDefaultValue=false)]
        public UserRolePrivilegeModel TitleViewable { get; set; }

        /// <summary>
        /// The document type.
        /// </summary>
        /// <value>The document type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The user who uploaded the document to the record.
        /// </summary>
        /// <value>The user who uploaded the document to the record.</value>
        [DataMember(Name="uploadedBy", EmitDefaultValue=false)]
        public string UploadedBy { get; set; }

        /// <summary>
        /// The date when the document was uploaded to the record.
        /// </summary>
        /// <value>The date when the document was uploaded to the record.</value>
        [DataMember(Name="uploadedDate", EmitDefaultValue=false)]
        public string UploadedDate { get; set; }

        /// <summary>
        /// The virtual folder for storing the attachment.With virtual folders you can organize uploaded attachments in groups
        /// </summary>
        /// <value>The virtual folder for storing the attachment.With virtual folders you can organize uploaded attachments in groups</value>
        [DataMember(Name="virtualFolders", EmitDefaultValue=false)]
        public string VirtualFolders { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentModel {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Deletable: ").Append(Deletable).Append("\n");
            sb.Append("  Department: ").Append(Department).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Downloadable: ").Append(Downloadable).Append("\n");
            sb.Append("  EntityId: ").Append(EntityId).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ModifiedBy: ").Append(ModifiedBy).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  TitleViewable: ").Append(TitleViewable).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UploadedBy: ").Append(UploadedBy).Append("\n");
            sb.Append("  UploadedDate: ").Append(UploadedDate).Append("\n");
            sb.Append("  VirtualFolders: ").Append(VirtualFolders).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentModel);
        }

        /// <summary>
        /// Returns true if DocumentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Deletable == input.Deletable ||
                    (this.Deletable != null &&
                    this.Deletable.Equals(input.Deletable))
                ) && 
                (
                    this.Department == input.Department ||
                    (this.Department != null &&
                    this.Department.Equals(input.Department))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Downloadable == input.Downloadable ||
                    (this.Downloadable != null &&
                    this.Downloadable.Equals(input.Downloadable))
                ) && 
                (
                    this.EntityId == input.EntityId ||
                    (this.EntityId != null &&
                    this.EntityId.Equals(input.EntityId))
                ) && 
                (
                    this.EntityType == input.EntityType ||
                    (this.EntityType != null &&
                    this.EntityType.Equals(input.EntityType))
                ) && 
                (
                    this.FileName == input.FileName ||
                    (this.FileName != null &&
                    this.FileName.Equals(input.FileName))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ModifiedBy == input.ModifiedBy ||
                    (this.ModifiedBy != null &&
                    this.ModifiedBy.Equals(input.ModifiedBy))
                ) && 
                (
                    this.ModifiedDate == input.ModifiedDate ||
                    (this.ModifiedDate != null &&
                    this.ModifiedDate.Equals(input.ModifiedDate))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.TitleViewable == input.TitleViewable ||
                    (this.TitleViewable != null &&
                    this.TitleViewable.Equals(input.TitleViewable))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UploadedBy == input.UploadedBy ||
                    (this.UploadedBy != null &&
                    this.UploadedBy.Equals(input.UploadedBy))
                ) && 
                (
                    this.UploadedDate == input.UploadedDate ||
                    (this.UploadedDate != null &&
                    this.UploadedDate.Equals(input.UploadedDate))
                ) && 
                (
                    this.VirtualFolders == input.VirtualFolders ||
                    (this.VirtualFolders != null &&
                    this.VirtualFolders.Equals(input.VirtualFolders))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Deletable != null)
                    hashCode = hashCode * 59 + this.Deletable.GetHashCode();
                if (this.Department != null)
                    hashCode = hashCode * 59 + this.Department.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Downloadable != null)
                    hashCode = hashCode * 59 + this.Downloadable.GetHashCode();
                if (this.EntityId != null)
                    hashCode = hashCode * 59 + this.EntityId.GetHashCode();
                if (this.EntityType != null)
                    hashCode = hashCode * 59 + this.EntityType.GetHashCode();
                if (this.FileName != null)
                    hashCode = hashCode * 59 + this.FileName.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ModifiedBy != null)
                    hashCode = hashCode * 59 + this.ModifiedBy.GetHashCode();
                if (this.ModifiedDate != null)
                    hashCode = hashCode * 59 + this.ModifiedDate.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.TitleViewable != null)
                    hashCode = hashCode * 59 + this.TitleViewable.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UploadedBy != null)
                    hashCode = hashCode * 59 + this.UploadedBy.GetHashCode();
                if (this.UploadedDate != null)
                    hashCode = hashCode * 59 + this.UploadedDate.GetHashCode();
                if (this.VirtualFolders != null)
                    hashCode = hashCode * 59 + this.VirtualFolders.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
