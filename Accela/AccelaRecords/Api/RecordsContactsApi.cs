/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsContactsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteRecordsRecordIdContactsContactIdAddressesIds (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null);

        /// <summary>
        /// Delete Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteRecordsRecordIdContactsContactIdAddressesIdsWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null);
        /// <summary>
        /// Delete Record Contacts
        /// </summary>
        /// <remarks>
        /// Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteRecordsRecordIdContactsIds (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Delete Record Contacts
        /// </summary>
        /// <remarks>
        /// Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteRecordsRecordIdContactsIdsWithHttpInfo (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null);
        /// <summary>
        /// Get All Contacts for Record
        /// </summary>
        /// <remarks>
        /// Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordContactSimpleModelArray</returns>
        ResponseRecordContactSimpleModelArray V4GetRecordsRecordIdContacts (string contentType,string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Contacts for Record
        /// </summary>
        /// <remarks>
        /// Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordContactSimpleModelArray</returns>
        ApiResponse<ResponseRecordContactSimpleModelArray> V4GetRecordsRecordIdContactsWithHttpInfo (string contentType,string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Addresses for Contact
        /// </summary>
        /// <remarks>
        /// Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseContactAddressArray</returns>
        ResponseContactAddressArray V4GetRecordsRecordIdContactsContactIdAddresses (string contentType, string authorization, string recordId, long? contactId, string lang = null);

        /// <summary>
        /// Get All Addresses for Contact
        /// </summary>
        /// <remarks>
        /// Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseContactAddressArray</returns>
        ApiResponse<ResponseContactAddressArray> V4GetRecordsRecordIdContactsContactIdAddressesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null);
        /// <summary>
        /// Create Record Contacts
        /// </summary>
        /// <remarks>
        /// Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostRecordsRecordIdContacts (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null);

        /// <summary>
        /// Create Record Contacts
        /// </summary>
        /// <remarks>
        /// Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostRecordsRecordIdContactsWithHttpInfo (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null);
        /// <summary>
        /// Create Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostRecordsRecordIdContactsContactIdAddresses (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null);

        /// <summary>
        /// Create Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostRecordsRecordIdContactsContactIdAddressesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null);
        /// <summary>
        /// Update Record Contact Address
        /// </summary>
        /// <remarks>
        /// Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ContactAddress</returns>
        ContactAddress V4PutRecordsRecordIdContactsContactIdAddressesId (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null);

        /// <summary>
        /// Update Record Contact Address
        /// </summary>
        /// <remarks>
        /// Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ContactAddress</returns>
        ApiResponse<ContactAddress> V4PutRecordsRecordIdContactsContactIdAddressesIdWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null);
        /// <summary>
        /// Update Record Contact
        /// </summary>
        /// <remarks>
        /// Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordContactSimpleModelArray</returns>
        ResponseRecordContactSimpleModelArray V4PutRecordsRecordIdContactsId (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Contact
        /// </summary>
        /// <remarks>
        /// Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordContactSimpleModelArray</returns>
        ApiResponse<ResponseRecordContactSimpleModelArray> V4PutRecordsRecordIdContactsIdWithHttpInfo (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdContactsContactIdAddressesIdsAsync (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null);

        /// <summary>
        /// Delete Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdContactsContactIdAddressesIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null);
        /// <summary>
        /// Delete Record Contacts
        /// </summary>
        /// <remarks>
        /// Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdContactsIdsAsync (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Delete Record Contacts
        /// </summary>
        /// <remarks>
        /// Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdContactsIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null);
        /// <summary>
        /// Get All Contacts for Record
        /// </summary>
        /// <remarks>
        /// Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordContactSimpleModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordContactSimpleModelArray> V4GetRecordsRecordIdContactsAsync (string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Contacts for Record
        /// </summary>
        /// <remarks>
        /// Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordContactSimpleModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordContactSimpleModelArray>> V4GetRecordsRecordIdContactsAsyncWithHttpInfo (string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Addresses for Contact
        /// </summary>
        /// <remarks>
        /// Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseContactAddressArray</returns>
        System.Threading.Tasks.Task<ResponseContactAddressArray> V4GetRecordsRecordIdContactsContactIdAddressesAsync (string contentType, string authorization, string recordId, long? contactId, string lang = null);

        /// <summary>
        /// Get All Addresses for Contact
        /// </summary>
        /// <remarks>
        /// Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseContactAddressArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseContactAddressArray>> V4GetRecordsRecordIdContactsContactIdAddressesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null);
        /// <summary>
        /// Create Record Contacts
        /// </summary>
        /// <remarks>
        /// Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdContactsAsync (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null);

        /// <summary>
        /// Create Record Contacts
        /// </summary>
        /// <remarks>
        /// Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdContactsAsyncWithHttpInfo (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null);
        /// <summary>
        /// Create Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdContactsContactIdAddressesAsync (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null);

        /// <summary>
        /// Create Record Contact Addresses
        /// </summary>
        /// <remarks>
        /// Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdContactsContactIdAddressesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null);
        /// <summary>
        /// Update Record Contact Address
        /// </summary>
        /// <remarks>
        /// Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ContactAddress</returns>
        System.Threading.Tasks.Task<ContactAddress> V4PutRecordsRecordIdContactsContactIdAddressesIdAsync (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null);

        /// <summary>
        /// Update Record Contact Address
        /// </summary>
        /// <remarks>
        /// Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ContactAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<ContactAddress>> V4PutRecordsRecordIdContactsContactIdAddressesIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null);
        /// <summary>
        /// Update Record Contact
        /// </summary>
        /// <remarks>
        /// Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordContactSimpleModelArray</returns>
        System.Threading.Tasks.Task<ResponseRecordContactSimpleModelArray> V4PutRecordsRecordIdContactsIdAsync (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Contact
        /// </summary>
        /// <remarks>
        /// Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordContactSimpleModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRecordContactSimpleModelArray>> V4PutRecordsRecordIdContactsIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsContactsApi : IRecordsContactsApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsContactsApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsContactsApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Record Contact Addresses Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteRecordsRecordIdContactsContactIdAddressesIds (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteRecordsRecordIdContactsContactIdAddressesIdsWithHttpInfo(contentType, authorization, recordId, contactId, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Record Contact Addresses Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteRecordsRecordIdContactsContactIdAddressesIdsWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");

            var localVarPath = "/v4/Records/{recordId}/contacts/{contactId}/addresses/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdContactsContactIdAddressesIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Record Contact Addresses Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdContactsContactIdAddressesIdsAsync (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteRecordsRecordIdContactsContactIdAddressesIdsAsyncWithHttpInfo(contentType, authorization, recordId, contactId, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Record Contact Addresses Deletes the specified addresses from the specified contacts and specified records. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{contactId}/addresses/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="ids">Comma-delimited IDs of the addresses to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdContactsContactIdAddressesIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsContactIdAddressesIds");

            var localVarPath = "/v4/Records/{recordId}/contacts/{contactId}/addresses/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdContactsContactIdAddressesIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Record Contacts Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteRecordsRecordIdContactsIds (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteRecordsRecordIdContactsIdsWithHttpInfo(contentType, authorization, recordId, ids, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Record Contacts Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteRecordsRecordIdContactsIdsWithHttpInfo (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");

            var localVarPath = "/v4/Records/{recordId}/contacts/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Record Contacts Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteRecordsRecordIdContactsIdsAsync (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteRecordsRecordIdContactsIdsAsyncWithHttpInfo(contentType, authorization, recordId, ids, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Record Contacts Removes the association of specified contacts from a specified record. **API Endpoint**:  DELETE /v4/records/{recordId}/contacts/{ids}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="ids">Comma-delimited IDs of the contacts to remove.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteRecordsRecordIdContactsIdsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");

            var localVarPath = "/v4/Records/{recordId}/contacts/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteRecordsRecordIdContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Contacts for Record Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        ///  /// <param name="contentType"> content Type</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordContactSimpleModelArray</returns>
        public ResponseRecordContactSimpleModelArray V4GetRecordsRecordIdContacts (string contentType , string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordContactSimpleModelArray> localVarResponse = V4GetRecordsRecordIdContactsWithHttpInfo(contentType,authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Contacts for Record Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType"> Content type</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordContactSimpleModelArray</returns>
        public ApiResponse< ResponseRecordContactSimpleModelArray > V4GetRecordsRecordIdContactsWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4DeleteRecordsRecordIdContactsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4GetRecordsRecordIdContacts");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4GetRecordsRecordIdContacts");

            var localVarPath = "/v4/records/{recordId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordContactSimpleModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordContactSimpleModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordContactSimpleModelArray)));
        }

        /// <summary>
        /// Get All Contacts for Record Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordContactSimpleModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordContactSimpleModelArray> V4GetRecordsRecordIdContactsAsync (string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordContactSimpleModelArray> localVarResponse = await V4GetRecordsRecordIdContactsAsyncWithHttpInfo(authorization, recordId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Contacts for Record Gets contacts associated to a record. **API Endpoint**:  GET /v4/records/{recordId}/contacts  **Scope**:  addresses  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordContactSimpleModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordContactSimpleModelArray>> V4GetRecordsRecordIdContactsAsyncWithHttpInfo (string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4GetRecordsRecordIdContacts");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4GetRecordsRecordIdContacts");

            var localVarPath = "/v4/records/{recordId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordContactSimpleModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordContactSimpleModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordContactSimpleModelArray)));
        }

        /// <summary>
        /// Get All Addresses for Contact Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseContactAddressArray</returns>
        public ResponseContactAddressArray V4GetRecordsRecordIdContactsContactIdAddresses (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
             ApiResponse<ResponseContactAddressArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdAddressesWithHttpInfo(contentType, authorization, recordId, contactId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Addresses for Contact Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseContactAddressArray</returns>
        public ApiResponse< ResponseContactAddressArray > V4GetRecordsRecordIdContactsContactIdAddressesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseContactAddressArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseContactAddressArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseContactAddressArray)));
        }

        /// <summary>
        /// Get All Addresses for Contact Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseContactAddressArray</returns>
        public async System.Threading.Tasks.Task<ResponseContactAddressArray> V4GetRecordsRecordIdContactsContactIdAddressesAsync (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
             ApiResponse<ResponseContactAddressArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdAddressesAsyncWithHttpInfo(contentType, authorization, recordId, contactId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Addresses for Contact Gets the addresses for the specified contacts and specified records. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseContactAddressArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseContactAddressArray>> V4GetRecordsRecordIdContactsContactIdAddressesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4GetRecordsRecordIdContactsContactIdAddresses");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseContactAddressArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseContactAddressArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseContactAddressArray)));
        }

        /// <summary>
        /// Create Record Contacts Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostRecordsRecordIdContacts (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostRecordsRecordIdContactsWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Record Contacts Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostRecordsRecordIdContactsWithHttpInfo (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");

            var localVarPath = "/v4/records/{recordId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Record Contacts Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdContactsAsync (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostRecordsRecordIdContactsAsyncWithHttpInfo(contentType, authorization, recordId, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Record Contacts Creates new contact(s) for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be added.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdContactsAsyncWithHttpInfo (string contentType, string authorization, string recordId, List<RecordContactSimpleModel> body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsContactsApi->V4PostRecordsRecordIdContacts");

            var localVarPath = "/v4/records/{recordId}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Record Contact Addresses Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostRecordsRecordIdContactsContactIdAddresses (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostRecordsRecordIdContactsContactIdAddressesWithHttpInfo(contentType, authorization, recordId, contactId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Record Contact Addresses Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostRecordsRecordIdContactsContactIdAddressesWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdContactsContactIdAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Record Contact Addresses Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostRecordsRecordIdContactsContactIdAddressesAsync (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostRecordsRecordIdContactsContactIdAddressesAsyncWithHttpInfo(contentType, authorization, recordId, contactId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Record Contact Addresses Creates addresses for the specified contact for the specified record. **API Endpoint**:  POST /v4/records/{recordId}/contacts/{contactId}/addresses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The address information to be added. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostRecordsRecordIdContactsContactIdAddressesAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<ContactAddress> body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4PostRecordsRecordIdContactsContactIdAddresses");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostRecordsRecordIdContactsContactIdAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Record Contact Address Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ContactAddress</returns>
        public ContactAddress V4PutRecordsRecordIdContactsContactIdAddressesId (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null)
        {
             ApiResponse<ContactAddress> localVarResponse = V4PutRecordsRecordIdContactsContactIdAddressesIdWithHttpInfo(contentType, authorization, recordId, contactId, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Contact Address Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ContactAddress</returns>
        public ApiResponse< ContactAddress > V4PutRecordsRecordIdContactsContactIdAddressesIdWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsContactIdAddressesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactAddress)));
        }

        /// <summary>
        /// Update Record Contact Address Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ContactAddress</returns>
        public async System.Threading.Tasks.Task<ContactAddress> V4PutRecordsRecordIdContactsContactIdAddressesIdAsync (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null)
        {
             ApiResponse<ContactAddress> localVarResponse = await V4PutRecordsRecordIdContactsContactIdAddressesIdAsyncWithHttpInfo(contentType, authorization, recordId, contactId, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Record Contact Address Updates the specified address for the specified contact and specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/addresses/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="id">The ID of the address to be updated.</param>
        /// <param name="body">The address information to be updated. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ContactAddress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ContactAddress>> V4PutRecordsRecordIdContactsContactIdAddressesIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, long? id, ContactAddress body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsContactIdAddressesId");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/addresses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsContactIdAddressesId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ContactAddress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ContactAddress) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactAddress)));
        }

        /// <summary>
        /// Update Record Contact Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRecordContactSimpleModelArray</returns>
        public ResponseRecordContactSimpleModelArray V4PutRecordsRecordIdContactsId (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordContactSimpleModelArray> localVarResponse = V4PutRecordsRecordIdContactsIdWithHttpInfo(contentType, authorization, recordId, body, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Contact Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRecordContactSimpleModelArray</returns>
        public ApiResponse< ResponseRecordContactSimpleModelArray > V4PutRecordsRecordIdContactsIdWithHttpInfo (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");

            var localVarPath = "/v4/records/{recordId}/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordContactSimpleModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordContactSimpleModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordContactSimpleModelArray)));
        }

        /// <summary>
        /// Update Record Contact Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRecordContactSimpleModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRecordContactSimpleModelArray> V4PutRecordsRecordIdContactsIdAsync (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRecordContactSimpleModelArray> localVarResponse = await V4PutRecordsRecordIdContactsIdAsyncWithHttpInfo(contentType, authorization, recordId, body, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Record Contact Updates information for a specified contact associated with a specified record. **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="body">The contact information to be updated.</param>
        /// <param name="id">The ID of the contact to update.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRecordContactSimpleModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRecordContactSimpleModelArray>> V4PutRecordsRecordIdContactsIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, RecordContactSimpleModel body, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsContactsApi->V4PutRecordsRecordIdContactsId");

            var localVarPath = "/v4/records/{recordId}/contacts/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRecordContactSimpleModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRecordContactSimpleModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRecordContactSimpleModelArray)));
        }

    }
}
