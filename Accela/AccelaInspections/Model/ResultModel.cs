/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// ResultModel
    /// </summary>
    [DataContract]
    public partial class ResultModel :  IEquatable<ResultModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ResultModel" /> class.
        /// </summary>
        /// <param name="code">The error code, if an error is encountered..</param>
        /// <param name="id">The system id of the object in this operation..</param>
        /// <param name="isRequired">Indicates whether or not the field is required..</param>
        /// <param name="isSuccess">Indicates whether or not the operation on the object is successful..</param>
        /// <param name="message">The error message, if an error is encountered.</param>
        public ResultModel(string code = default(string), long? id = default(long?), IsRequiredEnum? isRequired = default(IsRequiredEnum?), bool? isSuccess = default(bool?), string message = default(string))
        {
            this.Code = code;
            this.Id = id;
            this.IsRequired = isRequired;
            this.IsSuccess = isSuccess;
            this.Message = message;
        }
        
        /// <summary>
        /// The error code, if an error is encountered.
        /// </summary>
        /// <value>The error code, if an error is encountered.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The system id of the object in this operation.
        /// </summary>
        /// <value>The system id of the object in this operation.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// Indicates whether or not the operation on the object is successful.
        /// </summary>
        /// <value>Indicates whether or not the operation on the object is successful.</value>
        [DataMember(Name="isSuccess", EmitDefaultValue=false)]
        public bool? IsSuccess { get; set; }

        /// <summary>
        /// The error message, if an error is encountered
        /// </summary>
        /// <value>The error message, if an error is encountered</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResultModel {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IsSuccess: ").Append(IsSuccess).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResultModel);
        }

        /// <summary>
        /// Returns true if ResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResultModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IsSuccess == input.IsSuccess ||
                    (this.IsSuccess != null &&
                    this.IsSuccess.Equals(input.IsSuccess))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.IsSuccess != null)
                    hashCode = hashCode * 59 + this.IsSuccess.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
