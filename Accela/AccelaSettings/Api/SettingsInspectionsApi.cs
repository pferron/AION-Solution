/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaSettings.Client;
using AccelaSettings.Model;

namespace AccelaSettings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsInspectionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentGroupModelArray</returns>
        ResponseStandardCommentGroupModelArray V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentGroupModelArray</returns>
        ApiResponse<ResponseStandardCommentGroupModelArray> V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Get All Checklists
        /// </summary>
        /// <remarks>
        /// Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        ResponseChecklistModelArray V4GetSettingsInspectionsChecklists (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Checklists
        /// </summary>
        /// <remarks>
        /// Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        ApiResponse<ResponseChecklistModelArray> V4GetSettingsInspectionsChecklistsWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        ResponseCustomTableMetadataModelArray V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        ApiResponse<ResponseCustomTableMetadataModelArray> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null);
        /// <summary>
        /// Get All Checklist Groups
        /// </summary>
        /// <remarks>
        /// Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistGroupModelArray</returns>
        ResponseChecklistGroupModelArray V4GetSettingsInspectionsChecklistsGroups (string contentType, string authorization, string lang = null);

        /// <summary>
        /// Get All Checklist Groups
        /// </summary>
        /// <remarks>
        /// Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistGroupModelArray</returns>
        ApiResponse<ResponseChecklistGroupModelArray> V4GetSettingsInspectionsChecklistsGroupsWithHttpInfo (string contentType, string authorization, string lang = null);
        /// <summary>
        /// Get Checklists
        /// </summary>
        /// <remarks>
        /// Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        ResponseChecklistModelArray V4GetSettingsInspectionsChecklistsIds (string contentType, string authorization, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Get Checklists
        /// </summary>
        /// <remarks>
        /// Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        ApiResponse<ResponseChecklistModelArray> V4GetSettingsInspectionsChecklistsIdsWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Checklist Statuses
        /// </summary>
        /// <remarks>
        /// Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistItemStatusModelArray</returns>
        ResponseChecklistItemStatusModelArray V4GetSettingsInspectionsChecklistsStatuses (string contentType, string authorization, string group, string lang = null);

        /// <summary>
        /// Get Inspection Checklist Statuses
        /// </summary>
        /// <remarks>
        /// Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistItemStatusModelArray</returns>
        ApiResponse<ResponseChecklistItemStatusModelArray> V4GetSettingsInspectionsChecklistsStatusesWithHttpInfo (string contentType, string authorization, string group, string lang = null);
        /// <summary>
        /// Get All Inspection Grades
        /// </summary>
        /// <remarks>
        /// Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionGradeModelArray</returns>
        ResponseInspectionGradeModelArray V4GetSettingsInspectionsGrades (string contentType, string authorization, string group = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Grades
        /// </summary>
        /// <remarks>
        /// Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionGradeModelArray</returns>
        ApiResponse<ResponseInspectionGradeModelArray> V4GetSettingsInspectionsGradesWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Inspection Statuses
        /// </summary>
        /// <remarks>
        /// Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionResultStatusModelArray</returns>
        ResponseInspectionResultStatusModelArray V4GetSettingsInspectionsStatuses (string contentType, string authorization, string group = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Statuses
        /// </summary>
        /// <remarks>
        /// Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionResultStatusModelArray</returns>
        ApiResponse<ResponseInspectionResultStatusModelArray> V4GetSettingsInspectionsStatusesWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentGroupModelArray</returns>
        ResponseStandardCommentGroupModelArray V4GetSettingsInspectionsTypeCommentsGroups (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentGroupModelArray</returns>
        ApiResponse<ResponseStandardCommentGroupModelArray> V4GetSettingsInspectionsTypeCommentsGroupsWithHttpInfo (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Get All Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionTypeModelArray</returns>
        ResponseInspectionTypeModelArray V4GetSettingsInspectionsTypes (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionTypeModelArray</returns>
        ApiResponse<ResponseInspectionTypeModelArray> V4GetSettingsInspectionsTypesWithHttpInfo (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionTypeModelArray</returns>
        ResponseInspectionTypeModelArray V4GetSettingsInspectionsTypesIds (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionTypeModelArray</returns>
        ApiResponse<ResponseInspectionTypeModelArray> V4GetSettingsInspectionsTypesIdsWithHttpInfo (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentGroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseStandardCommentGroupModelArray> V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsAsync (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentGroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentGroupModelArray>> V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsAsyncWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Get All Checklists
        /// </summary>
        /// <remarks>
        /// Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistModelArray> V4GetSettingsInspectionsChecklistsAsync (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Checklists
        /// </summary>
        /// <remarks>
        /// Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4GetSettingsInspectionsChecklistsAsyncWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsync (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null);
        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsync (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null);

        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item
        /// </summary>
        /// <remarks>
        /// Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null);
        /// <summary>
        /// Get All Checklist Groups
        /// </summary>
        /// <remarks>
        /// Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistGroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistGroupModelArray> V4GetSettingsInspectionsChecklistsGroupsAsync (string contentType, string authorization, string lang = null);

        /// <summary>
        /// Get All Checklist Groups
        /// </summary>
        /// <remarks>
        /// Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistGroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistGroupModelArray>> V4GetSettingsInspectionsChecklistsGroupsAsyncWithHttpInfo (string contentType, string authorization, string lang = null);
        /// <summary>
        /// Get Checklists
        /// </summary>
        /// <remarks>
        /// Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistModelArray> V4GetSettingsInspectionsChecklistsIdsAsync (string contentType, string authorization, string ids, string fields = null, string lang = null);

        /// <summary>
        /// Get Checklists
        /// </summary>
        /// <remarks>
        /// Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4GetSettingsInspectionsChecklistsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Checklist Statuses
        /// </summary>
        /// <remarks>
        /// Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistItemStatusModelArray</returns>
        System.Threading.Tasks.Task<ResponseChecklistItemStatusModelArray> V4GetSettingsInspectionsChecklistsStatusesAsync (string contentType, string authorization, string group, string lang = null);

        /// <summary>
        /// Get Inspection Checklist Statuses
        /// </summary>
        /// <remarks>
        /// Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistItemStatusModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseChecklistItemStatusModelArray>> V4GetSettingsInspectionsChecklistsStatusesAsyncWithHttpInfo (string contentType, string authorization, string group, string lang = null);
        /// <summary>
        /// Get All Inspection Grades
        /// </summary>
        /// <remarks>
        /// Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionGradeModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionGradeModelArray> V4GetSettingsInspectionsGradesAsync (string contentType, string authorization, string group = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Grades
        /// </summary>
        /// <remarks>
        /// Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionGradeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionGradeModelArray>> V4GetSettingsInspectionsGradesAsyncWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Inspection Statuses
        /// </summary>
        /// <remarks>
        /// Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionResultStatusModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionResultStatusModelArray> V4GetSettingsInspectionsStatusesAsync (string contentType, string authorization, string group = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Statuses
        /// </summary>
        /// <remarks>
        /// Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionResultStatusModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionResultStatusModelArray>> V4GetSettingsInspectionsStatusesAsyncWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentGroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseStandardCommentGroupModelArray> V4GetSettingsInspectionsTypeCommentsGroupsAsync (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type
        /// </summary>
        /// <remarks>
        /// Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentGroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentGroupModelArray>> V4GetSettingsInspectionsTypeCommentsGroupsAsyncWithHttpInfo (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Get All Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionTypeModelArray> V4GetSettingsInspectionsTypesAsync (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionTypeModelArray>> V4GetSettingsInspectionsTypesAsyncWithHttpInfo (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionTypeModelArray> V4GetSettingsInspectionsTypesIdsAsync (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection Types
        /// </summary>
        /// <remarks>
        /// Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionTypeModelArray>> V4GetSettingsInspectionsTypesIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsInspectionsApi : ISettingsInspectionsApi
    {
        private AccelaSettings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsInspectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsInspectionsApi(String basePath)
        {
            this.Configuration = new AccelaSettings.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsInspectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsInspectionsApi(AccelaSettings.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaSettings.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaSettings.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaSettings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentGroupModelArray</returns>
        public ResponseStandardCommentGroupModelArray V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentGroupModelArray> localVarResponse = V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsWithHttpInfo(contentType, authorization, checklistId, checklistItemId, lang, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentGroupModelArray</returns>
        public ApiResponse< ResponseStandardCommentGroupModelArray > V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");

            var localVarPath = "/v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentGroupModelArray)));
        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentGroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseStandardCommentGroupModelArray> V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsAsync (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentGroupModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsAsyncWithHttpInfo(contentType, authorization, checklistId, checklistItemId, lang, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Checklist Gets the standard comment groups for a given checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The system id of the checklist the item belongs to. See [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="checklistItemId">The system id of the checklist item to fetch. For valid values, use the id field in items[] returned by [Get All Checklists](./api-settings.html#operation/v4.get.settings.inspections.checklists).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentGroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentGroupModelArray>> V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroupsAsyncWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemId, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");
            // verify the required parameter 'checklistItemId' is set
            if (checklistItemId == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups");

            var localVarPath = "/v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemId}/comments/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemId != null) localVarPathParams.Add("checklistItemId", this.Configuration.ApiClient.ParameterToString(checklistItemId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistIdChecklistItemIdCommentsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentGroupModelArray)));
        }

        /// <summary>
        /// Get All Checklists Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        public ResponseChecklistModelArray V4GetSettingsInspectionsChecklists (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = V4GetSettingsInspectionsChecklistsWithHttpInfo(contentType, authorization, group, fields, offset, limit, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Checklists Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        public ApiResponse< ResponseChecklistModelArray > V4GetSettingsInspectionsChecklistsWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklists");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklists");

            var localVarPath = "/v4/settings/inspections/checklists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

        /// <summary>
        /// Get All Checklists Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistModelArray> V4GetSettingsInspectionsChecklistsAsync (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistsAsyncWithHttpInfo(contentType, authorization, group, fields, offset, limit, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Checklists Gets all checklists you can use for an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklists  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by checklist group. See [Get All Checklist Groups](./api-settings.html#operation/v4.get.settings.inspections.checklistsGroups). (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4GetSettingsInspectionsChecklistsAsyncWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklists");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklists");

            var localVarPath = "/v4/settings/inspections/checklists";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklists", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo(contentType, authorization, checklistId, checklistItemid, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsWithHttpInfo (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistItemid' is set
            if (checklistItemid == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemid' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");

            var localVarPath = "/v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemid != null) localVarPathParams.Add("checklistItemid", this.Configuration.ApiClient.ParameterToString(checklistItemid)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsync (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo(contentType, authorization, checklistId, checklistItemid, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms Metadata for Checklist Item Gets the metadata for all custom forms for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The ID of the checklist to fetch.</param>
        /// <param name="checklistItemid">The ID of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string checklistId, long? checklistItemid, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");
            // verify the required parameter 'checklistItemid' is set
            if (checklistItemid == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemid' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms");

            var localVarPath = "/v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemid != null) localVarPathParams.Add("checklistItemid", this.Configuration.ApiClient.ParameterToString(checklistItemid)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomTableMetadataModelArray</returns>
        public ResponseCustomTableMetadataModelArray V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo(contentType, authorization, checklistId, checklistItemid, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomTableMetadataModelArray</returns>
        public ApiResponse< ResponseCustomTableMetadataModelArray > V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistItemid' is set
            if (checklistItemid == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemid' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");

            var localVarPath = "/v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemid != null) localVarPathParams.Add("checklistItemid", this.Configuration.ApiClient.ParameterToString(checklistItemid)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomTableMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomTableMetadataModelArray> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsync (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null)
        {
             ApiResponse<ResponseCustomTableMetadataModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo(contentType, authorization, checklistId, checklistItemid, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Tables Metadata for Checklist Item Gets the metadata of all custom tables for the specified checklist item. **API Endpoint**:  GET /v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="checklistId">The id of the checklist to fetch.</param>
        /// <param name="checklistItemid">The id of the checklist item to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomTableMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomTableMetadataModelArray>> V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTablesAsyncWithHttpInfo (string contentType, string authorization, long? checklistId, long? checklistItemid, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistId' is set
            if (checklistId == null)
                throw new ApiException(400, "Missing required parameter 'checklistId' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");
            // verify the required parameter 'checklistItemid' is set
            if (checklistItemid == null)
                throw new ApiException(400, "Missing required parameter 'checklistItemid' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables");

            var localVarPath = "/v4/settings/inspections/checklists/{checklistId}/checklistItems/{checklistItemid}/customTables";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (checklistId != null) localVarPathParams.Add("checklistId", this.Configuration.ApiClient.ParameterToString(checklistId)); // path parameter
            if (checklistItemid != null) localVarPathParams.Add("checklistItemid", this.Configuration.ApiClient.ParameterToString(checklistItemid)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsChecklistIdChecklistItemsChecklistItemIdCustomTables", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomTableMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomTableMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomTableMetadataModelArray)));
        }

        /// <summary>
        /// Get All Checklist Groups Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistGroupModelArray</returns>
        public ResponseChecklistGroupModelArray V4GetSettingsInspectionsChecklistsGroups (string contentType, string authorization, string lang = null)
        {
             ApiResponse<ResponseChecklistGroupModelArray> localVarResponse = V4GetSettingsInspectionsChecklistsGroupsWithHttpInfo(contentType, authorization, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Checklist Groups Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistGroupModelArray</returns>
        public ApiResponse< ResponseChecklistGroupModelArray > V4GetSettingsInspectionsChecklistsGroupsWithHttpInfo (string contentType, string authorization, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsGroups");

            var localVarPath = "/v4/settings/inspections/checklistsGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistGroupModelArray)));
        }

        /// <summary>
        /// Get All Checklist Groups Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistGroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistGroupModelArray> V4GetSettingsInspectionsChecklistsGroupsAsync (string contentType, string authorization, string lang = null)
        {
             ApiResponse<ResponseChecklistGroupModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistsGroupsAsyncWithHttpInfo(contentType, authorization, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Checklist Groups Gets the checklist groups for use with an inspection. **API Endpoint**:  GET /v4/settings/inspections/checklistsGroups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistGroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistGroupModelArray>> V4GetSettingsInspectionsChecklistsGroupsAsyncWithHttpInfo (string contentType, string authorization, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsGroups");

            var localVarPath = "/v4/settings/inspections/checklistsGroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistGroupModelArray)));
        }

        /// <summary>
        /// Get Checklists Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistModelArray</returns>
        public ResponseChecklistModelArray V4GetSettingsInspectionsChecklistsIds (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = V4GetSettingsInspectionsChecklistsIdsWithHttpInfo(contentType, authorization, ids, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Checklists Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistModelArray</returns>
        public ApiResponse< ResponseChecklistModelArray > V4GetSettingsInspectionsChecklistsIdsWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsIds");

            var localVarPath = "/v4/settings/inspections/checklists/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

        /// <summary>
        /// Get Checklists Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistModelArray> V4GetSettingsInspectionsChecklistsIdsAsync (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
             ApiResponse<ResponseChecklistModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistsIdsAsyncWithHttpInfo(contentType, authorization, ids, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Checklists Gets specific checklists. **API Endpoint**:  GET /v4/settings/inspections/checklists/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of the checklists to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistModelArray>> V4GetSettingsInspectionsChecklistsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsIds");

            var localVarPath = "/v4/settings/inspections/checklists/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistModelArray)));
        }

        /// <summary>
        /// Get Inspection Checklist Statuses Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseChecklistItemStatusModelArray</returns>
        public ResponseChecklistItemStatusModelArray V4GetSettingsInspectionsChecklistsStatuses (string contentType, string authorization, string group, string lang = null)
        {
             ApiResponse<ResponseChecklistItemStatusModelArray> localVarResponse = V4GetSettingsInspectionsChecklistsStatusesWithHttpInfo(contentType, authorization, group, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspection Checklist Statuses Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseChecklistItemStatusModelArray</returns>
        public ApiResponse< ResponseChecklistItemStatusModelArray > V4GetSettingsInspectionsChecklistsStatusesWithHttpInfo (string contentType, string authorization, string group, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsStatuses");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsStatuses");

            var localVarPath = "/v4/settings/inspections/checklists/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistItemStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistItemStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistItemStatusModelArray)));
        }

        /// <summary>
        /// Get Inspection Checklist Statuses Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseChecklistItemStatusModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseChecklistItemStatusModelArray> V4GetSettingsInspectionsChecklistsStatusesAsync (string contentType, string authorization, string group, string lang = null)
        {
             ApiResponse<ResponseChecklistItemStatusModelArray> localVarResponse = await V4GetSettingsInspectionsChecklistsStatusesAsyncWithHttpInfo(contentType, authorization, group, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspection Checklist Statuses Gets the status values for checklists **API Endpoint**:  GET /v4/settings/inspections/checklists/statuses  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by status group</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseChecklistItemStatusModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseChecklistItemStatusModelArray>> V4GetSettingsInspectionsChecklistsStatusesAsyncWithHttpInfo (string contentType, string authorization, string group, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsStatuses");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling SettingsInspectionsApi->V4GetSettingsInspectionsChecklistsStatuses");

            var localVarPath = "/v4/settings/inspections/checklists/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsChecklistsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseChecklistItemStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseChecklistItemStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseChecklistItemStatusModelArray)));
        }

        /// <summary>
        /// Get All Inspection Grades Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionGradeModelArray</returns>
        public ResponseInspectionGradeModelArray V4GetSettingsInspectionsGrades (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionGradeModelArray> localVarResponse = V4GetSettingsInspectionsGradesWithHttpInfo(contentType, authorization, group, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspection Grades Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionGradeModelArray</returns>
        public ApiResponse< ResponseInspectionGradeModelArray > V4GetSettingsInspectionsGradesWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsGrades");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsGrades");

            var localVarPath = "/v4/settings/inspections/grades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsGrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionGradeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionGradeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionGradeModelArray)));
        }

        /// <summary>
        /// Get All Inspection Grades Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionGradeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionGradeModelArray> V4GetSettingsInspectionsGradesAsync (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionGradeModelArray> localVarResponse = await V4GetSettingsInspectionsGradesAsyncWithHttpInfo(contentType, authorization, group, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspection Grades Gets all available grades for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/grades  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection grade group (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionGradeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionGradeModelArray>> V4GetSettingsInspectionsGradesAsyncWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsGrades");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsGrades");

            var localVarPath = "/v4/settings/inspections/grades";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsGrades", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionGradeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionGradeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionGradeModelArray)));
        }

        /// <summary>
        /// Get All Inspection Statuses Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionResultStatusModelArray</returns>
        public ResponseInspectionResultStatusModelArray V4GetSettingsInspectionsStatuses (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionResultStatusModelArray> localVarResponse = V4GetSettingsInspectionsStatusesWithHttpInfo(contentType, authorization, group, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspection Statuses Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionResultStatusModelArray</returns>
        public ApiResponse< ResponseInspectionResultStatusModelArray > V4GetSettingsInspectionsStatusesWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsStatuses");

            var localVarPath = "/v4/settings/inspections/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionResultStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionResultStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionResultStatusModelArray)));
        }

        /// <summary>
        /// Get All Inspection Statuses Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionResultStatusModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionResultStatusModelArray> V4GetSettingsInspectionsStatusesAsync (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionResultStatusModelArray> localVarResponse = await V4GetSettingsInspectionsStatusesAsyncWithHttpInfo(contentType, authorization, group, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspection Statuses Gets all available status values for use in an inspection. **API Endpoint**:  GET /v4/settings/inspections/statuses **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by the inspection status group. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionResultStatusModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionResultStatusModelArray>> V4GetSettingsInspectionsStatusesAsyncWithHttpInfo (string contentType, string authorization, string group = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsStatuses");

            var localVarPath = "/v4/settings/inspections/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionResultStatusModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionResultStatusModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionResultStatusModelArray)));
        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentGroupModelArray</returns>
        public ResponseStandardCommentGroupModelArray V4GetSettingsInspectionsTypeCommentsGroups (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentGroupModelArray> localVarResponse = V4GetSettingsInspectionsTypeCommentsGroupsWithHttpInfo(contentType, authorization, id, lang, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentGroupModelArray</returns>
        public ApiResponse< ResponseStandardCommentGroupModelArray > V4GetSettingsInspectionsTypeCommentsGroupsWithHttpInfo (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypeCommentsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypeCommentsGroups");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypeCommentsGroups");

            var localVarPath = "/v4/settings/inspections/types/{id}/comments/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsTypeCommentsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentGroupModelArray)));
        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentGroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseStandardCommentGroupModelArray> V4GetSettingsInspectionsTypeCommentsGroupsAsync (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentGroupModelArray> localVarResponse = await V4GetSettingsInspectionsTypeCommentsGroupsAsyncWithHttpInfo(contentType, authorization, id, lang, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Standard Comment Groups for Inspection Type Gets the standard comment groups for a given inspection type. **API Endpoint**:  GET /v4/settings/inspections/types/{id}/comments/groups  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.3.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the inspection type to fetch. See [Get All Inspection Types](./api-settings.html#operation/v4.get.settings.inspections.types).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentGroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentGroupModelArray>> V4GetSettingsInspectionsTypeCommentsGroupsAsyncWithHttpInfo (string contentType, string authorization, long? id, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypeCommentsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypeCommentsGroups");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypeCommentsGroups");

            var localVarPath = "/v4/settings/inspections/types/{id}/comments/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsTypeCommentsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentGroupModelArray)));
        }

        /// <summary>
        /// Get All Inspection Types Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionTypeModelArray</returns>
        public ResponseInspectionTypeModelArray V4GetSettingsInspectionsTypes (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionTypeModelArray> localVarResponse = V4GetSettingsInspectionsTypesWithHttpInfo(contentType, authorization, group, expand, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Inspection Types Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionTypeModelArray</returns>
        public ApiResponse< ResponseInspectionTypeModelArray > V4GetSettingsInspectionsTypesWithHttpInfo (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypes");

            var localVarPath = "/v4/settings/inspections/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionTypeModelArray)));
        }

        /// <summary>
        /// Get All Inspection Types Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionTypeModelArray> V4GetSettingsInspectionsTypesAsync (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionTypeModelArray> localVarResponse = await V4GetSettingsInspectionsTypesAsyncWithHttpInfo(contentType, authorization, group, expand, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Inspection Types Gets all available inspection types. **API Endpoint**:  GET v4/settings/inspections/types  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="group">Filter by inspection type group code. (optional)</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionTypeModelArray>> V4GetSettingsInspectionsTypesAsyncWithHttpInfo (string contentType, string authorization, string group = null, string expand = null, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypes");

            var localVarPath = "/v4/settings/inspections/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionTypeModelArray)));
        }

        /// <summary>
        /// Get Inspection Types Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionTypeModelArray</returns>
        public ResponseInspectionTypeModelArray V4GetSettingsInspectionsTypesIds (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionTypeModelArray> localVarResponse = V4GetSettingsInspectionsTypesIdsWithHttpInfo(contentType, authorization, ids, expand, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspection Types Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionTypeModelArray</returns>
        public ApiResponse< ResponseInspectionTypeModelArray > V4GetSettingsInspectionsTypesIdsWithHttpInfo (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypesIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypesIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypesIds");

            var localVarPath = "/v4/settings/inspections/types/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsTypesIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionTypeModelArray)));
        }

        /// <summary>
        /// Get Inspection Types Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionTypeModelArray> V4GetSettingsInspectionsTypesIdsAsync (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionTypeModelArray> localVarResponse = await V4GetSettingsInspectionsTypesIdsAsyncWithHttpInfo(contentType, authorization, ids, expand, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspection Types Gets specific inspection types. **API Endpoint**:  GET /v4/settings/inspections/types/{ids}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of inspection types to fetch.</param>
        /// <param name="expand">The related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionTypeModelArray>> V4GetSettingsInspectionsTypesIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypesIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypesIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling SettingsInspectionsApi->V4GetSettingsInspectionsTypesIds");

            var localVarPath = "/v4/settings/inspections/types/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsInspectionsTypesIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionTypeModelArray)));
        }

    }
}
