/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAddressParcelsOwners.Client;
using AccelaAddressParcelsOwners.Model;

namespace AccelaAddressParcelsOwners.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IParcelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Parcels
        /// </summary>
        /// <remarks>
        /// Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseParcelModelArray</returns>
        ResponseParcelModelArray V4GetParcels (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcels
        /// </summary>
        /// <remarks>
        /// Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseParcelModelArray</returns>
        ApiResponse<ResponseParcelModelArray> V4GetParcelsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Parcel
        /// </summary>
        /// <remarks>
        /// Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseParcelModel</returns>
        ResponseParcelModel V4GetParcelsId (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Parcel
        /// </summary>
        /// <remarks>
        /// Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseParcelModel</returns>
        ApiResponse<ResponseParcelModel> V4GetParcelsIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Addresses
        /// </summary>
        /// <remarks>
        /// Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelArray</returns>
        ResponseAddressModelArray V4GetParcelsIdAddresses (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Addresses
        /// </summary>
        /// <remarks>
        /// Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelArray</returns>
        ApiResponse<ResponseAddressModelArray> V4GetParcelsIdAddressesWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModelArray</returns>
        ResponseSimpleRecordModelArray V4GetParcelsIdRecords (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModelArray</returns>
        ApiResponse<ResponseSimpleRecordModelArray> V4GetParcelsIdRecordsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        ResponseConditionModelArray V4GetParcelsParcelIdConditions (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        ApiResponse<ResponseConditionModelArray> V4GetParcelsParcelIdConditionsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseOwnerModelArray</returns>
        ResponseOwnerModelArray V4GetParcelsParcelIdOwners (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseOwnerModelArray</returns>
        ApiResponse<ResponseOwnerModelArray> V4GetParcelsParcelIdOwnersWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Parcels
        /// </summary>
        /// <remarks>
        /// Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseParcelModelArray</returns>
        System.Threading.Tasks.Task<ResponseParcelModelArray> V4GetParcelsAsync (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcels
        /// </summary>
        /// <remarks>
        /// Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseParcelModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseParcelModelArray>> V4GetParcelsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Parcel
        /// </summary>
        /// <remarks>
        /// Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseParcelModel</returns>
        System.Threading.Tasks.Task<ResponseParcelModel> V4GetParcelsIdAsync (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Parcel
        /// </summary>
        /// <remarks>
        /// Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseParcelModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseParcelModel>> V4GetParcelsIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Addresses
        /// </summary>
        /// <remarks>
        /// Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelArray</returns>
        System.Threading.Tasks.Task<ResponseAddressModelArray> V4GetParcelsIdAddressesAsync (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Addresses
        /// </summary>
        /// <remarks>
        /// Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelArray>> V4GetParcelsIdAddressesAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModelArray</returns>
        System.Threading.Tasks.Task<ResponseSimpleRecordModelArray> V4GetParcelsIdRecordsAsync (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Records
        /// </summary>
        /// <remarks>
        /// Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModelArray>> V4GetParcelsIdRecordsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetParcelsParcelIdConditionsAsync (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetParcelsParcelIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Parcel Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseOwnerModelArray</returns>
        System.Threading.Tasks.Task<ResponseOwnerModelArray> V4GetParcelsParcelIdOwnersAsync (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Parcel Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseOwnerModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseOwnerModelArray>> V4GetParcelsParcelIdOwnersAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ParcelsApi : IParcelsApi
    {
        private AccelaAddressParcelsOwners.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ParcelsApi(String basePath)
        {
            this.Configuration = new AccelaAddressParcelsOwners.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAddressParcelsOwners.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ParcelsApi(AccelaAddressParcelsOwners.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAddressParcelsOwners.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAddressParcelsOwners.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAddressParcelsOwners.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAddressParcelsOwners.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Parcels Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseParcelModelArray</returns>
        public ResponseParcelModelArray V4GetParcels (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseParcelModelArray> localVarResponse = V4GetParcelsWithHttpInfo(contentType, authorization, xAccelaAppid, parcelNumber, lot, isPrimary, range, subdivision, section, township, fullName, streetName, city, streetType, streetStart, streetEnd, expand, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Parcels Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseParcelModelArray</returns>
        public ApiResponse< ResponseParcelModelArray > V4GetParcelsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcels");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcels");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcels");

            var localVarPath = "/v4/parcels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parcelNumber", parcelNumber)); // query parameter
            if (lot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lot", lot)); // query parameter
            if (isPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPrimary", isPrimary)); // query parameter
            if (range != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "range", range)); // query parameter
            if (subdivision != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subdivision", subdivision)); // query parameter
            if (section != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "section", section)); // query parameter
            if (township != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "township", township)); // query parameter
            if (fullName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fullName", fullName)); // query parameter
            if (streetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetName", streetName)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (streetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetType", streetType)); // query parameter
            if (streetStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetStart", streetStart)); // query parameter
            if (streetEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetEnd", streetEnd)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseParcelModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseParcelModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseParcelModelArray)));
        }

        /// <summary>
        /// Get All Parcels Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseParcelModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseParcelModelArray> V4GetParcelsAsync (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseParcelModelArray> localVarResponse = await V4GetParcelsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, parcelNumber, lot, isPrimary, range, subdivision, section, township, fullName, streetName, city, streetType, streetStart, streetEnd, expand, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Parcels Gets a list of reference parcels in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/parcels   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelNumber">Filter by parcel number. (optional)</param>
        /// <param name="lot">Filter by parcel lot. (optional)</param>
        /// <param name="isPrimary">Filter by whether or not parcel is primary. (optional)</param>
        /// <param name="range">Filter by parcel range. (optional)</param>
        /// <param name="subdivision">Filter by parcel subdivision. (optional)</param>
        /// <param name="section">Filter by parcel section. (optional)</param>
        /// <param name="township">Filter by parcel township. (optional)</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="streetName">Filter by street name. (optional)</param>
        /// <param name="city">Filter by city. (optional)</param>
        /// <param name="streetType">Filter by street type. (optional)</param>
        /// <param name="streetStart">Filter by the starting number of a street address range. (optional)</param>
        /// <param name="streetEnd">Filter by the ending number of a street address range. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseParcelModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseParcelModelArray>> V4GetParcelsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelNumber = null, string lot = null, string isPrimary = null, string range = null, string subdivision = null, long? section = null, string township = null, string fullName = null, string streetName = null, string city = null, string streetType = null, long? streetStart = null, long? streetEnd = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcels");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcels");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcels");

            var localVarPath = "/v4/parcels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelNumber != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parcelNumber", parcelNumber)); // query parameter
            if (lot != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lot", lot)); // query parameter
            if (isPrimary != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "isPrimary", isPrimary)); // query parameter
            if (range != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "range", range)); // query parameter
            if (subdivision != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "subdivision", subdivision)); // query parameter
            if (section != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "section", section)); // query parameter
            if (township != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "township", township)); // query parameter
            if (fullName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fullName", fullName)); // query parameter
            if (streetName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetName", streetName)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (streetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetType", streetType)); // query parameter
            if (streetStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetStart", streetStart)); // query parameter
            if (streetEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "streetEnd", streetEnd)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseParcelModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseParcelModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseParcelModelArray)));
        }

        /// <summary>
        /// Get Parcel Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseParcelModel</returns>
        public ResponseParcelModel V4GetParcelsId (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseParcelModel> localVarResponse = V4GetParcelsIdWithHttpInfo(contentType, authorization, xAccelaAppid, id, expand, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Parcel Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseParcelModel</returns>
        public ApiResponse< ResponseParcelModel > V4GetParcelsIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParcelsApi->V4GetParcelsId");

            var localVarPath = "/v4/parcels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseParcelModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseParcelModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseParcelModel)));
        }

        /// <summary>
        /// Get Parcel Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseParcelModel</returns>
        public async System.Threading.Tasks.Task<ResponseParcelModel> V4GetParcelsIdAsync (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseParcelModel> localVarResponse = await V4GetParcelsIdAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, expand, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Parcel Gets information about a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**:  7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseParcelModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseParcelModel>> V4GetParcelsIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParcelsApi->V4GetParcelsId");

            var localVarPath = "/v4/parcels/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseParcelModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseParcelModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseParcelModel)));
        }

        /// <summary>
        /// Get All Parcel Addresses Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseAddressModelArray</returns>
        public ResponseAddressModelArray V4GetParcelsIdAddresses (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAddressModelArray> localVarResponse = V4GetParcelsIdAddressesWithHttpInfo(contentType, authorization, xAccelaAppid, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Parcel Addresses Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAddressModelArray</returns>
        public ApiResponse< ResponseAddressModelArray > V4GetParcelsIdAddressesWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsIdAddresses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsIdAddresses");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsIdAddresses");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParcelsApi->V4GetParcelsIdAddresses");

            var localVarPath = "/v4/parcels/{id}/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsIdAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelArray)));
        }

        /// <summary>
        /// Get All Parcel Addresses Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAddressModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseAddressModelArray> V4GetParcelsIdAddressesAsync (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAddressModelArray> localVarResponse = await V4GetParcelsIdAddressesAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Parcel Addresses Gets a list of addresses for a reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/addresses   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAddressModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAddressModelArray>> V4GetParcelsIdAddressesAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsIdAddresses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsIdAddresses");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsIdAddresses");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParcelsApi->V4GetParcelsIdAddresses");

            var localVarPath = "/v4/parcels/{id}/addresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsIdAddresses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAddressModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAddressModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAddressModelArray)));
        }

        /// <summary>
        /// Get All Parcel Records Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseSimpleRecordModelArray</returns>
        public ResponseSimpleRecordModelArray V4GetParcelsIdRecords (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModelArray> localVarResponse = V4GetParcelsIdRecordsWithHttpInfo(contentType, authorization, xAccelaAppid, id, includeRecordsFromParcelHistory, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Parcel Records Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseSimpleRecordModelArray</returns>
        public ApiResponse< ResponseSimpleRecordModelArray > V4GetParcelsIdRecordsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsIdRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsIdRecords");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsIdRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParcelsApi->V4GetParcelsIdRecords");

            var localVarPath = "/v4/parcels/{id}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeRecordsFromParcelHistory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRecordsFromParcelHistory", includeRecordsFromParcelHistory)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsIdRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModelArray)));
        }

        /// <summary>
        /// Get All Parcel Records Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseSimpleRecordModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseSimpleRecordModelArray> V4GetParcelsIdRecordsAsync (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseSimpleRecordModelArray> localVarResponse = await V4GetParcelsIdRecordsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, includeRecordsFromParcelHistory, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Parcel Records Gets the records associated with the given reference parcel.    **API Endpoint**:  GET /v4/parcels/{id}/records   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 9.3.0   
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the parcel to fetch.</param>
        /// <param name="includeRecordsFromParcelHistory">If true, records for the given reference parcel and all historical parcels in its genealogy (such as its parents, grandparents, or ancestors) will be returned. If false, only records for the given reference parcel will be returned. Default is false. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseSimpleRecordModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseSimpleRecordModelArray>> V4GetParcelsIdRecordsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, bool? includeRecordsFromParcelHistory = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsIdRecords");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsIdRecords");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsIdRecords");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ParcelsApi->V4GetParcelsIdRecords");

            var localVarPath = "/v4/parcels/{id}/records";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includeRecordsFromParcelHistory != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeRecordsFromParcelHistory", includeRecordsFromParcelHistory)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsIdRecords", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseSimpleRecordModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseSimpleRecordModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseSimpleRecordModelArray)));
        }

        /// <summary>
        /// Get All Parcel Conditions Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        public ResponseConditionModelArray V4GetParcelsParcelIdConditions (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = V4GetParcelsParcelIdConditionsWithHttpInfo(contentType, authorization, xAccelaAppid, parcelId, type, name, status, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Parcel Conditions Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        public ApiResponse< ResponseConditionModelArray > V4GetParcelsParcelIdConditionsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsParcelIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsParcelIdConditions");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsParcelIdConditions");
            // verify the required parameter 'parcelId' is set
            if (parcelId == null)
                throw new ApiException(400, "Missing required parameter 'parcelId' when calling ParcelsApi->V4GetParcelsParcelIdConditions");

            var localVarPath = "/v4/parcels/{parcelId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelId != null) localVarPathParams.Add("parcelId", this.Configuration.ApiClient.ParameterToString(parcelId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsParcelIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

        /// <summary>
        /// Get All Parcel Conditions Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetParcelsParcelIdConditionsAsync (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = await V4GetParcelsParcelIdConditionsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, parcelId, type, name, status, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Parcel Conditions Gets the conditions for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/conditions   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetParcelsParcelIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsParcelIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsParcelIdConditions");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsParcelIdConditions");
            // verify the required parameter 'parcelId' is set
            if (parcelId == null)
                throw new ApiException(400, "Missing required parameter 'parcelId' when calling ParcelsApi->V4GetParcelsParcelIdConditions");

            var localVarPath = "/v4/parcels/{parcelId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelId != null) localVarPathParams.Add("parcelId", this.Configuration.ApiClient.ParameterToString(parcelId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsParcelIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

        /// <summary>
        /// Get All Parcel Owners Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseOwnerModelArray</returns>
        public ResponseOwnerModelArray V4GetParcelsParcelIdOwners (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseOwnerModelArray> localVarResponse = V4GetParcelsParcelIdOwnersWithHttpInfo(contentType, authorization, xAccelaAppid, parcelId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Parcel Owners Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseOwnerModelArray</returns>
        public ApiResponse< ResponseOwnerModelArray > V4GetParcelsParcelIdOwnersWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsParcelIdOwners");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsParcelIdOwners");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsParcelIdOwners");
            // verify the required parameter 'parcelId' is set
            if (parcelId == null)
                throw new ApiException(400, "Missing required parameter 'parcelId' when calling ParcelsApi->V4GetParcelsParcelIdOwners");

            var localVarPath = "/v4/parcels/{parcelId}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelId != null) localVarPathParams.Add("parcelId", this.Configuration.ApiClient.ParameterToString(parcelId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsParcelIdOwners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOwnerModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseOwnerModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOwnerModelArray)));
        }

        /// <summary>
        /// Get All Parcel Owners Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseOwnerModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseOwnerModelArray> V4GetParcelsParcelIdOwnersAsync (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseOwnerModelArray> localVarResponse = await V4GetParcelsParcelIdOwnersAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, parcelId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Parcel Owners Gets a list of owners for the reference parcel.    **API Endpoint**:  GET /v4/parcels/{parcelId}/owners   **Scope**:  parcels   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="parcelId">The system id of the parcel to fetch.</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseOwnerModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseOwnerModelArray>> V4GetParcelsParcelIdOwnersAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string parcelId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ParcelsApi->V4GetParcelsParcelIdOwners");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ParcelsApi->V4GetParcelsParcelIdOwners");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling ParcelsApi->V4GetParcelsParcelIdOwners");
            // verify the required parameter 'parcelId' is set
            if (parcelId == null)
                throw new ApiException(400, "Missing required parameter 'parcelId' when calling ParcelsApi->V4GetParcelsParcelIdOwners");

            var localVarPath = "/v4/parcels/{parcelId}/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (parcelId != null) localVarPathParams.Add("parcelId", this.Configuration.ApiClient.ParameterToString(parcelId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetParcelsParcelIdOwners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOwnerModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseOwnerModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOwnerModelArray)));
        }

    }
}
