/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaMiscellanous.Client.SwaggerDateConverter;

namespace AccelaMiscellanous.Model
{
    /// <summary>
    /// Contains the address information for the given coordinates.
    /// </summary>
    [DataContract]
    public partial class GeocodeAddressModel :  IEquatable<GeocodeAddressModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GeocodeAddressModel" /> class.
        /// </summary>
        /// <param name="addressFormat">The full address..</param>
        /// <param name="houseNumber">The street address number..</param>
        /// <param name="houseNumberFraction">A fraction used in combination with the street number..</param>
        /// <param name="street">The street address, including number and name..</param>
        /// <param name="streetDirection">The street direction, such as \&quot;N\&quot;, \&quot;SW\&quot;, \&quot;East\&quot;, etc..</param>
        /// <param name="streetName">The name of the street..</param>
        /// <param name="streetPrefix">A prefix used with the street address, such as a directional street number prefix..</param>
        /// <param name="streetSuffix">A suffix used with the street address, such as a building suite suffix..</param>
        /// <param name="streetSuffixDirection">The street direction used in a street suffix..</param>
        /// <param name="city">The name of the city..</param>
        /// <param name="state">The name of the state..</param>
        /// <param name="stateAbbreviation">The state code or abbreviation..</param>
        /// <param name="postalCode">The postal zip code..</param>
        /// <param name="country">The name of the country..</param>
        /// <param name="countryCode">The country code or abbreviation..</param>
        public GeocodeAddressModel(string addressFormat = default(string), string houseNumber = default(string), string houseNumberFraction = default(string), string street = default(string), string streetDirection = default(string), string streetName = default(string), string streetPrefix = default(string), string streetSuffix = default(string), string streetSuffixDirection = default(string), string city = default(string), string state = default(string), string stateAbbreviation = default(string), string postalCode = default(string), string country = default(string), string countryCode = default(string))
        {
            this.AddressFormat = addressFormat;
            this.HouseNumber = houseNumber;
            this.HouseNumberFraction = houseNumberFraction;
            this.Street = street;
            this.StreetDirection = streetDirection;
            this.StreetName = streetName;
            this.StreetPrefix = streetPrefix;
            this.StreetSuffix = streetSuffix;
            this.StreetSuffixDirection = streetSuffixDirection;
            this.City = city;
            this.State = state;
            this.StateAbbreviation = stateAbbreviation;
            this.PostalCode = postalCode;
            this.Country = country;
            this.CountryCode = countryCode;
        }
        
        /// <summary>
        /// The full address.
        /// </summary>
        /// <value>The full address.</value>
        [DataMember(Name="addressFormat", EmitDefaultValue=false)]
        public string AddressFormat { get; set; }

        /// <summary>
        /// The street address number.
        /// </summary>
        /// <value>The street address number.</value>
        [DataMember(Name="houseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// A fraction used in combination with the street number.
        /// </summary>
        /// <value>A fraction used in combination with the street number.</value>
        [DataMember(Name="houseNumberFraction", EmitDefaultValue=false)]
        public string HouseNumberFraction { get; set; }

        /// <summary>
        /// The street address, including number and name.
        /// </summary>
        /// <value>The street address, including number and name.</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// The street direction, such as \&quot;N\&quot;, \&quot;SW\&quot;, \&quot;East\&quot;, etc.
        /// </summary>
        /// <value>The street direction, such as \&quot;N\&quot;, \&quot;SW\&quot;, \&quot;East\&quot;, etc.</value>
        [DataMember(Name="streetDirection", EmitDefaultValue=false)]
        public string StreetDirection { get; set; }

        /// <summary>
        /// The name of the street.
        /// </summary>
        /// <value>The name of the street.</value>
        [DataMember(Name="streetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// A prefix used with the street address, such as a directional street number prefix.
        /// </summary>
        /// <value>A prefix used with the street address, such as a directional street number prefix.</value>
        [DataMember(Name="streetPrefix", EmitDefaultValue=false)]
        public string StreetPrefix { get; set; }

        /// <summary>
        /// A suffix used with the street address, such as a building suite suffix.
        /// </summary>
        /// <value>A suffix used with the street address, such as a building suite suffix.</value>
        [DataMember(Name="streetSuffix", EmitDefaultValue=false)]
        public string StreetSuffix { get; set; }

        /// <summary>
        /// The street direction used in a street suffix.
        /// </summary>
        /// <value>The street direction used in a street suffix.</value>
        [DataMember(Name="streetSuffixDirection", EmitDefaultValue=false)]
        public string StreetSuffixDirection { get; set; }

        /// <summary>
        /// The name of the city.
        /// </summary>
        /// <value>The name of the city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// The name of the state.
        /// </summary>
        /// <value>The name of the state.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The state code or abbreviation.
        /// </summary>
        /// <value>The state code or abbreviation.</value>
        [DataMember(Name="stateAbbreviation", EmitDefaultValue=false)]
        public string StateAbbreviation { get; set; }

        /// <summary>
        /// The postal zip code.
        /// </summary>
        /// <value>The postal zip code.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The name of the country.
        /// </summary>
        /// <value>The name of the country.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// The country code or abbreviation.
        /// </summary>
        /// <value>The country code or abbreviation.</value>
        [DataMember(Name="countryCode", EmitDefaultValue=false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeocodeAddressModel {\n");
            sb.Append("  AddressFormat: ").Append(AddressFormat).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  HouseNumberFraction: ").Append(HouseNumberFraction).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  StreetDirection: ").Append(StreetDirection).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetPrefix: ").Append(StreetPrefix).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  StreetSuffixDirection: ").Append(StreetSuffixDirection).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StateAbbreviation: ").Append(StateAbbreviation).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GeocodeAddressModel);
        }

        /// <summary>
        /// Returns true if GeocodeAddressModel instances are equal
        /// </summary>
        /// <param name="input">Instance of GeocodeAddressModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeocodeAddressModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressFormat == input.AddressFormat ||
                    (this.AddressFormat != null &&
                    this.AddressFormat.Equals(input.AddressFormat))
                ) && 
                (
                    this.HouseNumber == input.HouseNumber ||
                    (this.HouseNumber != null &&
                    this.HouseNumber.Equals(input.HouseNumber))
                ) && 
                (
                    this.HouseNumberFraction == input.HouseNumberFraction ||
                    (this.HouseNumberFraction != null &&
                    this.HouseNumberFraction.Equals(input.HouseNumberFraction))
                ) && 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.StreetDirection == input.StreetDirection ||
                    (this.StreetDirection != null &&
                    this.StreetDirection.Equals(input.StreetDirection))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetPrefix == input.StreetPrefix ||
                    (this.StreetPrefix != null &&
                    this.StreetPrefix.Equals(input.StreetPrefix))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.StreetSuffixDirection == input.StreetSuffixDirection ||
                    (this.StreetSuffixDirection != null &&
                    this.StreetSuffixDirection.Equals(input.StreetSuffixDirection))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.StateAbbreviation == input.StateAbbreviation ||
                    (this.StateAbbreviation != null &&
                    this.StateAbbreviation.Equals(input.StateAbbreviation))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.CountryCode == input.CountryCode ||
                    (this.CountryCode != null &&
                    this.CountryCode.Equals(input.CountryCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressFormat != null)
                    hashCode = hashCode * 59 + this.AddressFormat.GetHashCode();
                if (this.HouseNumber != null)
                    hashCode = hashCode * 59 + this.HouseNumber.GetHashCode();
                if (this.HouseNumberFraction != null)
                    hashCode = hashCode * 59 + this.HouseNumberFraction.GetHashCode();
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.StreetDirection != null)
                    hashCode = hashCode * 59 + this.StreetDirection.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetPrefix != null)
                    hashCode = hashCode * 59 + this.StreetPrefix.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.StreetSuffixDirection != null)
                    hashCode = hashCode * 59 + this.StreetSuffixDirection.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.StateAbbreviation != null)
                    hashCode = hashCode * 59 + this.StateAbbreviation.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.CountryCode != null)
                    hashCode = hashCode * 59 + this.CountryCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
