/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaPayments.Client;
using AccelaPayments.Model;

namespace AccelaPayments.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPaymentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePaymentResponseModel</returns>
        ResponsePaymentResponseModel V4PostPayments (string contentType, string authorization, PaymentRequestModel body = null, string lang = null);

        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePaymentResponseModel</returns>
        ApiResponse<ResponsePaymentResponseModel> V4PostPaymentsWithHttpInfo (string contentType, string authorization, PaymentRequestModel body = null, string lang = null);
        /// <summary>
        /// Initialize Payment
        /// </summary>
        /// <remarks>
        /// Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePaymentTransactionModel</returns>
        ResponsePaymentTransactionModel V4PostPaymentsInitialize (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null);

        /// <summary>
        /// Initialize Payment
        /// </summary>
        /// <remarks>
        /// Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePaymentTransactionModel</returns>
        ApiResponse<ResponsePaymentTransactionModel> V4PostPaymentsInitializeWithHttpInfo (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null);
        /// <summary>
        /// Commit Payment
        /// </summary>
        /// <remarks>
        /// Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePaymentCommitResultModel</returns>
        ResponsePaymentCommitResultModel V4PutPaymentsId (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null);

        /// <summary>
        /// Commit Payment
        /// </summary>
        /// <remarks>
        /// Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePaymentCommitResultModel</returns>
        ApiResponse<ResponsePaymentCommitResultModel> V4PutPaymentsIdWithHttpInfo (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null);
        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        ResponseResultModel V4PutPaymentsPaymentIdVoid (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null);

        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        ApiResponse<ResponseResultModel> V4PutPaymentsPaymentIdVoidWithHttpInfo (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePaymentResponseModel</returns>
        System.Threading.Tasks.Task<ResponsePaymentResponseModel> V4PostPaymentsAsync (string contentType, string authorization, PaymentRequestModel body = null, string lang = null);

        /// <summary>
        /// Create Payment
        /// </summary>
        /// <remarks>
        /// Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePaymentResponseModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePaymentResponseModel>> V4PostPaymentsAsyncWithHttpInfo (string contentType, string authorization, PaymentRequestModel body = null, string lang = null);
        /// <summary>
        /// Initialize Payment
        /// </summary>
        /// <remarks>
        /// Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePaymentTransactionModel</returns>
        System.Threading.Tasks.Task<ResponsePaymentTransactionModel> V4PostPaymentsInitializeAsync (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null);

        /// <summary>
        /// Initialize Payment
        /// </summary>
        /// <remarks>
        /// Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePaymentTransactionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePaymentTransactionModel>> V4PostPaymentsInitializeAsyncWithHttpInfo (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null);
        /// <summary>
        /// Commit Payment
        /// </summary>
        /// <remarks>
        /// Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePaymentCommitResultModel</returns>
        System.Threading.Tasks.Task<ResponsePaymentCommitResultModel> V4PutPaymentsIdAsync (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null);

        /// <summary>
        /// Commit Payment
        /// </summary>
        /// <remarks>
        /// Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePaymentCommitResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePaymentCommitResultModel>> V4PutPaymentsIdAsyncWithHttpInfo (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null);
        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        System.Threading.Tasks.Task<ResponseResultModel> V4PutPaymentsPaymentIdVoidAsync (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null);

        /// <summary>
        /// Void Payment
        /// </summary>
        /// <remarks>
        /// Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PutPaymentsPaymentIdVoidAsyncWithHttpInfo (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PaymentsApi : IPaymentsApi
    {
        private AccelaPayments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PaymentsApi(String basePath)
        {
            this.Configuration = new AccelaPayments.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaPayments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// </summary>
        /// <returns></returns>
        public PaymentsApi()
        {
            this.Configuration = AccelaPayments.Client.Configuration.Default;

            ExceptionFactory = AccelaPayments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PaymentsApi(AccelaPayments.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaPayments.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaPayments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaPayments.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaPayments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Payment Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePaymentResponseModel</returns>
        public ResponsePaymentResponseModel V4PostPayments (string contentType, string authorization, PaymentRequestModel body = null, string lang = null)
        {
             ApiResponse<ResponsePaymentResponseModel> localVarResponse = V4PostPaymentsWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Payment Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePaymentResponseModel</returns>
        public ApiResponse< ResponsePaymentResponseModel > V4PostPaymentsWithHttpInfo (string contentType, string authorization, PaymentRequestModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PostPayments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PostPayments");

            var localVarPath = "/v4/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePaymentResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsePaymentResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePaymentResponseModel)));
        }

        /// <summary>
        /// Create Payment Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePaymentResponseModel</returns>
        public async System.Threading.Tasks.Task<ResponsePaymentResponseModel> V4PostPaymentsAsync (string contentType, string authorization, PaymentRequestModel body = null, string lang = null)
        {
             ApiResponse<ResponsePaymentResponseModel> localVarResponse = await V4PostPaymentsAsyncWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Payment Creates a payment for the cashier. **API Endpoint**:  POST /v4/payments  **Scope**:  payments  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Payment request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePaymentResponseModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePaymentResponseModel>> V4PostPaymentsAsyncWithHttpInfo (string contentType, string authorization, PaymentRequestModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PostPayments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PostPayments");

            var localVarPath = "/v4/payments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostPayments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePaymentResponseModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsePaymentResponseModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePaymentResponseModel)));
        }

        /// <summary>
        /// Initialize Payment Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePaymentTransactionModel</returns>
        public ResponsePaymentTransactionModel V4PostPaymentsInitialize (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null)
        {
             ApiResponse<ResponsePaymentTransactionModel> localVarResponse = V4PostPaymentsInitializeWithHttpInfo(body, contentType, authorization, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Initialize Payment Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePaymentTransactionModel</returns>
        public ApiResponse< ResponsePaymentTransactionModel > V4PostPaymentsInitializeWithHttpInfo (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->V4PostPaymentsInitialize");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PostPaymentsInitialize");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PostPaymentsInitialize");

            var localVarPath = "/v4/payments/initialize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostPaymentsInitialize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePaymentTransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsePaymentTransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePaymentTransactionModel)));
        }

        /// <summary>
        /// Initialize Payment Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePaymentTransactionModel</returns>
        public async System.Threading.Tasks.Task<ResponsePaymentTransactionModel> V4PostPaymentsInitializeAsync (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null)
        {
             ApiResponse<ResponsePaymentTransactionModel> localVarResponse = await V4PostPaymentsInitializeAsyncWithHttpInfo(body, contentType, authorization, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Initialize Payment Initializes citizen payment information for processing by a third party payment system that will send and commit final payment information into Automation. Call Initialize Payment to get the transaction ID required to call Commit Payment. **API Endpoint**:  POST /v4/payments/initialize  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment initialization request information.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePaymentTransactionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePaymentTransactionModel>> V4PostPaymentsInitializeAsyncWithHttpInfo (PaymentInitializeModel body, string contentType, string authorization, string fields = null, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->V4PostPaymentsInitialize");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PostPaymentsInitialize");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PostPaymentsInitialize");

            var localVarPath = "/v4/payments/initialize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostPaymentsInitialize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePaymentTransactionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsePaymentTransactionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePaymentTransactionModel)));
        }

        /// <summary>
        /// Commit Payment Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePaymentCommitResultModel</returns>
        public ResponsePaymentCommitResultModel V4PutPaymentsId (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponsePaymentCommitResultModel> localVarResponse = V4PutPaymentsIdWithHttpInfo(contentType, authorization, id, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Commit Payment Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePaymentCommitResultModel</returns>
        public ApiResponse< ResponsePaymentCommitResultModel > V4PutPaymentsIdWithHttpInfo (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PutPaymentsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PutPaymentsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->V4PutPaymentsId");

            var localVarPath = "/v4/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutPaymentsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePaymentCommitResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsePaymentCommitResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePaymentCommitResultModel)));
        }

        /// <summary>
        /// Commit Payment Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePaymentCommitResultModel</returns>
        public async System.Threading.Tasks.Task<ResponsePaymentCommitResultModel> V4PutPaymentsIdAsync (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponsePaymentCommitResultModel> localVarResponse = await V4PutPaymentsIdAsyncWithHttpInfo(contentType, authorization, id, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Commit Payment Processes and commits citizen payment information for the specified payment transaction ID. The Commit Payment API allows a third-party payment vendor to send payment information to Automation. The Commit Payment API processes the payment information, logs merchant account audit information, triggers the EMSE events ConvertToRealCAPBefore and PaymentReceiveBefore, creates a transaction record, triggers the EMSE event ConvertToRealCAPAfter, finishes the Automation payment, triggers the EMSE event PaymentReceiveAfter, and appoves the transaction. Note: An agency Construct administrator controls which apps can call Commit Payment. By default, Commit Payment is disabled. To allow an app to call Commit Payment, an agency administrator must go to the [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {Agency} &gt; Apps, and enable the Payment Enabled property for the app. **API Endpoint**:  PUT /v4/payments/{id}  **Scope**:  payments  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**:  7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The system id of the record payment to void.</param>
        /// <param name="body">The payment information to commit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePaymentCommitResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePaymentCommitResultModel>> V4PutPaymentsIdAsyncWithHttpInfo (string contentType, string authorization, string id, PaymentCommitModel body = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PutPaymentsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PutPaymentsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PaymentsApi->V4PutPaymentsId");

            var localVarPath = "/v4/payments/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutPaymentsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePaymentCommitResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponsePaymentCommitResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePaymentCommitResultModel)));
        }

        /// <summary>
        /// Void Payment Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        public ResponseResultModel V4PutPaymentsPaymentIdVoid (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = V4PutPaymentsPaymentIdVoidWithHttpInfo(body, contentType, authorization, paymentId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Void Payment Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        public ApiResponse< ResponseResultModel > V4PutPaymentsPaymentIdVoidWithHttpInfo (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");

            var localVarPath = "/v4/payments/{paymentId}/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentId != null) localVarPathParams.Add("paymentId", this.Configuration.ApiClient.ParameterToString(paymentId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutPaymentsPaymentIdVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

        /// <summary>
        /// Void Payment Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultModel> V4PutPaymentsPaymentIdVoidAsync (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = await V4PutPaymentsPaymentIdVoidAsyncWithHttpInfo(body, contentType, authorization, paymentId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Void Payment Voids a given payment. When you void a payment, Civic Platform decreases the total payment amount and then increases the balance owed, as if you never made the payment. **API Endpoint**:  PUT /v4/payments/{paymentId}/void  **Scope**:  payments  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaPayments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Payment information to void.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="paymentId">The id of the payment to void. See [Get All Payments for Record](./api-records.html#operation/v4.get.records.recordId.payments)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PutPaymentsPaymentIdVoidAsyncWithHttpInfo (PaymentVoidModel body, string contentType, string authorization, string paymentId, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");
            // verify the required parameter 'paymentId' is set
            if (paymentId == null)
                throw new ApiException(400, "Missing required parameter 'paymentId' when calling PaymentsApi->V4PutPaymentsPaymentIdVoid");

            var localVarPath = "/v4/payments/{paymentId}/void";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (paymentId != null) localVarPathParams.Add("paymentId", this.Configuration.ApiClient.ParameterToString(paymentId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutPaymentsPaymentIdVoid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

    }
}
