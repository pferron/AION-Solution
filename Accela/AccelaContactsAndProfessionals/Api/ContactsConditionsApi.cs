/* 
 * Contacts and Professionals
 *
 * The Contacts and Professionals APIs enable apps to manage reference contacts and licensed professionals.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaContactsAndProfessionals.Client;
using AccelaContactsAndProfessionals.Model;

namespace AccelaContactsAndProfessionals.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsConditionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Contact Condition
        /// </summary>
        /// <remarks>
        /// Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCommonConditionModel</returns>
        ResponseCommonConditionModel V4DeleteContactsContactIdConditionsId (string contentType, string authorization, string contactId, long? id, string lang = null);

        /// <summary>
        /// Delete Contact Condition
        /// </summary>
        /// <remarks>
        /// Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCommonConditionModel</returns>
        ApiResponse<ResponseCommonConditionModel> V4DeleteContactsContactIdConditionsIdWithHttpInfo (string contentType, string authorization, string contactId, long? id, string lang = null);
        /// <summary>
        /// Get All Contact Conditions
        /// </summary>
        /// <remarks>
        /// Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCommonConditionModelArray</returns>
        ResponseCommonConditionModelArray V4GetContactsContactIdConditions (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Contact Conditions
        /// </summary>
        /// <remarks>
        /// Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCommonConditionModelArray</returns>
        ApiResponse<ResponseCommonConditionModelArray> V4GetContactsContactIdConditionsWithHttpInfo (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Create Contact Conditions
        /// </summary>
        /// <remarks>
        /// Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostContactsContactIdConditions (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null);

        /// <summary>
        /// Create Contact Conditions
        /// </summary>
        /// <remarks>
        /// Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostContactsContactIdConditionsWithHttpInfo (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null);
        /// <summary>
        /// Update Contact Condition
        /// </summary>
        /// <remarks>
        /// Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCommonConditionModel</returns>
        ResponseCommonConditionModel V4PutContactsContactIdConditionsId (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null);

        /// <summary>
        /// Update Contact Condition
        /// </summary>
        /// <remarks>
        /// Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCommonConditionModel</returns>
        ApiResponse<ResponseCommonConditionModel> V4PutContactsContactIdConditionsIdWithHttpInfo (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Contact Condition
        /// </summary>
        /// <remarks>
        /// Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCommonConditionModel</returns>
        System.Threading.Tasks.Task<ResponseCommonConditionModel> V4DeleteContactsContactIdConditionsIdAsync (string contentType, string authorization, string contactId, long? id, string lang = null);

        /// <summary>
        /// Delete Contact Condition
        /// </summary>
        /// <remarks>
        /// Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCommonConditionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCommonConditionModel>> V4DeleteContactsContactIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, string contactId, long? id, string lang = null);
        /// <summary>
        /// Get All Contact Conditions
        /// </summary>
        /// <remarks>
        /// Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCommonConditionModelArray</returns>
        System.Threading.Tasks.Task<ResponseCommonConditionModelArray> V4GetContactsContactIdConditionsAsync (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Contact Conditions
        /// </summary>
        /// <remarks>
        /// Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCommonConditionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCommonConditionModelArray>> V4GetContactsContactIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Create Contact Conditions
        /// </summary>
        /// <remarks>
        /// Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostContactsContactIdConditionsAsync (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null);

        /// <summary>
        /// Create Contact Conditions
        /// </summary>
        /// <remarks>
        /// Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostContactsContactIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null);
        /// <summary>
        /// Update Contact Condition
        /// </summary>
        /// <remarks>
        /// Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCommonConditionModel</returns>
        System.Threading.Tasks.Task<ResponseCommonConditionModel> V4PutContactsContactIdConditionsIdAsync (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null);

        /// <summary>
        /// Update Contact Condition
        /// </summary>
        /// <remarks>
        /// Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </remarks>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCommonConditionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCommonConditionModel>> V4PutContactsContactIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsConditionsApi : IContactsConditionsApi
    {
        private AccelaContactsAndProfessionals.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsConditionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsConditionsApi(String basePath)
        {
            this.Configuration = new AccelaContactsAndProfessionals.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsConditionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsConditionsApi(AccelaContactsAndProfessionals.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaContactsAndProfessionals.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaContactsAndProfessionals.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaContactsAndProfessionals.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaContactsAndProfessionals.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Contact Condition Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCommonConditionModel</returns>
        public ResponseCommonConditionModel V4DeleteContactsContactIdConditionsId (string contentType, string authorization, string contactId, long? id, string lang = null)
        {
             ApiResponse<ResponseCommonConditionModel> localVarResponse = V4DeleteContactsContactIdConditionsIdWithHttpInfo(contentType, authorization, contactId, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contact Condition Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCommonConditionModel</returns>
        public ApiResponse< ResponseCommonConditionModel > V4DeleteContactsContactIdConditionsIdWithHttpInfo (string contentType, string authorization, string contactId, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");

            var localVarPath = "/v4/contacts/{contactId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteContactsContactIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCommonConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCommonConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCommonConditionModel)));
        }

        /// <summary>
        /// Delete Contact Condition Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCommonConditionModel</returns>
        public async System.Threading.Tasks.Task<ResponseCommonConditionModel> V4DeleteContactsContactIdConditionsIdAsync (string contentType, string authorization, string contactId, long? id, string lang = null)
        {
             ApiResponse<ResponseCommonConditionModel> localVarResponse = await V4DeleteContactsContactIdConditionsIdAsyncWithHttpInfo(contentType, authorization, contactId, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Contact Condition Deletes the condition for the specified contact. **API Endpoint**:  DELETE /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCommonConditionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCommonConditionModel>> V4DeleteContactsContactIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, string contactId, long? id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsConditionsApi->V4DeleteContactsContactIdConditionsId");

            var localVarPath = "/v4/contacts/{contactId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteContactsContactIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCommonConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCommonConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCommonConditionModel)));
        }

        /// <summary>
        /// Get All Contact Conditions Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCommonConditionModelArray</returns>
        public ResponseCommonConditionModelArray V4GetContactsContactIdConditions (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseCommonConditionModelArray> localVarResponse = V4GetContactsContactIdConditionsWithHttpInfo(contentType, authorization, contactId, type, name, status, fields, offset, limit, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Contact Conditions Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCommonConditionModelArray</returns>
        public ApiResponse< ResponseCommonConditionModelArray > V4GetContactsContactIdConditionsWithHttpInfo (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4GetContactsContactIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4GetContactsContactIdConditions");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4GetContactsContactIdConditions");

            var localVarPath = "/v4/contacts/{contactId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCommonConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCommonConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCommonConditionModelArray)));
        }

        /// <summary>
        /// Get All Contact Conditions Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCommonConditionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCommonConditionModelArray> V4GetContactsContactIdConditionsAsync (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseCommonConditionModelArray> localVarResponse = await V4GetContactsContactIdConditionsAsyncWithHttpInfo(contentType, authorization, contactId, type, name, status, fields, offset, limit, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Contact Conditions Gets condition information for the specified contact. **API Endpoint**:  GET /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="type">Filter by contact types. See [Get All Contact Types](./api-settings.html#operation/v4.get.settings.contacts.types). (optional)</param>
        /// <param name="name">Filter by condition name. See [Get All Approval Conditions](./api-misc.html#operation/v4.get.conditionApprovals.standard), [Get All Standard Conditions](./api-misc.html#operation/v4.get.conditions.standard). (optional)</param>
        /// <param name="status">Filter by status. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCommonConditionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCommonConditionModelArray>> V4GetContactsContactIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string contactId, string type = null, string name = null, string status = null, string fields = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4GetContactsContactIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4GetContactsContactIdConditions");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4GetContactsContactIdConditions");

            var localVarPath = "/v4/contacts/{contactId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetContactsContactIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCommonConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCommonConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCommonConditionModelArray)));
        }

        /// <summary>
        /// Create Contact Conditions Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostContactsContactIdConditions (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostContactsContactIdConditionsWithHttpInfo(contentType, authorization, contactId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Contact Conditions Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostContactsContactIdConditionsWithHttpInfo (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4PostContactsContactIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4PostContactsContactIdConditions");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4PostContactsContactIdConditions");

            var localVarPath = "/v4/contacts/{contactId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostContactsContactIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Contact Conditions Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostContactsContactIdConditionsAsync (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostContactsContactIdConditionsAsyncWithHttpInfo(contentType, authorization, contactId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Contact Conditions Adds condition information to the specified contact. **API Endpoint**:  POST /v4/contacts/{contactId}/conditions  **Scope**:  contacts  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="body">Add contact condition request information. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostContactsContactIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string contactId, List<RequestCommonConditionModel> body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4PostContactsContactIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4PostContactsContactIdConditions");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4PostContactsContactIdConditions");

            var localVarPath = "/v4/contacts/{contactId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostContactsContactIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Contact Condition Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCommonConditionModel</returns>
        public ResponseCommonConditionModel V4PutContactsContactIdConditionsId (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null)
        {
             ApiResponse<ResponseCommonConditionModel> localVarResponse = V4PutContactsContactIdConditionsIdWithHttpInfo(contentType, authorization, contactId, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Contact Condition Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCommonConditionModel</returns>
        public ApiResponse< ResponseCommonConditionModel > V4PutContactsContactIdConditionsIdWithHttpInfo (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");

            var localVarPath = "/v4/contacts/{contactId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutContactsContactIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCommonConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCommonConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCommonConditionModel)));
        }

        /// <summary>
        /// Update Contact Condition Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCommonConditionModel</returns>
        public async System.Threading.Tasks.Task<ResponseCommonConditionModel> V4PutContactsContactIdConditionsIdAsync (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null)
        {
             ApiResponse<ResponseCommonConditionModel> localVarResponse = await V4PutContactsContactIdConditionsIdAsyncWithHttpInfo(contentType, authorization, contactId, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Contact Condition Updates the condition information for the specified contact. **API Endpoint**:  PUT /v4/contacts/{contactId}/conditions/{id}  **Scope**:  contacts  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.4 
        /// </summary>
        /// <exception cref="AccelaContactsAndProfessionals.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="contactId">The ID of the contact to fetch.</param>
        /// <param name="id">The ID of the condition to be updated.</param>
        /// <param name="body">Update contact condition request information.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCommonConditionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCommonConditionModel>> V4PutContactsContactIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, string contactId, string id, RequestCommonConditionModel body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ContactsConditionsApi->V4PutContactsContactIdConditionsId");

            var localVarPath = "/v4/contacts/{contactId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutContactsContactIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCommonConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCommonConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCommonConditionModel)));
        }

    }
}
