/* 
 * Assets and Assessments
 *
 * The Assets and Assessments APIs enable apps to manage assets and their related condition assessments.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAssetsAndAssessments.Client.SwaggerDateConverter;

namespace AccelaAssetsAndAssessments.Model
{
    /// <summary>
    /// AssetRelatedModel
    /// </summary>
    [DataContract]
        public partial class AssetRelatedModel :  IEquatable<AssetRelatedModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the parent asset is dependent on this asset.
        /// </summary>
        /// <value>Indicates whether or not the parent asset is dependent on this asset.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum DependentFlagEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 0,
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1        }
        /// <summary>
        /// Indicates whether or not the parent asset is dependent on this asset.
        /// </summary>
        /// <value>Indicates whether or not the parent asset is dependent on this asset.</value>
        [DataMember(Name="dependentFlag", EmitDefaultValue=false)]
        public DependentFlagEnum? DependentFlag { get; set; }
        /// <summary>
        /// Indicates whether or not the asset has child assets.
        /// </summary>
        /// <value>Indicates whether or not the asset has child assets.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum HasChildEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 0,
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1        }
        /// <summary>
        /// Indicates whether or not the asset has child assets.
        /// </summary>
        /// <value>Indicates whether or not the asset has child assets.</value>
        [DataMember(Name="hasChild", EmitDefaultValue=false)]
        public HasChildEnum? HasChild { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetRelatedModel" /> class.
        /// </summary>
        /// <param name="assetId">The unique alpha-numeric asset ID in an asset group.   **Added in Civic Platform version**: 9.2.0  .</param>
        /// <param name="classType">A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together. .</param>
        /// <param name="comments">comments.</param>
        /// <param name="currentValue">The current value of the asset..</param>
        /// <param name="dateOfService">The date the asset was initially placed into service..</param>
        /// <param name="dependentFlag">Indicates whether or not the parent asset is dependent on this asset..</param>
        /// <param name="depreciationAmount">The decline in the asset value by the asset depreciation calculation..</param>
        /// <param name="depreciationEndDate">The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation..</param>
        /// <param name="depreciationStartDate">The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation..</param>
        /// <param name="depreciationValue">The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value..</param>
        /// <param name="description">description.</param>
        /// <param name="endID">The ending point asset ID..</param>
        /// <param name="gisObjects">gisObjects.</param>
        /// <param name="group">group.</param>
        /// <param name="hasChild">Indicates whether or not the asset has child assets..</param>
        /// <param name="id">The asset system id assigned by the Civic Platform server..</param>
        /// <param name="linkedAssetID">The asset ID of the linked asset..</param>
        /// <param name="linkedAssetSeqNbr">The unique sequence id of the linked asset, assigned by the Civic Platform server..</param>
        /// <param name="name">name.</param>
        /// <param name="number">The unique, alpha-numeric asset ID..</param>
        /// <param name="salvageValue">The residual value of the asset at the end of itâ€™s useful life..</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="size">A positive numeric value for the asset size..</param>
        /// <param name="sizeUnit">The unit of measure corresponding to the asset size..</param>
        /// <param name="startID">The starting point asset ID..</param>
        /// <param name="startValue">The beginning value or purchase price of the asset..</param>
        /// <param name="status">status.</param>
        /// <param name="statusDate">The date the asset status changed..</param>
        /// <param name="type">type.</param>
        public AssetRelatedModel(string assetId = default(string), string classType = default(string), AssetMasterModelComments comments = default(AssetMasterModelComments), double? currentValue = default(double?), DateTime? dateOfService = default(DateTime?), DependentFlagEnum? dependentFlag = default(DependentFlagEnum?), double? depreciationAmount = default(double?), DateTime? depreciationEndDate = default(DateTime?), DateTime? depreciationStartDate = default(DateTime?), double? depreciationValue = default(double?), AssetMasterModelDescription description = default(AssetMasterModelDescription), string endID = default(string), List<GISObjectModel> gisObjects = default(List<GISObjectModel>), AssetWithAttributesModelGroup group = default(AssetWithAttributesModelGroup), HasChildEnum? hasChild = default(HasChildEnum?), long? id = default(long?), string linkedAssetID = default(string), long? linkedAssetSeqNbr = default(long?), AssetMasterModelName name = default(AssetMasterModelName), string number = default(string), double? salvageValue = default(double?), string serviceProviderCode = default(string), double? size = default(double?), string sizeUnit = default(string), string startID = default(string), double? startValue = default(double?), AssetMasterModelStatus status = default(AssetMasterModelStatus), DateTime? statusDate = default(DateTime?), AssetMasterModelType type = default(AssetMasterModelType))
        {
            this.AssetId = assetId;
            this.ClassType = classType;
            this.Comments = comments;
            this.CurrentValue = currentValue;
            this.DateOfService = dateOfService;
            this.DependentFlag = dependentFlag;
            this.DepreciationAmount = depreciationAmount;
            this.DepreciationEndDate = depreciationEndDate;
            this.DepreciationStartDate = depreciationStartDate;
            this.DepreciationValue = depreciationValue;
            this.Description = description;
            this.EndID = endID;
            this.GisObjects = gisObjects;
            this.Group = group;
            this.HasChild = hasChild;
            this.Id = id;
            this.LinkedAssetID = linkedAssetID;
            this.LinkedAssetSeqNbr = linkedAssetSeqNbr;
            this.Name = name;
            this.Number = number;
            this.SalvageValue = salvageValue;
            this.ServiceProviderCode = serviceProviderCode;
            this.Size = size;
            this.SizeUnit = sizeUnit;
            this.StartID = startID;
            this.StartValue = startValue;
            this.Status = status;
            this.StatusDate = statusDate;
            this.Type = type;
        }
        
        /// <summary>
        /// The unique alpha-numeric asset ID in an asset group.   **Added in Civic Platform version**: 9.2.0  
        /// </summary>
        /// <value>The unique alpha-numeric asset ID in an asset group.   **Added in Civic Platform version**: 9.2.0  </value>
        [DataMember(Name="assetId", EmitDefaultValue=false)]
        public string AssetId { get; set; }

        /// <summary>
        /// A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together. 
        /// </summary>
        /// <value>A Class Type is how Civic Platform groups objects that an agency owns or maintains. The five class types are component, linear, node-link linear, point, and polygon. Asset class types provide the ability to assign or group multiple asset types together. </value>
        [DataMember(Name="classType", EmitDefaultValue=false)]
        public string ClassType { get; set; }

        /// <summary>
        /// Gets or Sets Comments
        /// </summary>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public AssetMasterModelComments Comments { get; set; }

        /// <summary>
        /// The current value of the asset.
        /// </summary>
        /// <value>The current value of the asset.</value>
        [DataMember(Name="currentValue", EmitDefaultValue=false)]
        public double? CurrentValue { get; set; }

        /// <summary>
        /// The date the asset was initially placed into service.
        /// </summary>
        /// <value>The date the asset was initially placed into service.</value>
        [DataMember(Name="dateOfService", EmitDefaultValue=false)]
        public DateTime? DateOfService { get; set; }


        /// <summary>
        /// The decline in the asset value by the asset depreciation calculation.
        /// </summary>
        /// <value>The decline in the asset value by the asset depreciation calculation.</value>
        [DataMember(Name="depreciationAmount", EmitDefaultValue=false)]
        public double? DepreciationAmount { get; set; }

        /// <summary>
        /// The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.
        /// </summary>
        /// <value>The end date for the asset depreciation calculation. This field is used in the asset depreciation calculation.</value>
        [DataMember(Name="depreciationEndDate", EmitDefaultValue=false)]
        public DateTime? DepreciationEndDate { get; set; }

        /// <summary>
        /// The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.
        /// </summary>
        /// <value>The start date for the asset depreciation calculation. This field is used in the asset depreciation calculation.</value>
        [DataMember(Name="depreciationStartDate", EmitDefaultValue=false)]
        public DateTime? DepreciationStartDate { get; set; }

        /// <summary>
        /// The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.
        /// </summary>
        /// <value>The asset value after the asset depreciation calculation, which is based on the start value, depreciation start and end dates, useful life, and salvage value.</value>
        [DataMember(Name="depreciationValue", EmitDefaultValue=false)]
        public double? DepreciationValue { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public AssetMasterModelDescription Description { get; set; }

        /// <summary>
        /// The ending point asset ID.
        /// </summary>
        /// <value>The ending point asset ID.</value>
        [DataMember(Name="endID", EmitDefaultValue=false)]
        public string EndID { get; set; }

        /// <summary>
        /// Gets or Sets GisObjects
        /// </summary>
        [DataMember(Name="gisObjects", EmitDefaultValue=false)]
        public List<GISObjectModel> GisObjects { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public AssetWithAttributesModelGroup Group { get; set; }


        /// <summary>
        /// The asset system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The asset system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The asset ID of the linked asset.
        /// </summary>
        /// <value>The asset ID of the linked asset.</value>
        [DataMember(Name="linkedAssetID", EmitDefaultValue=false)]
        public string LinkedAssetID { get; set; }

        /// <summary>
        /// The unique sequence id of the linked asset, assigned by the Civic Platform server.
        /// </summary>
        /// <value>The unique sequence id of the linked asset, assigned by the Civic Platform server.</value>
        [DataMember(Name="linkedAssetSeqNbr", EmitDefaultValue=false)]
        public long? LinkedAssetSeqNbr { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public AssetMasterModelName Name { get; set; }

        /// <summary>
        /// The unique, alpha-numeric asset ID.
        /// </summary>
        /// <value>The unique, alpha-numeric asset ID.</value>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// The residual value of the asset at the end of itâ€™s useful life.
        /// </summary>
        /// <value>The residual value of the asset at the end of itâ€™s useful life.</value>
        [DataMember(Name="salvageValue", EmitDefaultValue=false)]
        public double? SalvageValue { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// A positive numeric value for the asset size.
        /// </summary>
        /// <value>A positive numeric value for the asset size.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public double? Size { get; set; }

        /// <summary>
        /// The unit of measure corresponding to the asset size.
        /// </summary>
        /// <value>The unit of measure corresponding to the asset size.</value>
        [DataMember(Name="sizeUnit", EmitDefaultValue=false)]
        public string SizeUnit { get; set; }

        /// <summary>
        /// The starting point asset ID.
        /// </summary>
        /// <value>The starting point asset ID.</value>
        [DataMember(Name="startID", EmitDefaultValue=false)]
        public string StartID { get; set; }

        /// <summary>
        /// The beginning value or purchase price of the asset.
        /// </summary>
        /// <value>The beginning value or purchase price of the asset.</value>
        [DataMember(Name="startValue", EmitDefaultValue=false)]
        public double? StartValue { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public AssetMasterModelStatus Status { get; set; }

        /// <summary>
        /// The date the asset status changed.
        /// </summary>
        /// <value>The date the asset status changed.</value>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public DateTime? StatusDate { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public AssetMasterModelType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetRelatedModel {\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  ClassType: ").Append(ClassType).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CurrentValue: ").Append(CurrentValue).Append("\n");
            sb.Append("  DateOfService: ").Append(DateOfService).Append("\n");
            sb.Append("  DependentFlag: ").Append(DependentFlag).Append("\n");
            sb.Append("  DepreciationAmount: ").Append(DepreciationAmount).Append("\n");
            sb.Append("  DepreciationEndDate: ").Append(DepreciationEndDate).Append("\n");
            sb.Append("  DepreciationStartDate: ").Append(DepreciationStartDate).Append("\n");
            sb.Append("  DepreciationValue: ").Append(DepreciationValue).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EndID: ").Append(EndID).Append("\n");
            sb.Append("  GisObjects: ").Append(GisObjects).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  HasChild: ").Append(HasChild).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LinkedAssetID: ").Append(LinkedAssetID).Append("\n");
            sb.Append("  LinkedAssetSeqNbr: ").Append(LinkedAssetSeqNbr).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  SalvageValue: ").Append(SalvageValue).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SizeUnit: ").Append(SizeUnit).Append("\n");
            sb.Append("  StartID: ").Append(StartID).Append("\n");
            sb.Append("  StartValue: ").Append(StartValue).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetRelatedModel);
        }

        /// <summary>
        /// Returns true if AssetRelatedModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetRelatedModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetRelatedModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.ClassType == input.ClassType ||
                    (this.ClassType != null &&
                    this.ClassType.Equals(input.ClassType))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CurrentValue == input.CurrentValue ||
                    (this.CurrentValue != null &&
                    this.CurrentValue.Equals(input.CurrentValue))
                ) && 
                (
                    this.DateOfService == input.DateOfService ||
                    (this.DateOfService != null &&
                    this.DateOfService.Equals(input.DateOfService))
                ) && 
                (
                    this.DependentFlag == input.DependentFlag ||
                    (this.DependentFlag != null &&
                    this.DependentFlag.Equals(input.DependentFlag))
                ) && 
                (
                    this.DepreciationAmount == input.DepreciationAmount ||
                    (this.DepreciationAmount != null &&
                    this.DepreciationAmount.Equals(input.DepreciationAmount))
                ) && 
                (
                    this.DepreciationEndDate == input.DepreciationEndDate ||
                    (this.DepreciationEndDate != null &&
                    this.DepreciationEndDate.Equals(input.DepreciationEndDate))
                ) && 
                (
                    this.DepreciationStartDate == input.DepreciationStartDate ||
                    (this.DepreciationStartDate != null &&
                    this.DepreciationStartDate.Equals(input.DepreciationStartDate))
                ) && 
                (
                    this.DepreciationValue == input.DepreciationValue ||
                    (this.DepreciationValue != null &&
                    this.DepreciationValue.Equals(input.DepreciationValue))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.EndID == input.EndID ||
                    (this.EndID != null &&
                    this.EndID.Equals(input.EndID))
                ) && 
                (
                    this.GisObjects == input.GisObjects ||
                    this.GisObjects != null &&
                    input.GisObjects != null &&
                    this.GisObjects.SequenceEqual(input.GisObjects)
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.HasChild == input.HasChild ||
                    (this.HasChild != null &&
                    this.HasChild.Equals(input.HasChild))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.LinkedAssetID == input.LinkedAssetID ||
                    (this.LinkedAssetID != null &&
                    this.LinkedAssetID.Equals(input.LinkedAssetID))
                ) && 
                (
                    this.LinkedAssetSeqNbr == input.LinkedAssetSeqNbr ||
                    (this.LinkedAssetSeqNbr != null &&
                    this.LinkedAssetSeqNbr.Equals(input.LinkedAssetSeqNbr))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.SalvageValue == input.SalvageValue ||
                    (this.SalvageValue != null &&
                    this.SalvageValue.Equals(input.SalvageValue))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.SizeUnit == input.SizeUnit ||
                    (this.SizeUnit != null &&
                    this.SizeUnit.Equals(input.SizeUnit))
                ) && 
                (
                    this.StartID == input.StartID ||
                    (this.StartID != null &&
                    this.StartID.Equals(input.StartID))
                ) && 
                (
                    this.StartValue == input.StartValue ||
                    (this.StartValue != null &&
                    this.StartValue.Equals(input.StartValue))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssetId != null)
                    hashCode = hashCode * 59 + this.AssetId.GetHashCode();
                if (this.ClassType != null)
                    hashCode = hashCode * 59 + this.ClassType.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CurrentValue != null)
                    hashCode = hashCode * 59 + this.CurrentValue.GetHashCode();
                if (this.DateOfService != null)
                    hashCode = hashCode * 59 + this.DateOfService.GetHashCode();
                if (this.DependentFlag != null)
                    hashCode = hashCode * 59 + this.DependentFlag.GetHashCode();
                if (this.DepreciationAmount != null)
                    hashCode = hashCode * 59 + this.DepreciationAmount.GetHashCode();
                if (this.DepreciationEndDate != null)
                    hashCode = hashCode * 59 + this.DepreciationEndDate.GetHashCode();
                if (this.DepreciationStartDate != null)
                    hashCode = hashCode * 59 + this.DepreciationStartDate.GetHashCode();
                if (this.DepreciationValue != null)
                    hashCode = hashCode * 59 + this.DepreciationValue.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.EndID != null)
                    hashCode = hashCode * 59 + this.EndID.GetHashCode();
                if (this.GisObjects != null)
                    hashCode = hashCode * 59 + this.GisObjects.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.HasChild != null)
                    hashCode = hashCode * 59 + this.HasChild.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.LinkedAssetID != null)
                    hashCode = hashCode * 59 + this.LinkedAssetID.GetHashCode();
                if (this.LinkedAssetSeqNbr != null)
                    hashCode = hashCode * 59 + this.LinkedAssetSeqNbr.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.SalvageValue != null)
                    hashCode = hashCode * 59 + this.SalvageValue.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.SizeUnit != null)
                    hashCode = hashCode * 59 + this.SizeUnit.GetHashCode();
                if (this.StartID != null)
                    hashCode = hashCode * 59 + this.StartID.GetHashCode();
                if (this.StartValue != null)
                    hashCode = hashCode * 59 + this.StartValue.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
