/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// ShoppingCartModel
    /// </summary>
    [DataContract]
        public partial class ShoppingCartModel :  IEquatable<ShoppingCartModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether the shopping cart item is to be paid now or saved for later.
        /// </summary>
        /// <value>Indicates whether the shopping cart item is to be paid now or saved for later.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PayNowEnum
        {
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 0,
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 1        }
        /// <summary>
        /// Indicates whether the shopping cart item is to be paid now or saved for later.
        /// </summary>
        /// <value>Indicates whether the shopping cart item is to be paid now or saved for later.</value>
        [DataMember(Name="payNow", EmitDefaultValue=false)]
        public PayNowEnum? PayNow { get; set; }
        /// <summary>
        /// The process for which the record is added to the shopping cart.
        /// </summary>
        /// <value>The process for which the record is added to the shopping cart.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ProcessTypeEnum
        {
            /// <summary>
            /// Enum PayFees for value: PayFees
            /// </summary>
            [EnumMember(Value = "PayFees")]
            PayFees = 0,
            /// <summary>
            /// Enum Renewal for value: Renewal
            /// </summary>
            [EnumMember(Value = "Renewal")]
            Renewal = 1,
            /// <summary>
            /// Enum PayFeeDue4Renewal for value: PayFeeDue4Renewal
            /// </summary>
            [EnumMember(Value = "PayFeeDue4Renewal")]
            PayFeeDue4Renewal = 2        }
        /// <summary>
        /// The process for which the record is added to the shopping cart.
        /// </summary>
        /// <value>The process for which the record is added to the shopping cart.</value>
        [DataMember(Name="processType", EmitDefaultValue=false)]
        public ProcessTypeEnum? ProcessType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShoppingCartModel" /> class.
        /// </summary>
        /// <param name="createdDate">The date the shopping cart was created..</param>
        /// <param name="id">The shopping cart system id assigned by the Civic Platform server..</param>
        /// <param name="payNow">Indicates whether the shopping cart item is to be paid now or saved for later..</param>
        /// <param name="processType">The process for which the record is added to the shopping cart..</param>
        public ShoppingCartModel(DateTime? createdDate = default(DateTime?), string id = default(string), PayNowEnum? payNow = default(PayNowEnum?), ProcessTypeEnum? processType = default(ProcessTypeEnum?))
        {
            this.CreatedDate = createdDate;
            this.Id = id;
            this.PayNow = payNow;
            this.ProcessType = processType;
        }
        
        /// <summary>
        /// The date the shopping cart was created.
        /// </summary>
        /// <value>The date the shopping cart was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// The shopping cart system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The shopping cart system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }



        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ShoppingCartModel {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PayNow: ").Append(PayNow).Append("\n");
            sb.Append("  ProcessType: ").Append(ProcessType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShoppingCartModel);
        }

        /// <summary>
        /// Returns true if ShoppingCartModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ShoppingCartModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShoppingCartModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PayNow == input.PayNow ||
                    (this.PayNow != null &&
                    this.PayNow.Equals(input.PayNow))
                ) && 
                (
                    this.ProcessType == input.ProcessType ||
                    (this.ProcessType != null &&
                    this.ProcessType.Equals(input.ProcessType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PayNow != null)
                    hashCode = hashCode * 59 + this.PayNow.GetHashCode();
                if (this.ProcessType != null)
                    hashCode = hashCode * 59 + this.ProcessType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
