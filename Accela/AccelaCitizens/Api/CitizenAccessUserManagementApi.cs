/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaCitizens.Client;
using AccelaCitizens.Model;

namespace AccelaCitizens.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICitizenAccessUserManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        ResponseResultCountModel V4DeleteCitizensIdContactsContactIds (string contentType, string authorization, string id, string contactIds, string lang = null);

        /// <summary>
        /// Delete Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        ApiResponse<ResponseResultCountModel> V4DeleteCitizensIdContactsContactIdsWithHttpInfo (string contentType, string authorization, string id, string contactIds, string lang = null);
        /// <summary>
        /// Get Citizen Users
        /// </summary>
        /// <remarks>
        /// Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserModelArray</returns>
        ResponsePublicUserModelArray V4GetCitizenaccessCitizens (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Citizen Users
        /// </summary>
        /// <remarks>
        /// Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserModelArray</returns>
        ApiResponse<ResponsePublicUserModelArray> V4GetCitizenaccessCitizensWithHttpInfo (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Citizen Accounts
        /// </summary>
        /// <remarks>
        /// Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseUserPINModelArray</returns>
        ResponseUserPINModelArray V4GetCitizenaccessCitizensIdAccounts (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get Citizen Accounts
        /// </summary>
        /// <remarks>
        /// Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseUserPINModelArray</returns>
        ApiResponse<ResponseUserPINModelArray> V4GetCitizenaccessCitizensIdAccountsWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get Citizen Trust Accounts
        /// </summary>
        /// <remarks>
        /// Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTrustAccountModelArray</returns>
        ResponseTrustAccountModelArray V4GetCitizenaccessCitizensIdTrustAccounts (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Citizen Trust Accounts
        /// </summary>
        /// <remarks>
        /// Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTrustAccountModelArray</returns>
        ApiResponse<ResponseTrustAccountModelArray> V4GetCitizenaccessCitizensIdTrustAccountsWithHttpInfo (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Citizen User
        /// </summary>
        /// <remarks>
        /// Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        ResponseResultModel V4PostCitizenaccessCitizens (string contentType, string authorization, PublicUserRegisterModel body, string lang = null);

        /// <summary>
        /// Create Citizen User
        /// </summary>
        /// <remarks>
        /// Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        ApiResponse<ResponseResultModel> V4PostCitizenaccessCitizensWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body, string lang = null);
        /// <summary>
        /// Add Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        ResponseResultCountModel V4PostCitizensIdContacts (string contentType, string authorization, string id, List<string> body, string lang = null);

        /// <summary>
        /// Add Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        ApiResponse<ResponseResultCountModel> V4PostCitizensIdContactsWithHttpInfo (string contentType, string authorization, string id, List<string> body, string lang = null);
        /// <summary>
        /// Update Citizen Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutCitizenaccessCitizensIdAccounts (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null);

        /// <summary>
        /// Update Citizen Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutCitizenaccessCitizensIdAccountsWithHttpInfo (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null);
        /// <summary>
        /// Update Citizen Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCitizenProfileModel</returns>
        ResponseCitizenProfileModel V4PutCitizensId (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null);

        /// <summary>
        /// Update Citizen Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCitizenProfileModel</returns>
        ApiResponse<ResponseCitizenProfileModel> V4PutCitizensIdWithHttpInfo (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null);
        /// <summary>
        /// Update Citizen Password
        /// </summary>
        /// <remarks>
        /// Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 V4PutCitizensIdPassword (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null);

        /// <summary>
        /// Update Citizen Password
        /// </summary>
        /// <remarks>
        /// Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> V4PutCitizensIdPasswordWithHttpInfo (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        System.Threading.Tasks.Task<ResponseResultCountModel> V4DeleteCitizensIdContactsContactIdsAsync (string contentType, string authorization, string id, string contactIds, string lang = null);

        /// <summary>
        /// Delete Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4DeleteCitizensIdContactsContactIdsAsyncWithHttpInfo (string contentType, string authorization, string id, string contactIds, string lang = null);
        /// <summary>
        /// Get Citizen Users
        /// </summary>
        /// <remarks>
        /// Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserModelArray</returns>
        System.Threading.Tasks.Task<ResponsePublicUserModelArray> V4GetCitizenaccessCitizensAsync (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Citizen Users
        /// </summary>
        /// <remarks>
        /// Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserModelArray>> V4GetCitizenaccessCitizensAsyncWithHttpInfo (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Citizen Accounts
        /// </summary>
        /// <remarks>
        /// Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseUserPINModelArray</returns>
        System.Threading.Tasks.Task<ResponseUserPINModelArray> V4GetCitizenaccessCitizensIdAccountsAsync (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get Citizen Accounts
        /// </summary>
        /// <remarks>
        /// Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseUserPINModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseUserPINModelArray>> V4GetCitizenaccessCitizensIdAccountsAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get Citizen Trust Accounts
        /// </summary>
        /// <remarks>
        /// Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTrustAccountModelArray</returns>
        System.Threading.Tasks.Task<ResponseTrustAccountModelArray> V4GetCitizenaccessCitizensIdTrustAccountsAsync (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Citizen Trust Accounts
        /// </summary>
        /// <remarks>
        /// Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTrustAccountModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTrustAccountModelArray>> V4GetCitizenaccessCitizensIdTrustAccountsAsyncWithHttpInfo (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Create Citizen User
        /// </summary>
        /// <remarks>
        /// Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        System.Threading.Tasks.Task<ResponseResultModel> V4PostCitizenaccessCitizensAsync (string contentType, string authorization, PublicUserRegisterModel body, string lang = null);

        /// <summary>
        /// Create Citizen User
        /// </summary>
        /// <remarks>
        /// Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PostCitizenaccessCitizensAsyncWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body, string lang = null);
        /// <summary>
        /// Add Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        System.Threading.Tasks.Task<ResponseResultCountModel> V4PostCitizensIdContactsAsync (string contentType, string authorization, string id, List<string> body, string lang = null);

        /// <summary>
        /// Add Citizen Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4PostCitizensIdContactsAsyncWithHttpInfo (string contentType, string authorization, string id, List<string> body, string lang = null);
        /// <summary>
        /// Update Citizen Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutCitizenaccessCitizensIdAccountsAsync (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null);

        /// <summary>
        /// Update Citizen Account Status
        /// </summary>
        /// <remarks>
        /// Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutCitizenaccessCitizensIdAccountsAsyncWithHttpInfo (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null);
        /// <summary>
        /// Update Citizen Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCitizenProfileModel</returns>
        System.Threading.Tasks.Task<ResponseCitizenProfileModel> V4PutCitizensIdAsync (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null);

        /// <summary>
        /// Update Citizen Profile
        /// </summary>
        /// <remarks>
        /// Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCitizenProfileModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCitizenProfileModel>> V4PutCitizensIdAsyncWithHttpInfo (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null);
        /// <summary>
        /// Update Citizen Password
        /// </summary>
        /// <remarks>
        /// Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> V4PutCitizensIdPasswordAsync (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null);

        /// <summary>
        /// Update Citizen Password
        /// </summary>
        /// <remarks>
        /// Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V4PutCitizensIdPasswordAsyncWithHttpInfo (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CitizenAccessUserManagementApi : ICitizenAccessUserManagementApi
    {
        private AccelaCitizens.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessUserManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CitizenAccessUserManagementApi(String basePath)
        {
            this.Configuration = new AccelaCitizens.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessUserManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CitizenAccessUserManagementApi(AccelaCitizens.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaCitizens.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaCitizens.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaCitizens.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Citizen Contacts Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        public ResponseResultCountModel V4DeleteCitizensIdContactsContactIds (string contentType, string authorization, string id, string contactIds, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = V4DeleteCitizensIdContactsContactIdsWithHttpInfo(contentType, authorization, id, contactIds, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Citizen Contacts Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        public ApiResponse< ResponseResultCountModel > V4DeleteCitizensIdContactsContactIdsWithHttpInfo (string contentType, string authorization, string id, string contactIds, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/contacts/{contactIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactIds != null) localVarPathParams.Add("contactIds", this.Configuration.ApiClient.ParameterToString(contactIds)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteCitizensIdContactsContactIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Delete Citizen Contacts Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultCountModel> V4DeleteCitizensIdContactsContactIdsAsync (string contentType, string authorization, string id, string contactIds, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = await V4DeleteCitizensIdContactsContactIdsAsyncWithHttpInfo(contentType, authorization, id, contactIds, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Citizen Contacts Deletes the specified contacts for the specified citizen user.    **API Endpoint**:  DELETE /v4/citizenaccess/citizens/{id}/contacts/{contactIds}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID.</param>
        /// <param name="contactIds">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4DeleteCitizensIdContactsContactIdsAsyncWithHttpInfo (string contentType, string authorization, string id, string contactIds, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");
            // verify the required parameter 'contactIds' is set
            if (contactIds == null)
                throw new ApiException(400, "Missing required parameter 'contactIds' when calling CitizenAccessUserManagementApi->V4DeleteCitizensIdContactsContactIds");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/contacts/{contactIds}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (contactIds != null) localVarPathParams.Add("contactIds", this.Configuration.ApiClient.ParameterToString(contactIds)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteCitizensIdContactsContactIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Get Citizen Users Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserModelArray</returns>
        public ResponsePublicUserModelArray V4GetCitizenaccessCitizens (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserModelArray> localVarResponse = V4GetCitizenaccessCitizensWithHttpInfo(contentType, authorization, loginName, expand, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Citizen Users Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserModelArray</returns>
        public ApiResponse< ResponsePublicUserModelArray > V4GetCitizenaccessCitizensWithHttpInfo (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizens");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizens");

            var localVarPath = "/v4/citizenaccess/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginName", loginName)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserModelArray)));
        }

        /// <summary>
        /// Get Citizen Users Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserModelArray</returns>
        public async System.Threading.Tasks.Task<ResponsePublicUserModelArray> V4GetCitizenaccessCitizensAsync (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserModelArray> localVarResponse = await V4GetCitizenaccessCitizensAsyncWithHttpInfo(contentType, authorization, loginName, expand, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Citizen Users Returns the users whose profiles can be viewed or edited by the logged-in user. If the logged-in user is an Authorized Agent, the returned users are Authorized Agent Clerks. A Citizen user is not authorized to see other users&#39; profiles, so if the logged-in user is a Citizen user, no users are returned. If the logged-in user is an Automation user, Citizen Access users are returned.    **API Endpoint**:  GET /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="loginName">Filter by the citizen&#39;s login name. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserModelArray>> V4GetCitizenaccessCitizensAsyncWithHttpInfo (string contentType, string authorization, string loginName = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizens");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizens");

            var localVarPath = "/v4/citizenaccess/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (loginName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "loginName", loginName)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserModelArray)));
        }

        /// <summary>
        /// Get Citizen Accounts Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseUserPINModelArray</returns>
        public ResponseUserPINModelArray V4GetCitizenaccessCitizensIdAccounts (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseUserPINModelArray> localVarResponse = V4GetCitizenaccessCitizensIdAccountsWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Citizen Accounts Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseUserPINModelArray</returns>
        public ApiResponse< ResponseUserPINModelArray > V4GetCitizenaccessCitizensIdAccountsWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdAccounts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensIdAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseUserPINModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseUserPINModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseUserPINModelArray)));
        }

        /// <summary>
        /// Get Citizen Accounts Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseUserPINModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseUserPINModelArray> V4GetCitizenaccessCitizensIdAccountsAsync (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseUserPINModelArray> localVarResponse = await V4GetCitizenaccessCitizensIdAccountsAsyncWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Citizen Accounts Gets the status of the citizen accounts associated to the specified user.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseUserPINModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseUserPINModelArray>> V4GetCitizenaccessCitizensIdAccountsAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdAccounts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensIdAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseUserPINModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseUserPINModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseUserPINModelArray)));
        }

        /// <summary>
        /// Get Citizen Trust Accounts Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTrustAccountModelArray</returns>
        public ResponseTrustAccountModelArray V4GetCitizenaccessCitizensIdTrustAccounts (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTrustAccountModelArray> localVarResponse = V4GetCitizenaccessCitizensIdTrustAccountsWithHttpInfo(contentType, authorization, id, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Citizen Trust Accounts Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTrustAccountModelArray</returns>
        public ApiResponse< ResponseTrustAccountModelArray > V4GetCitizenaccessCitizensIdTrustAccountsWithHttpInfo (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdTrustAccounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdTrustAccounts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdTrustAccounts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/trustAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensIdTrustAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTrustAccountModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTrustAccountModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTrustAccountModelArray)));
        }

        /// <summary>
        /// Get Citizen Trust Accounts Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTrustAccountModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTrustAccountModelArray> V4GetCitizenaccessCitizensIdTrustAccountsAsync (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTrustAccountModelArray> localVarResponse = await V4GetCitizenaccessCitizensIdTrustAccountsAsyncWithHttpInfo(contentType, authorization, id, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Citizen Trust Accounts Gets the trust accounts for the specified user. If a clerk needs the associated agent&#39;s trust account, call the Get Citizen Accounts for the logged in clerk, and use its agentId response field as the {id} parameter for Get Citizen Trust Accounts.    **API Endpoint**:  GET /v4/citizenaccess/citizens/{id}/trustAccounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTrustAccountModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTrustAccountModelArray>> V4GetCitizenaccessCitizensIdTrustAccountsAsyncWithHttpInfo (string contentType, string authorization, long? id, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdTrustAccounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdTrustAccounts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4GetCitizenaccessCitizensIdTrustAccounts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/trustAccounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensIdTrustAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTrustAccountModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTrustAccountModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTrustAccountModelArray)));
        }

        /// <summary>
        /// Create Citizen User Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        public ResponseResultModel V4PostCitizenaccessCitizens (string contentType, string authorization, PublicUserRegisterModel body, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = V4PostCitizenaccessCitizensWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Citizen User Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        public ApiResponse< ResponseResultModel > V4PostCitizenaccessCitizensWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PostCitizenaccessCitizens");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PostCitizenaccessCitizens");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PostCitizenaccessCitizens");

            var localVarPath = "/v4/citizenaccess/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizenaccessCitizens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

        /// <summary>
        /// Create Citizen User Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultModel> V4PostCitizenaccessCitizensAsync (string contentType, string authorization, PublicUserRegisterModel body, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = await V4PostCitizenaccessCitizensAsyncWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Citizen User Adds a citizen user to be associated with the currently logged-in user. The userName to be added is required.    **API Endpoint**:  POST /v4/citizenaccess/citizens   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PostCitizenaccessCitizensAsyncWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PostCitizenaccessCitizens");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PostCitizenaccessCitizens");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PostCitizenaccessCitizens");

            var localVarPath = "/v4/citizenaccess/citizens";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizenaccessCitizens", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

        /// <summary>
        /// Add Citizen Contacts Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        public ResponseResultCountModel V4PostCitizensIdContacts (string contentType, string authorization, string id, List<string> body, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = V4PostCitizensIdContactsWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Citizen Contacts Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        public ApiResponse< ResponseResultCountModel > V4PostCitizensIdContactsWithHttpInfo (string contentType, string authorization, string id, List<string> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizensIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Add Citizen Contacts Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultCountModel> V4PostCitizensIdContactsAsync (string contentType, string authorization, string id, List<string> body, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = await V4PostCitizensIdContactsAsyncWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Citizen Contacts Adds contacts to the specified citizen user. Include the contact IDs to be added in the request array.    **API Endpoint**:  POST /v4/citizenaccess/citizens/{id}/contacts    **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk ID</param>
        /// <param name="body">An array of reference contact Ids to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4PostCitizensIdContactsAsyncWithHttpInfo (string contentType, string authorization, string id, List<string> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PostCitizensIdContacts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizensIdContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Update Citizen Account Status Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutCitizenaccessCitizensIdAccounts (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutCitizenaccessCitizensIdAccountsWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Citizen Account Status Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutCitizenaccessCitizensIdAccountsWithHttpInfo (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizenaccessCitizensIdAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Citizen Account Status Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutCitizenaccessCitizensIdAccountsAsync (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutCitizenaccessCitizensIdAccountsAsyncWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Citizen Account Status Updates the status of citizen accounts associated to the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/accounts   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of citizen user to fetch.</param>
        /// <param name="body">The user information to be updated.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutCitizenaccessCitizensIdAccountsAsyncWithHttpInfo (string contentType, string authorization, string id, List<UserPINModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PutCitizenaccessCitizensIdAccounts");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizenaccessCitizensIdAccounts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Citizen Profile Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCitizenProfileModel</returns>
        public ResponseCitizenProfileModel V4PutCitizensId (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null)
        {
             ApiResponse<ResponseCitizenProfileModel> localVarResponse = V4PutCitizensIdWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Citizen Profile Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCitizenProfileModel</returns>
        public ApiResponse< ResponseCitizenProfileModel > V4PutCitizensIdWithHttpInfo (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PutCitizensId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PutCitizensId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PutCitizensId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PutCitizensId");

            var localVarPath = "/v4/citizenaccess/citizens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizensId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCitizenProfileModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCitizenProfileModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCitizenProfileModel)));
        }

        /// <summary>
        /// Update Citizen Profile Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCitizenProfileModel</returns>
        public async System.Threading.Tasks.Task<ResponseCitizenProfileModel> V4PutCitizensIdAsync (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null)
        {
             ApiResponse<ResponseCitizenProfileModel> localVarResponse = await V4PutCitizensIdAsyncWithHttpInfo(contentType, authorization, body, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Citizen Profile Updates the profile of the specified citizen user.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">User profile information to be updated</param>
        /// <param name="id">The clerk citizen ID to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCitizenProfileModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCitizenProfileModel>> V4PutCitizensIdAsyncWithHttpInfo (string contentType, string authorization, RequestCitizenProfileModel body, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PutCitizensId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PutCitizensId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessUserManagementApi->V4PutCitizensId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PutCitizensId");

            var localVarPath = "/v4/citizenaccess/citizens/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizensId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCitizenProfileModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCitizenProfileModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCitizenProfileModel)));
        }

        /// <summary>
        /// Update Citizen Password Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 V4PutCitizensIdPassword (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = V4PutCitizensIdPasswordWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Citizen Password Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > V4PutCitizensIdPasswordWithHttpInfo (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PutCitizensIdPassword");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PutCitizensIdPassword");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PutCitizensIdPassword");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizensIdPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Update Citizen Password Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> V4PutCitizensIdPasswordAsync (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await V4PutCitizensIdPasswordAsyncWithHttpInfo(contentType, authorization, id, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Citizen Password Updates the password of the specified citizen user {id}.    **API Endpoint**:  PUT /v4/citizenaccess/citizens/{id}/password   **Scope**:  users   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The clerk citizen ID.</param>
        /// <param name="body">The password to update. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V4PutCitizensIdPasswordAsyncWithHttpInfo (string contentType, string authorization, string id, PublicUserPasswordModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessUserManagementApi->V4PutCitizensIdPassword");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessUserManagementApi->V4PutCitizensIdPassword");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CitizenAccessUserManagementApi->V4PutCitizensIdPassword");

            var localVarPath = "/v4/citizenaccess/citizens/{id}/password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutCitizensIdPassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

    }
}
