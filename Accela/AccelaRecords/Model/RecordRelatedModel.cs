/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// RecordRelatedModel
    /// </summary>
    [DataContract]
    public partial class RecordRelatedModel :  IEquatable<RecordRelatedModel>, IValidatableObject
    {
        /// <summary>
        /// The type of relationship of a related record.
        /// </summary>
        /// <value>The type of relationship of a related record.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationshipEnum
        {
            
            /// <summary>
            /// Enum Parent for value: parent
            /// </summary>
            [EnumMember(Value = "parent")]
            Parent = 1,
            
            /// <summary>
            /// Enum Child for value: child
            /// </summary>
            [EnumMember(Value = "child")]
            Child = 2,
            
            /// <summary>
            /// Enum Renewal for value: renewal
            /// </summary>
            [EnumMember(Value = "renewal")]
            Renewal = 3
        }

        /// <summary>
        /// The type of relationship of a related record.
        /// </summary>
        /// <value>The type of relationship of a related record.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public RelationshipEnum? Relationship { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordRelatedModel" /> class.
        /// </summary>
        /// <param name="customId">An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application..</param>
        /// <param name="id">The record system id assigned by the Civic Platform server..</param>
        /// <param name="relationship">The type of relationship of a related record..</param>
        /// <param name="serviceProveCode">The unique agency id..</param>
        /// <param name="trackingId">The application tracking number (IVR tracking number)..</param>
        /// <param name="type">type.</param>
        public RecordRelatedModel(string customId = default(string), string id = default(string), RelationshipEnum? relationship = default(RelationshipEnum?), string serviceProveCode = default(string), long? trackingId = default(long?), RecordTypeNoAliasModel type = default(RecordTypeNoAliasModel))
        {
            this.CustomId = customId;
            this.Id = id;
            this.Relationship = relationship;
            this.ServiceProveCode = serviceProveCode;
            this.TrackingId = trackingId;
            this.Type = type;
        }
        
        /// <summary>
        /// An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.
        /// </summary>
        /// <value>An ID based on a different numbering convention from the numbering convention used by the record ID (xxxxx-xx-xxxxx). Accela Automation auto-generates and applies an alternate ID value when you submit a new application.</value>
        [DataMember(Name="customId", EmitDefaultValue=false)]
        public string CustomId { get; set; }

        /// <summary>
        /// The record system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The record system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// The unique agency id.
        /// </summary>
        /// <value>The unique agency id.</value>
        [DataMember(Name="serviceProveCode", EmitDefaultValue=false)]
        public string ServiceProveCode { get; set; }

        /// <summary>
        /// The application tracking number (IVR tracking number).
        /// </summary>
        /// <value>The application tracking number (IVR tracking number).</value>
        [DataMember(Name="trackingId", EmitDefaultValue=false)]
        public long? TrackingId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public RecordTypeNoAliasModel Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordRelatedModel {\n");
            sb.Append("  CustomId: ").Append(CustomId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  ServiceProveCode: ").Append(ServiceProveCode).Append("\n");
            sb.Append("  TrackingId: ").Append(TrackingId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordRelatedModel);
        }

        /// <summary>
        /// Returns true if RecordRelatedModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordRelatedModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordRelatedModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomId == input.CustomId ||
                    (this.CustomId != null &&
                    this.CustomId.Equals(input.CustomId))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.ServiceProveCode == input.ServiceProveCode ||
                    (this.ServiceProveCode != null &&
                    this.ServiceProveCode.Equals(input.ServiceProveCode))
                ) && 
                (
                    this.TrackingId == input.TrackingId ||
                    (this.TrackingId != null &&
                    this.TrackingId.Equals(input.TrackingId))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomId != null)
                    hashCode = hashCode * 59 + this.CustomId.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.ServiceProveCode != null)
                    hashCode = hashCode * 59 + this.ServiceProveCode.GetHashCode();
                if (this.TrackingId != null)
                    hashCode = hashCode * 59 + this.TrackingId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
