/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// CustomFormField
    /// </summary>
    [DataContract]
    public partial class CustomFormField :  IEquatable<CustomFormField>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the custom field is read-only.
        /// </summary>
        /// <value>Indicates whether or not the custom field is read-only.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsReadonlyEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the custom field is read-only.
        /// </summary>
        /// <value>Indicates whether or not the custom field is read-only.</value>
        [DataMember(Name="isReadonly", EmitDefaultValue=false)]
        public IsReadonlyEnum? IsReadonly { get; set; }
        /// <summary>
        /// Indicates whether or not the custom field is required.
        /// </summary>
        /// <value>Indicates whether or not the custom field is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the custom field is required.
        /// </summary>
        /// <value>Indicates whether or not the custom field is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFormField" /> class.
        /// </summary>
        /// <param name="displayOrder">displayOrder.</param>
        /// <param name="drillDown">drillDown.</param>
        /// <param name="fieldType">The custom field data type..</param>
        /// <param name="id">The custom field system id assigned by the Civic Platform server..</param>
        /// <param name="isReadonly">Indicates whether or not the custom field is read-only..</param>
        /// <param name="isRequired">Indicates whether or not the custom field is required..</param>
        /// <param name="maxLength">The custom field length.</param>
        /// <param name="options">options.</param>
        /// <param name="text">The custom field localized text..</param>
        /// <param name="value">The custom field stored value..</param>
        public CustomFormField(long? displayOrder = default(long?), ASITableDrill drillDown = default(ASITableDrill), string fieldType = default(string), string id = default(string), IsReadonlyEnum? isReadonly = default(IsReadonlyEnum?), IsRequiredEnum? isRequired = default(IsRequiredEnum?), long? maxLength = default(long?), List<CustomFormFieldOptions> options = default(List<CustomFormFieldOptions>), string text = default(string), string value = default(string))
        {
            this.DisplayOrder = displayOrder;
            this.DrillDown = drillDown;
            this.FieldType = fieldType;
            this.Id = id;
            this.IsReadonly = isReadonly;
            this.IsRequired = isRequired;
            this.MaxLength = maxLength;
            this.Options = options;
            this.Text = text;
            this.Value = value;
        }
        
        /// <summary>
        /// Gets or Sets DisplayOrder
        /// </summary>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        /// Gets or Sets DrillDown
        /// </summary>
        [DataMember(Name="drillDown", EmitDefaultValue=false)]
        public ASITableDrill DrillDown { get; set; }

        /// <summary>
        /// The custom field data type.
        /// </summary>
        /// <value>The custom field data type.</value>
        [DataMember(Name="fieldType", EmitDefaultValue=false)]
        public string FieldType { get; set; }

        /// <summary>
        /// The custom field system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The custom field system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }



        /// <summary>
        /// The custom field length
        /// </summary>
        /// <value>The custom field length</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public long? MaxLength { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<CustomFormFieldOptions> Options { get; set; }

        /// <summary>
        /// The custom field localized text.
        /// </summary>
        /// <value>The custom field localized text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The custom field stored value.
        /// </summary>
        /// <value>The custom field stored value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFormField {\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  DrillDown: ").Append(DrillDown).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsReadonly: ").Append(IsReadonly).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomFormField);
        }

        /// <summary>
        /// Returns true if CustomFormField instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomFormField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFormField input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.DrillDown == input.DrillDown ||
                    (this.DrillDown != null &&
                    this.DrillDown.Equals(input.DrillDown))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsReadonly == input.IsReadonly ||
                    (this.IsReadonly != null &&
                    this.IsReadonly.Equals(input.IsReadonly))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                ) && 
                (
                    this.Options == input.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(input.Options)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.DrillDown != null)
                    hashCode = hashCode * 59 + this.DrillDown.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsReadonly != null)
                    hashCode = hashCode * 59 + this.IsReadonly.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                if (this.Options != null)
                    hashCode = hashCode * 59 + this.Options.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
