/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaSettings.Client;
using AccelaSettings.Model;

namespace AccelaSettings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsCommentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Standard Comments
        /// </summary>
        /// <remarks>
        /// Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentModelArray</returns>
        ResponseStandardCommentModelArray V4GetSettingsComments (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comments
        /// </summary>
        /// <remarks>
        /// Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentModelArray</returns>
        ApiResponse<ResponseStandardCommentModelArray> V4GetSettingsCommentsWithHttpInfo (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Get All Standard Comment Groups
        /// </summary>
        /// <remarks>
        /// Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentGroupModelArray</returns>
        ResponseStandardCommentGroupModelArray V4GetSettingsCommentsGroups (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comment Groups
        /// </summary>
        /// <remarks>
        /// Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentGroupModelArray</returns>
        ApiResponse<ResponseStandardCommentGroupModelArray> V4GetSettingsCommentsGroupsWithHttpInfo (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Standard Comments
        /// </summary>
        /// <remarks>
        /// Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentModelArray</returns>
        System.Threading.Tasks.Task<ResponseStandardCommentModelArray> V4GetSettingsCommentsAsync (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comments
        /// </summary>
        /// <remarks>
        /// Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentModelArray>> V4GetSettingsCommentsAsyncWithHttpInfo (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null);
        /// <summary>
        /// Get All Standard Comment Groups
        /// </summary>
        /// <remarks>
        /// Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentGroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseStandardCommentGroupModelArray> V4GetSettingsCommentsGroupsAsync (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null);

        /// <summary>
        /// Get All Standard Comment Groups
        /// </summary>
        /// <remarks>
        /// Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentGroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentGroupModelArray>> V4GetSettingsCommentsGroupsAsyncWithHttpInfo (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsCommentsApi : ISettingsCommentsApi
    {
        private AccelaSettings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsCommentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsCommentsApi(String basePath)
        {
            this.Configuration = new AccelaSettings.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsCommentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsCommentsApi(AccelaSettings.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaSettings.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaSettings.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaSettings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Standard Comments Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentModelArray</returns>
        public ResponseStandardCommentModelArray V4GetSettingsComments (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentModelArray> localVarResponse = V4GetSettingsCommentsWithHttpInfo(contentType, authorization, groups, types, lang, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Standard Comments Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentModelArray</returns>
        public ApiResponse< ResponseStandardCommentModelArray > V4GetSettingsCommentsWithHttpInfo (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsCommentsApi->V4GetSettingsComments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsCommentsApi->V4GetSettingsComments");

            var localVarPath = "/v4/settings/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentModelArray)));
        }

        /// <summary>
        /// Get All Standard Comments Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseStandardCommentModelArray> V4GetSettingsCommentsAsync (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentModelArray> localVarResponse = await V4GetSettingsCommentsAsyncWithHttpInfo(contentType, authorization, groups, types, lang, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Standard Comments Gets the standard comments available in the system. **API Endpoint**:  GET v4/settings/comments  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="groups">Filter by group. (optional)</param>
        /// <param name="types">Filter by one or more (comma-delimited) standard comment types. For valid values, use types[] in [Get All Standard Comment Groups](./api-settings.html#operation/v4.get.settings.comments.groups). **Civic Platform version**: 9.3.0  (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentModelArray>> V4GetSettingsCommentsAsyncWithHttpInfo (string contentType, string authorization, string groups = null, string types = null, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsCommentsApi->V4GetSettingsComments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsCommentsApi->V4GetSettingsComments");

            var localVarPath = "/v4/settings/comments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (groups != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groups", groups)); // query parameter
            if (types != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "types", types)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsComments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentModelArray)));
        }

        /// <summary>
        /// Get All Standard Comment Groups Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ResponseStandardCommentGroupModelArray</returns>
        public ResponseStandardCommentGroupModelArray V4GetSettingsCommentsGroups (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentGroupModelArray> localVarResponse = V4GetSettingsCommentsGroupsWithHttpInfo(contentType, authorization, lang, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Standard Comment Groups Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>ApiResponse of ResponseStandardCommentGroupModelArray</returns>
        public ApiResponse< ResponseStandardCommentGroupModelArray > V4GetSettingsCommentsGroupsWithHttpInfo (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsCommentsApi->V4GetSettingsCommentsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsCommentsApi->V4GetSettingsCommentsGroups");

            var localVarPath = "/v4/settings/comments/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsCommentsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentGroupModelArray)));
        }

        /// <summary>
        /// Get All Standard Comment Groups Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ResponseStandardCommentGroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseStandardCommentGroupModelArray> V4GetSettingsCommentsGroupsAsync (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null)
        {
             ApiResponse<ResponseStandardCommentGroupModelArray> localVarResponse = await V4GetSettingsCommentsGroupsAsyncWithHttpInfo(contentType, authorization, lang, offset, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Standard Comment Groups Gets available standard comment groups. **API Endpoint**:  GET /v4/settings/comments/groups  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseStandardCommentGroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseStandardCommentGroupModelArray>> V4GetSettingsCommentsGroupsAsyncWithHttpInfo (string contentType, string authorization, string lang = null, long? offset = null, long? limit = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsCommentsApi->V4GetSettingsCommentsGroups");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsCommentsApi->V4GetSettingsCommentsGroups");

            var localVarPath = "/v4/settings/comments/groups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsCommentsGroups", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseStandardCommentGroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseStandardCommentGroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseStandardCommentGroupModelArray)));
        }

    }
}
