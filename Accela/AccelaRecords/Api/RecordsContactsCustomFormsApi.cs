/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsContactsCustomFormsApi : IApiAccessor
    {
        #region Synchronous Operations
        
        /* ------------------------- MECK Specific Methods -------------------------- */ 
        /// <summary>
        /// Get Record Contacts Custom Forms - Meck Version
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseContactCustomFormAttributeModel</returns>
        ResponseContactCustomFormAttributeModel V4GetRecordsRecordIdContactsContactIdCustomFormsMeck(string contentType, string authorization, string recordId, long? contactId, string lang = null);

        /// <summary>
        /// Get Record Contacts Custom Forms - MECK version
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseContactCustomFormAttributeModel</returns>
        ApiResponse<ResponseContactCustomFormAttributeModel> V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfoMeck(string contentType, string authorization, string recordId, long? contactId, string lang = null);

         /* --------------------------------------  End Meck specific changes ---------------------------------------------------------*/ 




        /// <summary>
        /// Get Record Contacts Custom Forms
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        ResponseCustomAttributeModelArray V4GetRecordsRecordIdContactsContactIdCustomForms (string contentType, string authorization, string recordId, long? contactId, string lang = null);
       
        string V4GetRecordsRecordIdContactsContactIdCustomFormsString(string contentType, string authorization, string recordId, long? contactId, string lang = null);

        /// <summary>
        /// Get Record Contacts Custom Forms
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        ApiResponse<ResponseCustomAttributeModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null);

        string V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfoString(string contentType, string authorization, string recordId, long? contactId, string lang = null);



        /// <summary>
        /// Get Record Contact Custom Form Metadata
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        ResponseCustomFormMetadataModelArray V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Contact Custom Form Metadata
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        ApiResponse<ResponseCustomFormMetadataModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null);
        /// <summary>
        /// Get Record Contacts Custom Forms Meta
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdContactsContactIdCustomFormsMeta (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Contacts Custom Forms Meta
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        ApiResponse<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutRecordsRecordIdContactsContactIdCustomForms (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null);

        /// <summary>
        /// Update Record Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutRecordsRecordIdContactsContactIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Record Contacts Custom Forms
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsAsync (string contentType, string authorization, string recordId, long? contactId, string lang = null);

        /// <summary>
        /// Get Record Contacts Custom Forms
        /// </summary>
        /// <remarks>
        /// Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetRecordsRecordIdContactsContactIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null);
        /// <summary>
        /// Get Record Contact Custom Form Metadata
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaAsync (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Contact Custom Form Metadata
        /// </summary>
        /// <remarks>
        /// Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null);
        /// <summary>
        /// Get Record Contacts Custom Forms Meta
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsMetaAsync (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Contacts Custom Forms Meta
        /// </summary>
        /// <remarks>
        /// Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdContactsContactIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdContactsContactIdCustomFormsAsync (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null);

        /// <summary>
        /// Update Record Contact Custom Forms
        /// </summary>
        /// <remarks>
        /// Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdContactsContactIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsContactsCustomFormsApi : IRecordsContactsCustomFormsApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContactsCustomFormsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsContactsCustomFormsApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsContactsCustomFormsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsContactsCustomFormsApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }
        /* -------------------------   MECK SPECIFIC VERSIONS --------------------------------------------------------*/
        /// <summary>
        /// Get Record Contacts Custom Forms Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseContactCustomFormAttributeModel</returns>
        public ResponseContactCustomFormAttributeModel V4GetRecordsRecordIdContactsContactIdCustomFormsMeck(string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            ApiResponse<ResponseContactCustomFormAttributeModel> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfoMeck(contentType, authorization, recordId, contactId, lang);
            return localVarResponse.Data;
        }
        /// <summary>
        /// Get Record Contacts Custom Forms Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseContactCustomFormAttributeModel</returns>
        public ApiResponse<ResponseContactCustomFormAttributeModel> V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfoMeck(string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeck");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeck");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeck");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeck");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                if (localVarStatusCode == 400 && localVarResponse.Content.Contains("The contact has no custom forms"))
                {
                    // do nothing - allowable Accela exception to process in AION
                }
                else
                {
                    Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomFormsMeck", localVarResponse);
                    if (exception != null) throw exception;
                }
            }

            // Special renaming code  for Meck  Accela is sending the Label value instead of the field name  

            localVarResponse.Content = localVarResponse.Content.Replace("If other please specify", "RequestorAssociationOther");
            localVarResponse.Content = localVarResponse.Content.Replace("Receive automatic email updates?", "Notify");
            localVarResponse.Content = localVarResponse.Content.Replace("Requestor Association", "RequestorAssociation");
            localVarResponse.Content = localVarResponse.Content.Replace("Grade", "Grade");
          //  localVarResponse.Content = localVarResponse.Content.Replace("null", "\"TEST VALUE\"");


            return new ApiResponse<ResponseContactCustomFormAttributeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseContactCustomFormAttributeModel)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseContactCustomFormAttributeModel)));
        }
        /*---------------------------------- End Meck Specificversions ----------------------------------------------*/
        /// <summary>
        /// Get Record Contacts Custom Forms Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        public ResponseCustomAttributeModelArray V4GetRecordsRecordIdContactsContactIdCustomForms (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfo(contentType, authorization, recordId, contactId, lang);
             return localVarResponse.Data;
        }

        public string V4GetRecordsRecordIdContactsContactIdCustomFormsString(string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            return  V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfoString(contentType, authorization, recordId, contactId, lang);
            
        }

        /// <summary>
        /// Get Record Contacts Custom Forms Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        public ApiResponse< ResponseCustomAttributeModelArray > V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        // MY String return version 
        public string V4GetRecordsRecordIdContactsContactIdCustomFormsWithHttpInfoString(string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return localVarResponse.Content; 
        }

        //------------------------------------------------------------------------------


        /// <summary>
        /// Get Record Contacts Custom Forms Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsAsync (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdCustomFormsAsyncWithHttpInfo(contentType, authorization, recordId, contactId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Record Contacts Custom Forms Returns an array of custom forms associated with the specified record contact. Each custom form consists of the custom form id and custom field name-and-value pairs. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetRecordsRecordIdContactsContactIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get Record Contact Custom Form Metadata Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormMetadataModelArray</returns>
        public ResponseCustomFormMetadataModelArray V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaWithHttpInfo(contentType, authorization, recordId, contactId, formId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Record Contact Custom Form Metadata Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormMetadataModelArray</returns>
        public ApiResponse< ResponseCustomFormMetadataModelArray > V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.Configuration.ApiClient.ParameterToString(formId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get Record Contact Custom Form Metadata Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormMetadataModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaAsync (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormMetadataModelArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaAsyncWithHttpInfo(contentType, authorization, recordId, contactId, formId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Record Contact Custom Form Metadata Gets the metadata associated with the requested custom form for the record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 9.2.0 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="formId">The ID of the custom form to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormMetadataModelArray>> V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string formId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");
            // verify the required parameter 'formId' is set
            if (formId == null)
                throw new ApiException(400, "Missing required parameter 'formId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms/{formId}/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (formId != null) localVarPathParams.Add("formId", this.Configuration.ApiClient.ParameterToString(formId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomFormsFormIdMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormMetadataModelArray)));
        }

        /// <summary>
        /// Get Record Contacts Custom Forms Meta Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        public ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdContactsContactIdCustomFormsMeta (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = V4GetRecordsRecordIdContactsContactIdCustomFormsMetaWithHttpInfo(contentType, authorization, recordId, contactId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Record Contacts Custom Forms Meta Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        public ApiResponse< ResponseCustomFormSubgroupModelArray > V4GetRecordsRecordIdContactsContactIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get Record Contacts Custom Forms Meta Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdContactsContactIdCustomFormsMetaAsync (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = await V4GetRecordsRecordIdContactsContactIdCustomFormsMetaAsyncWithHttpInfo(contentType, authorization, recordId, contactId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Record Contacts Custom Forms Meta Gets the custom forms metadata associated with the specified record contact. **API Endpoint**:  GET /v4/records/{recordId}/contacts/{contactId}/customForms/meta  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdContactsContactIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4GetRecordsRecordIdContactsContactIdCustomFormsMeta");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdContactsContactIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Update Record Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutRecordsRecordIdContactsContactIdCustomForms (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutRecordsRecordIdContactsContactIdCustomFormsWithHttpInfo(contentType, authorization, recordId, contactId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutRecordsRecordIdContactsContactIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsContactIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Record Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdContactsContactIdCustomFormsAsync (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutRecordsRecordIdContactsContactIdCustomFormsAsyncWithHttpInfo(contentType, authorization, recordId, contactId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Record Contact Custom Forms Updates the custom forms for the specified record contact. The request body is an array of custom forms, with each item containing the custom form&#39;s id and custom field name/value pairs.  **API Endpoint**:  PUT /v4/records/{recordId}/contacts/{contactId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="contactId">The ID of the contact to fetch. See [Get All Contacts](./api-contacts-professionals.html#operation/v4.get.contacts).</param>
        /// <param name="body">The custom form information to be updated. Exeample: [{ \&quot;field1\&quot;: \&quot;field1Val\&quot;, \&quot;field2\&quot;: \&quot;field2Val\&quot;, \&quot;id\&quot;: \&quot;Group&amp;SubGroup\&quot; }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdContactsContactIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, long? contactId, List<CustomAttributeModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'contactId' is set
            if (contactId == null)
                throw new ApiException(400, "Missing required parameter 'contactId' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsContactsCustomFormsApi->V4PutRecordsRecordIdContactsContactIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/contacts/{contactId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (contactId != null) localVarPathParams.Add("contactId", this.Configuration.ApiClient.ParameterToString(contactId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdContactsContactIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
