/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations
    /// </summary>
    [DataContract]
    public partial class PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations :  IEquatable<PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations" /> class.
        /// </summary>
        /// <param name="amendAllowed">amendAllowed.</param>
        /// <param name="createRecordAllowed">createRecordAllowed.</param>
        /// <param name="documentAllowed">documentAllowed.</param>
        /// <param name="inspectionAllowed">inspectionAllowed.</param>
        /// <param name="level">level.</param>
        /// <param name="levelValue">levelValue.</param>
        /// <param name="paymentAllowed">paymentAllowed.</param>
        /// <param name="renewalAllowed">renewalAllowed.</param>
        /// <param name="viewRecordAllowed">viewRecordAllowed.</param>
        public PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations(bool? amendAllowed = default(bool?), bool? createRecordAllowed = default(bool?), bool? documentAllowed = default(bool?), bool? inspectionAllowed = default(bool?), string level = default(string), string levelValue = default(string), bool? paymentAllowed = default(bool?), bool? renewalAllowed = default(bool?), bool? viewRecordAllowed = default(bool?))
        {
            this.AmendAllowed = amendAllowed;
            this.CreateRecordAllowed = createRecordAllowed;
            this.DocumentAllowed = documentAllowed;
            this.InspectionAllowed = inspectionAllowed;
            this.Level = level;
            this.LevelValue = levelValue;
            this.PaymentAllowed = paymentAllowed;
            this.RenewalAllowed = renewalAllowed;
            this.ViewRecordAllowed = viewRecordAllowed;
        }
        
        /// <summary>
        /// Gets or Sets AmendAllowed
        /// </summary>
        [DataMember(Name="amendAllowed", EmitDefaultValue=false)]
        public bool? AmendAllowed { get; set; }

        /// <summary>
        /// Gets or Sets CreateRecordAllowed
        /// </summary>
        [DataMember(Name="createRecordAllowed", EmitDefaultValue=false)]
        public bool? CreateRecordAllowed { get; set; }

        /// <summary>
        /// Gets or Sets DocumentAllowed
        /// </summary>
        [DataMember(Name="documentAllowed", EmitDefaultValue=false)]
        public bool? DocumentAllowed { get; set; }

        /// <summary>
        /// Gets or Sets InspectionAllowed
        /// </summary>
        [DataMember(Name="inspectionAllowed", EmitDefaultValue=false)]
        public bool? InspectionAllowed { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public string Level { get; set; }

        /// <summary>
        /// Gets or Sets LevelValue
        /// </summary>
        [DataMember(Name="levelValue", EmitDefaultValue=false)]
        public string LevelValue { get; set; }

        /// <summary>
        /// Gets or Sets PaymentAllowed
        /// </summary>
        [DataMember(Name="paymentAllowed", EmitDefaultValue=false)]
        public bool? PaymentAllowed { get; set; }

        /// <summary>
        /// Gets or Sets RenewalAllowed
        /// </summary>
        [DataMember(Name="renewalAllowed", EmitDefaultValue=false)]
        public bool? RenewalAllowed { get; set; }

        /// <summary>
        /// Gets or Sets ViewRecordAllowed
        /// </summary>
        [DataMember(Name="viewRecordAllowed", EmitDefaultValue=false)]
        public bool? ViewRecordAllowed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations {\n");
            sb.Append("  AmendAllowed: ").Append(AmendAllowed).Append("\n");
            sb.Append("  CreateRecordAllowed: ").Append(CreateRecordAllowed).Append("\n");
            sb.Append("  DocumentAllowed: ").Append(DocumentAllowed).Append("\n");
            sb.Append("  InspectionAllowed: ").Append(InspectionAllowed).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  LevelValue: ").Append(LevelValue).Append("\n");
            sb.Append("  PaymentAllowed: ").Append(PaymentAllowed).Append("\n");
            sb.Append("  RenewalAllowed: ").Append(RenewalAllowed).Append("\n");
            sb.Append("  ViewRecordAllowed: ").Append(ViewRecordAllowed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations);
        }

        /// <summary>
        /// Returns true if PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicUserDelegatePermissionModelV4GetCitizenaccessCitizensInvitations input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AmendAllowed == input.AmendAllowed ||
                    (this.AmendAllowed != null &&
                    this.AmendAllowed.Equals(input.AmendAllowed))
                ) && 
                (
                    this.CreateRecordAllowed == input.CreateRecordAllowed ||
                    (this.CreateRecordAllowed != null &&
                    this.CreateRecordAllowed.Equals(input.CreateRecordAllowed))
                ) && 
                (
                    this.DocumentAllowed == input.DocumentAllowed ||
                    (this.DocumentAllowed != null &&
                    this.DocumentAllowed.Equals(input.DocumentAllowed))
                ) && 
                (
                    this.InspectionAllowed == input.InspectionAllowed ||
                    (this.InspectionAllowed != null &&
                    this.InspectionAllowed.Equals(input.InspectionAllowed))
                ) && 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.LevelValue == input.LevelValue ||
                    (this.LevelValue != null &&
                    this.LevelValue.Equals(input.LevelValue))
                ) && 
                (
                    this.PaymentAllowed == input.PaymentAllowed ||
                    (this.PaymentAllowed != null &&
                    this.PaymentAllowed.Equals(input.PaymentAllowed))
                ) && 
                (
                    this.RenewalAllowed == input.RenewalAllowed ||
                    (this.RenewalAllowed != null &&
                    this.RenewalAllowed.Equals(input.RenewalAllowed))
                ) && 
                (
                    this.ViewRecordAllowed == input.ViewRecordAllowed ||
                    (this.ViewRecordAllowed != null &&
                    this.ViewRecordAllowed.Equals(input.ViewRecordAllowed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AmendAllowed != null)
                    hashCode = hashCode * 59 + this.AmendAllowed.GetHashCode();
                if (this.CreateRecordAllowed != null)
                    hashCode = hashCode * 59 + this.CreateRecordAllowed.GetHashCode();
                if (this.DocumentAllowed != null)
                    hashCode = hashCode * 59 + this.DocumentAllowed.GetHashCode();
                if (this.InspectionAllowed != null)
                    hashCode = hashCode * 59 + this.InspectionAllowed.GetHashCode();
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.LevelValue != null)
                    hashCode = hashCode * 59 + this.LevelValue.GetHashCode();
                if (this.PaymentAllowed != null)
                    hashCode = hashCode * 59 + this.PaymentAllowed.GetHashCode();
                if (this.RenewalAllowed != null)
                    hashCode = hashCode * 59 + this.RenewalAllowed.GetHashCode();
                if (this.ViewRecordAllowed != null)
                    hashCode = hashCode * 59 + this.ViewRecordAllowed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
