/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// InspectionTypeModel
    /// </summary>
    [DataContract]
    public partial class InspectionTypeModel :  IEquatable<InspectionTypeModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections.
        /// </summary>
        /// <value>Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowFailChecklistItemsEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections.
        /// </summary>
        /// <value>Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections.</value>
        [DataMember(Name="allowFailChecklistItems", EmitDefaultValue=false)]
        public AllowFailChecklistItemsEnum? AllowFailChecklistItems { get; set; }
        /// <summary>
        /// Indicates whether or not to allow the scheduling of multiple inspections for this inspection type.
        /// </summary>
        /// <value>Indicates whether or not to allow the scheduling of multiple inspections for this inspection type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum AllowMultiInspectionsEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not to allow the scheduling of multiple inspections for this inspection type.
        /// </summary>
        /// <value>Indicates whether or not to allow the scheduling of multiple inspections for this inspection type.</value>
        [DataMember(Name="allowMultiInspections", EmitDefaultValue=false)]
        public AllowMultiInspectionsEnum? AllowMultiInspections { get; set; }
        /// <summary>
        /// Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet.  NULL or empty string : Guidesheet items are not carried over.  \&quot;A\&quot; : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item.
        /// </summary>
        /// <value>Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet.  NULL or empty string : Guidesheet items are not carried over.  \&quot;A\&quot; : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CarryoverFlagEnum
        {
            
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            [EnumMember(Value = "A")]
            A = 1
        }

        /// <summary>
        /// Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet.  NULL or empty string : Guidesheet items are not carried over.  \&quot;A\&quot; : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item.
        /// </summary>
        /// <value>Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet.  NULL or empty string : Guidesheet items are not carried over.  \&quot;A\&quot; : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item.</value>
        [DataMember(Name="carryoverFlag", EmitDefaultValue=false)]
        public CarryoverFlagEnum? CarryoverFlag { get; set; }
        /// <summary>
        /// Indicates whether or not to include the inspection in the inspection flow process.
        /// </summary>
        /// <value>Indicates whether or not to include the inspection in the inspection flow process.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum FlowEnabledFlagEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not to include the inspection in the inspection flow process.
        /// </summary>
        /// <value>Indicates whether or not to include the inspection in the inspection flow process.</value>
        [DataMember(Name="flowEnabledFlag", EmitDefaultValue=false)]
        public FlowEnabledFlagEnum? FlowEnabledFlag { get; set; }
        /// <summary>
        /// Indicates whether or not the user can reschedule the inspection.
        /// </summary>
        /// <value>Indicates whether or not the user can reschedule the inspection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HasCancelPermissionEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the user can reschedule the inspection.
        /// </summary>
        /// <value>Indicates whether or not the user can reschedule the inspection.</value>
        [DataMember(Name="hasCancelPermission", EmitDefaultValue=false)]
        public HasCancelPermissionEnum? HasCancelPermission { get; set; }
        /// <summary>
        /// Indicates whether or not to include the inspection in the inspection flow process.
        /// </summary>
        /// <value>Indicates whether or not to include the inspection in the inspection flow process.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HasFlowFlagEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not to include the inspection in the inspection flow process.
        /// </summary>
        /// <value>Indicates whether or not to include the inspection in the inspection flow process.</value>
        [DataMember(Name="hasFlowFlag", EmitDefaultValue=false)]
        public HasFlowFlagEnum? HasFlowFlag { get; set; }
        /// <summary>
        /// Indicates whether or not the next inspection can be scheduled in advance.
        /// </summary>
        /// <value>Indicates whether or not the next inspection can be scheduled in advance.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HasNextInspectionAdvanceEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the next inspection can be scheduled in advance.
        /// </summary>
        /// <value>Indicates whether or not the next inspection can be scheduled in advance.</value>
        [DataMember(Name="hasNextInspectionAdvance", EmitDefaultValue=false)]
        public HasNextInspectionAdvanceEnum? HasNextInspectionAdvance { get; set; }
        /// <summary>
        /// Indicates whether or not the user can reschedule the inspection.
        /// </summary>
        /// <value>Indicates whether or not the user can reschedule the inspection.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HasReschdulePermissionEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the user can reschedule the inspection.
        /// </summary>
        /// <value>Indicates whether or not the user can reschedule the inspection.</value>
        [DataMember(Name="hasReschdulePermission", EmitDefaultValue=false)]
        public HasReschdulePermissionEnum? HasReschdulePermission { get; set; }
        /// <summary>
        /// Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns \&quot;Y\&quot; if result.inspectionTypes.schdulePermission is either \&quot;REQUEST_ONLY_PENDING\&quot;, \&quot;REQUEST_SAME_DAY_NEXT_DAY\&quot;, or \&quot;SCHEDULE_USING_CALENDAR\&quot;. If result.inspectionTypes.schdulePermission is \&quot;NONE\&quot; or null, hasSchdulePermission returns \&quot;N\&quot;.
        /// </summary>
        /// <value>Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns \&quot;Y\&quot; if result.inspectionTypes.schdulePermission is either \&quot;REQUEST_ONLY_PENDING\&quot;, \&quot;REQUEST_SAME_DAY_NEXT_DAY\&quot;, or \&quot;SCHEDULE_USING_CALENDAR\&quot;. If result.inspectionTypes.schdulePermission is \&quot;NONE\&quot; or null, hasSchdulePermission returns \&quot;N\&quot;.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HasSchdulePermissionEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns \&quot;Y\&quot; if result.inspectionTypes.schdulePermission is either \&quot;REQUEST_ONLY_PENDING\&quot;, \&quot;REQUEST_SAME_DAY_NEXT_DAY\&quot;, or \&quot;SCHEDULE_USING_CALENDAR\&quot;. If result.inspectionTypes.schdulePermission is \&quot;NONE\&quot; or null, hasSchdulePermission returns \&quot;N\&quot;.
        /// </summary>
        /// <value>Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns \&quot;Y\&quot; if result.inspectionTypes.schdulePermission is either \&quot;REQUEST_ONLY_PENDING\&quot;, \&quot;REQUEST_SAME_DAY_NEXT_DAY\&quot;, or \&quot;SCHEDULE_USING_CALENDAR\&quot;. If result.inspectionTypes.schdulePermission is \&quot;NONE\&quot; or null, hasSchdulePermission returns \&quot;N\&quot;.</value>
        [DataMember(Name="hasSchdulePermission", EmitDefaultValue=false)]
        public HasSchdulePermissionEnum? HasSchdulePermission { get; set; }
        /// <summary>
        /// Indicates whether or not inspection result, grade or checklist can be edited.
        /// </summary>
        /// <value>Indicates whether or not inspection result, grade or checklist can be edited.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum InspectionEditableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not inspection result, grade or checklist can be edited.
        /// </summary>
        /// <value>Indicates whether or not inspection result, grade or checklist can be edited.</value>
        [DataMember(Name="inspectionEditable", EmitDefaultValue=false)]
        public InspectionEditableEnum? InspectionEditable { get; set; }
        /// <summary>
        /// Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.
        /// </summary>
        /// <value>Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsAutoAssignEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.
        /// </summary>
        /// <value>Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.</value>
        [DataMember(Name="isAutoAssign", EmitDefaultValue=false)]
        public IsAutoAssignEnum? IsAutoAssign { get; set; }
        /// <summary>
        /// Indicates whether or not the information is required.
        /// </summary>
        /// <value>Indicates whether or not the information is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the information is required.
        /// </summary>
        /// <value>Indicates whether or not the information is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Indicates whether or not Accela Citizen Access users can view comment about the inspection results.
        /// </summary>
        /// <value>Indicates whether or not Accela Citizen Access users can view comment about the inspection results.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PublicVisibleEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not Accela Citizen Access users can view comment about the inspection results.
        /// </summary>
        /// <value>Indicates whether or not Accela Citizen Access users can view comment about the inspection results.</value>
        [DataMember(Name="publicVisible", EmitDefaultValue=false)]
        public PublicVisibleEnum? PublicVisible { get; set; }
        /// <summary>
        /// Indicates the method for calculating total scores of checklist items. There are four options:   TOTAL - Gets the total score of all checklists as the inspection score.  MAX - Gets the max score of all checklists as the inspection score.  MIN - Gets the min score of all checklists as the inspection score.  AVG - Gets the average score of all checklists as the inspection score.  SUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type.
        /// </summary>
        /// <value>Indicates the method for calculating total scores of checklist items. There are four options:   TOTAL - Gets the total score of all checklists as the inspection score.  MAX - Gets the max score of all checklists as the inspection score.  MIN - Gets the min score of all checklists as the inspection score.  AVG - Gets the average score of all checklists as the inspection score.  SUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TotalScoreOptionEnum
        {
            
            /// <summary>
            /// Enum TOTAL for value: TOTAL
            /// </summary>
            [EnumMember(Value = "TOTAL")]
            TOTAL = 1,
            
            /// <summary>
            /// Enum MAX for value: MAX
            /// </summary>
            [EnumMember(Value = "MAX")]
            MAX = 2,
            
            /// <summary>
            /// Enum MIN for value: MIN
            /// </summary>
            [EnumMember(Value = "MIN")]
            MIN = 3,
            
            /// <summary>
            /// Enum AVG for value: AVG
            /// </summary>
            [EnumMember(Value = "AVG")]
            AVG = 4,
            
            /// <summary>
            /// Enum SUBTRACT for value: SUBTRACT
            /// </summary>
            [EnumMember(Value = "SUBTRACT")]
            SUBTRACT = 5
        }

        /// <summary>
        /// Indicates the method for calculating total scores of checklist items. There are four options:   TOTAL - Gets the total score of all checklists as the inspection score.  MAX - Gets the max score of all checklists as the inspection score.  MIN - Gets the min score of all checklists as the inspection score.  AVG - Gets the average score of all checklists as the inspection score.  SUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type.
        /// </summary>
        /// <value>Indicates the method for calculating total scores of checklist items. There are four options:   TOTAL - Gets the total score of all checklists as the inspection score.  MAX - Gets the max score of all checklists as the inspection score.  MIN - Gets the min score of all checklists as the inspection score.  AVG - Gets the average score of all checklists as the inspection score.  SUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type.</value>
        [DataMember(Name="totalScoreOption", EmitDefaultValue=false)]
        public TotalScoreOptionEnum? TotalScoreOption { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionTypeModel" /> class.
        /// </summary>
        /// <param name="allowFailChecklistItems">Indicates whether or not to allow inspection to pass with failed checklist items for the current inspection type or from previous inspections..</param>
        /// <param name="allowMultiInspections">Indicates whether or not to allow the scheduling of multiple inspections for this inspection type..</param>
        /// <param name="associations">associations.</param>
        /// <param name="cancelRestriction">cancelRestriction.</param>
        /// <param name="carryoverFlag">Indicates how failed guidesheet items for an inspection type are carried over to the next inspection guidesheet.  NULL or empty string : Guidesheet items are not carried over.  \&quot;A\&quot; : Automatic carry-over of failed guidesheet items to the next inspection guidesheet item..</param>
        /// <param name="defaultDepartment">defaultDepartment.</param>
        /// <param name="disciplines">The inspection disciplines assigned to the inspection type..</param>
        /// <param name="flowEnabledFlag">Indicates whether or not to include the inspection in the inspection flow process..</param>
        /// <param name="grade">The name of the inspection grade..</param>
        /// <param name="group">The name of a group of inspection types. .</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="guideGroup">guideGroup.</param>
        /// <param name="hasCancelPermission">Indicates whether or not the user can reschedule the inspection..</param>
        /// <param name="hasFlowFlag">Indicates whether or not to include the inspection in the inspection flow process..</param>
        /// <param name="hasNextInspectionAdvance">Indicates whether or not the next inspection can be scheduled in advance..</param>
        /// <param name="hasReschdulePermission">Indicates whether or not the user can reschedule the inspection..</param>
        /// <param name="hasSchdulePermission">Indicates whether or not the user can schedule the inspection. Note that hasSchdulePermission returns \&quot;Y\&quot; if result.inspectionTypes.schdulePermission is either \&quot;REQUEST_ONLY_PENDING\&quot;, \&quot;REQUEST_SAME_DAY_NEXT_DAY\&quot;, or \&quot;SCHEDULE_USING_CALENDAR\&quot;. If result.inspectionTypes.schdulePermission is \&quot;NONE\&quot; or null, hasSchdulePermission returns \&quot;N\&quot;..</param>
        /// <param name="id">The inspection type system id assigned by the Civic Platform server..</param>
        /// <param name="inspectionEditable">Indicates whether or not inspection result, grade or checklist can be edited..</param>
        /// <param name="isAutoAssign">Indicates whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status..</param>
        /// <param name="isRequired">Indicates whether or not the information is required..</param>
        /// <param name="ivrNumber">The IVR (Interactive Voice Response) number assigned to the inspection type.  Added in Civic Platform 9.3.0.</param>
        /// <param name="maxPoints">The number of points allowed for an inspection, after which the inspection fails..</param>
        /// <param name="priority">The priority level assigned to the inspection type..</param>
        /// <param name="publicVisible">Indicates whether or not Accela Citizen Access users can view comment about the inspection results..</param>
        /// <param name="refereceNumber">The reference number associated with an inspection..</param>
        /// <param name="rescheduleRestriction">rescheduleRestriction.</param>
        /// <param name="resultGroup">The name of a grouping of Inspection results, usually indicative of a range of inspection scores..</param>
        /// <param name="schdulePermission">Returns one of the scheduling permissions in Citizen Access:  NONE - Does not allow public users to schedule this inspection type online.  REQUEST_ONLY_PENDING - Only allows public users to request for an inspection online. The agency coordinates the appointment for the inspection date and time.  REQUEST_SAME_DAY_NEXT_DAY - Allows public users to request an inspection for the same day, next day, or next available day, based on the inspection type calendar parameters defined on the inspection type.  SCHEDULE_USING_CALENDAR - Allows public users to schedule inspections based on the availability on the inspection type calendar..</param>
        /// <param name="text">The localized display text..</param>
        /// <param name="totalScore">The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option..</param>
        /// <param name="totalScoreOption">Indicates the method for calculating total scores of checklist items. There are four options:   TOTAL - Gets the total score of all checklists as the inspection score.  MAX - Gets the max score of all checklists as the inspection score.  MIN - Gets the min score of all checklists as the inspection score.  AVG - Gets the average score of all checklists as the inspection score.  SUBTRACT - Subtracts the total score of all the checklist items from the Total Score defined for the inspection type..</param>
        /// <param name="unitNumber">The number of time units (see timeUnitDuration) comprising an inspection..</param>
        /// <param name="units">The amount of time comprising the smallest time unit for conducting an inspection..</param>
        /// <param name="value">The value for the specified parameter..</param>
        public InspectionTypeModel(AllowFailChecklistItemsEnum? allowFailChecklistItems = default(AllowFailChecklistItemsEnum?), AllowMultiInspectionsEnum? allowMultiInspections = default(AllowMultiInspectionsEnum?), InspectionTypeAssociationsModel associations = default(InspectionTypeAssociationsModel), InspectionRestrictionModel cancelRestriction = default(InspectionRestrictionModel), CarryoverFlagEnum? carryoverFlag = default(CarryoverFlagEnum?), DepartmentModel defaultDepartment = default(DepartmentModel), List<string> disciplines = default(List<string>), FlowEnabledFlagEnum? flowEnabledFlag = default(FlowEnabledFlagEnum?), string grade = default(string), string group = default(string), InspectionTypeModelGroupName groupName = default(InspectionTypeModelGroupName), RGuideSheetGroupModel guideGroup = default(RGuideSheetGroupModel), HasCancelPermissionEnum? hasCancelPermission = default(HasCancelPermissionEnum?), HasFlowFlagEnum? hasFlowFlag = default(HasFlowFlagEnum?), HasNextInspectionAdvanceEnum? hasNextInspectionAdvance = default(HasNextInspectionAdvanceEnum?), HasReschdulePermissionEnum? hasReschdulePermission = default(HasReschdulePermissionEnum?), HasSchdulePermissionEnum? hasSchdulePermission = default(HasSchdulePermissionEnum?), long? id = default(long?), InspectionEditableEnum? inspectionEditable = default(InspectionEditableEnum?), IsAutoAssignEnum? isAutoAssign = default(IsAutoAssignEnum?), IsRequiredEnum? isRequired = default(IsRequiredEnum?), long? ivrNumber = default(long?), double? maxPoints = default(double?), string priority = default(string), PublicVisibleEnum? publicVisible = default(PublicVisibleEnum?), string refereceNumber = default(string), InspectionRestrictionModel rescheduleRestriction = default(InspectionRestrictionModel), string resultGroup = default(string), string schdulePermission = default(string), string text = default(string), long? totalScore = default(long?), TotalScoreOptionEnum? totalScoreOption = default(TotalScoreOptionEnum?), string unitNumber = default(string), double? units = default(double?), string value = default(string))
        {
            this.AllowFailChecklistItems = allowFailChecklistItems;
            this.AllowMultiInspections = allowMultiInspections;
            this.Associations = associations;
            this.CancelRestriction = cancelRestriction;
            this.CarryoverFlag = carryoverFlag;
            this.DefaultDepartment = defaultDepartment;
            this.Disciplines = disciplines;
            this.FlowEnabledFlag = flowEnabledFlag;
            this.Grade = grade;
            this.Group = group;
            this.GroupName = groupName;
            this.GuideGroup = guideGroup;
            this.HasCancelPermission = hasCancelPermission;
            this.HasFlowFlag = hasFlowFlag;
            this.HasNextInspectionAdvance = hasNextInspectionAdvance;
            this.HasReschdulePermission = hasReschdulePermission;
            this.HasSchdulePermission = hasSchdulePermission;
            this.Id = id;
            this.InspectionEditable = inspectionEditable;
            this.IsAutoAssign = isAutoAssign;
            this.IsRequired = isRequired;
            this.IvrNumber = ivrNumber;
            this.MaxPoints = maxPoints;
            this.Priority = priority;
            this.PublicVisible = publicVisible;
            this.RefereceNumber = refereceNumber;
            this.RescheduleRestriction = rescheduleRestriction;
            this.ResultGroup = resultGroup;
            this.SchdulePermission = schdulePermission;
            this.Text = text;
            this.TotalScore = totalScore;
            this.TotalScoreOption = totalScoreOption;
            this.UnitNumber = unitNumber;
            this.Units = units;
            this.Value = value;
        }
        


        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations", EmitDefaultValue=false)]
        public InspectionTypeAssociationsModel Associations { get; set; }

        /// <summary>
        /// Gets or Sets CancelRestriction
        /// </summary>
        [DataMember(Name="cancelRestriction", EmitDefaultValue=false)]
        public InspectionRestrictionModel CancelRestriction { get; set; }


        /// <summary>
        /// Gets or Sets DefaultDepartment
        /// </summary>
        [DataMember(Name="defaultDepartment", EmitDefaultValue=false)]
        public DepartmentModel DefaultDepartment { get; set; }

        /// <summary>
        /// The inspection disciplines assigned to the inspection type.
        /// </summary>
        /// <value>The inspection disciplines assigned to the inspection type.</value>
        [DataMember(Name="disciplines", EmitDefaultValue=false)]
        public List<string> Disciplines { get; set; }


        /// <summary>
        /// The name of the inspection grade.
        /// </summary>
        /// <value>The name of the inspection grade.</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// The name of a group of inspection types. 
        /// </summary>
        /// <value>The name of a group of inspection types. </value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public InspectionTypeModelGroupName GroupName { get; set; }

        /// <summary>
        /// Gets or Sets GuideGroup
        /// </summary>
        [DataMember(Name="guideGroup", EmitDefaultValue=false)]
        public RGuideSheetGroupModel GuideGroup { get; set; }






        /// <summary>
        /// The inspection type system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The inspection type system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }




        /// <summary>
        /// The IVR (Interactive Voice Response) number assigned to the inspection type.  Added in Civic Platform 9.3.0
        /// </summary>
        /// <value>The IVR (Interactive Voice Response) number assigned to the inspection type.  Added in Civic Platform 9.3.0</value>
        [DataMember(Name="ivrNumber", EmitDefaultValue=false)]
        public long? IvrNumber { get; set; }

        /// <summary>
        /// The number of points allowed for an inspection, after which the inspection fails.
        /// </summary>
        /// <value>The number of points allowed for an inspection, after which the inspection fails.</value>
        [DataMember(Name="maxPoints", EmitDefaultValue=false)]
        public double? MaxPoints { get; set; }

        /// <summary>
        /// The priority level assigned to the inspection type.
        /// </summary>
        /// <value>The priority level assigned to the inspection type.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public string Priority { get; set; }


        /// <summary>
        /// The reference number associated with an inspection.
        /// </summary>
        /// <value>The reference number associated with an inspection.</value>
        [DataMember(Name="refereceNumber", EmitDefaultValue=false)]
        public string RefereceNumber { get; set; }

        /// <summary>
        /// Gets or Sets RescheduleRestriction
        /// </summary>
        [DataMember(Name="rescheduleRestriction", EmitDefaultValue=false)]
        public InspectionRestrictionModel RescheduleRestriction { get; set; }

        /// <summary>
        /// The name of a grouping of Inspection results, usually indicative of a range of inspection scores.
        /// </summary>
        /// <value>The name of a grouping of Inspection results, usually indicative of a range of inspection scores.</value>
        [DataMember(Name="resultGroup", EmitDefaultValue=false)]
        public string ResultGroup { get; set; }

        /// <summary>
        /// Returns one of the scheduling permissions in Citizen Access:  NONE - Does not allow public users to schedule this inspection type online.  REQUEST_ONLY_PENDING - Only allows public users to request for an inspection online. The agency coordinates the appointment for the inspection date and time.  REQUEST_SAME_DAY_NEXT_DAY - Allows public users to request an inspection for the same day, next day, or next available day, based on the inspection type calendar parameters defined on the inspection type.  SCHEDULE_USING_CALENDAR - Allows public users to schedule inspections based on the availability on the inspection type calendar.
        /// </summary>
        /// <value>Returns one of the scheduling permissions in Citizen Access:  NONE - Does not allow public users to schedule this inspection type online.  REQUEST_ONLY_PENDING - Only allows public users to request for an inspection online. The agency coordinates the appointment for the inspection date and time.  REQUEST_SAME_DAY_NEXT_DAY - Allows public users to request an inspection for the same day, next day, or next available day, based on the inspection type calendar parameters defined on the inspection type.  SCHEDULE_USING_CALENDAR - Allows public users to schedule inspections based on the availability on the inspection type calendar.</value>
        [DataMember(Name="schdulePermission", EmitDefaultValue=false)]
        public string SchdulePermission { get; set; }

        /// <summary>
        /// The localized display text.
        /// </summary>
        /// <value>The localized display text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.
        /// </summary>
        /// <value>The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.</value>
        [DataMember(Name="totalScore", EmitDefaultValue=false)]
        public long? TotalScore { get; set; }


        /// <summary>
        /// The number of time units (see timeUnitDuration) comprising an inspection.
        /// </summary>
        /// <value>The number of time units (see timeUnitDuration) comprising an inspection.</value>
        [DataMember(Name="unitNumber", EmitDefaultValue=false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// The amount of time comprising the smallest time unit for conducting an inspection.
        /// </summary>
        /// <value>The amount of time comprising the smallest time unit for conducting an inspection.</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public double? Units { get; set; }

        /// <summary>
        /// The value for the specified parameter.
        /// </summary>
        /// <value>The value for the specified parameter.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionTypeModel {\n");
            sb.Append("  AllowFailChecklistItems: ").Append(AllowFailChecklistItems).Append("\n");
            sb.Append("  AllowMultiInspections: ").Append(AllowMultiInspections).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  CancelRestriction: ").Append(CancelRestriction).Append("\n");
            sb.Append("  CarryoverFlag: ").Append(CarryoverFlag).Append("\n");
            sb.Append("  DefaultDepartment: ").Append(DefaultDepartment).Append("\n");
            sb.Append("  Disciplines: ").Append(Disciplines).Append("\n");
            sb.Append("  FlowEnabledFlag: ").Append(FlowEnabledFlag).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  GuideGroup: ").Append(GuideGroup).Append("\n");
            sb.Append("  HasCancelPermission: ").Append(HasCancelPermission).Append("\n");
            sb.Append("  HasFlowFlag: ").Append(HasFlowFlag).Append("\n");
            sb.Append("  HasNextInspectionAdvance: ").Append(HasNextInspectionAdvance).Append("\n");
            sb.Append("  HasReschdulePermission: ").Append(HasReschdulePermission).Append("\n");
            sb.Append("  HasSchdulePermission: ").Append(HasSchdulePermission).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InspectionEditable: ").Append(InspectionEditable).Append("\n");
            sb.Append("  IsAutoAssign: ").Append(IsAutoAssign).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  IvrNumber: ").Append(IvrNumber).Append("\n");
            sb.Append("  MaxPoints: ").Append(MaxPoints).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PublicVisible: ").Append(PublicVisible).Append("\n");
            sb.Append("  RefereceNumber: ").Append(RefereceNumber).Append("\n");
            sb.Append("  RescheduleRestriction: ").Append(RescheduleRestriction).Append("\n");
            sb.Append("  ResultGroup: ").Append(ResultGroup).Append("\n");
            sb.Append("  SchdulePermission: ").Append(SchdulePermission).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  TotalScore: ").Append(TotalScore).Append("\n");
            sb.Append("  TotalScoreOption: ").Append(TotalScoreOption).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectionTypeModel);
        }

        /// <summary>
        /// Returns true if InspectionTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectionTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AllowFailChecklistItems == input.AllowFailChecklistItems ||
                    (this.AllowFailChecklistItems != null &&
                    this.AllowFailChecklistItems.Equals(input.AllowFailChecklistItems))
                ) && 
                (
                    this.AllowMultiInspections == input.AllowMultiInspections ||
                    (this.AllowMultiInspections != null &&
                    this.AllowMultiInspections.Equals(input.AllowMultiInspections))
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.CancelRestriction == input.CancelRestriction ||
                    (this.CancelRestriction != null &&
                    this.CancelRestriction.Equals(input.CancelRestriction))
                ) && 
                (
                    this.CarryoverFlag == input.CarryoverFlag ||
                    (this.CarryoverFlag != null &&
                    this.CarryoverFlag.Equals(input.CarryoverFlag))
                ) && 
                (
                    this.DefaultDepartment == input.DefaultDepartment ||
                    (this.DefaultDepartment != null &&
                    this.DefaultDepartment.Equals(input.DefaultDepartment))
                ) && 
                (
                    this.Disciplines == input.Disciplines ||
                    this.Disciplines != null &&
                    this.Disciplines.SequenceEqual(input.Disciplines)
                ) && 
                (
                    this.FlowEnabledFlag == input.FlowEnabledFlag ||
                    (this.FlowEnabledFlag != null &&
                    this.FlowEnabledFlag.Equals(input.FlowEnabledFlag))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.GuideGroup == input.GuideGroup ||
                    (this.GuideGroup != null &&
                    this.GuideGroup.Equals(input.GuideGroup))
                ) && 
                (
                    this.HasCancelPermission == input.HasCancelPermission ||
                    (this.HasCancelPermission != null &&
                    this.HasCancelPermission.Equals(input.HasCancelPermission))
                ) && 
                (
                    this.HasFlowFlag == input.HasFlowFlag ||
                    (this.HasFlowFlag != null &&
                    this.HasFlowFlag.Equals(input.HasFlowFlag))
                ) && 
                (
                    this.HasNextInspectionAdvance == input.HasNextInspectionAdvance ||
                    (this.HasNextInspectionAdvance != null &&
                    this.HasNextInspectionAdvance.Equals(input.HasNextInspectionAdvance))
                ) && 
                (
                    this.HasReschdulePermission == input.HasReschdulePermission ||
                    (this.HasReschdulePermission != null &&
                    this.HasReschdulePermission.Equals(input.HasReschdulePermission))
                ) && 
                (
                    this.HasSchdulePermission == input.HasSchdulePermission ||
                    (this.HasSchdulePermission != null &&
                    this.HasSchdulePermission.Equals(input.HasSchdulePermission))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InspectionEditable == input.InspectionEditable ||
                    (this.InspectionEditable != null &&
                    this.InspectionEditable.Equals(input.InspectionEditable))
                ) && 
                (
                    this.IsAutoAssign == input.IsAutoAssign ||
                    (this.IsAutoAssign != null &&
                    this.IsAutoAssign.Equals(input.IsAutoAssign))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.IvrNumber == input.IvrNumber ||
                    (this.IvrNumber != null &&
                    this.IvrNumber.Equals(input.IvrNumber))
                ) && 
                (
                    this.MaxPoints == input.MaxPoints ||
                    (this.MaxPoints != null &&
                    this.MaxPoints.Equals(input.MaxPoints))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.PublicVisible == input.PublicVisible ||
                    (this.PublicVisible != null &&
                    this.PublicVisible.Equals(input.PublicVisible))
                ) && 
                (
                    this.RefereceNumber == input.RefereceNumber ||
                    (this.RefereceNumber != null &&
                    this.RefereceNumber.Equals(input.RefereceNumber))
                ) && 
                (
                    this.RescheduleRestriction == input.RescheduleRestriction ||
                    (this.RescheduleRestriction != null &&
                    this.RescheduleRestriction.Equals(input.RescheduleRestriction))
                ) && 
                (
                    this.ResultGroup == input.ResultGroup ||
                    (this.ResultGroup != null &&
                    this.ResultGroup.Equals(input.ResultGroup))
                ) && 
                (
                    this.SchdulePermission == input.SchdulePermission ||
                    (this.SchdulePermission != null &&
                    this.SchdulePermission.Equals(input.SchdulePermission))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.TotalScore == input.TotalScore ||
                    (this.TotalScore != null &&
                    this.TotalScore.Equals(input.TotalScore))
                ) && 
                (
                    this.TotalScoreOption == input.TotalScoreOption ||
                    (this.TotalScoreOption != null &&
                    this.TotalScoreOption.Equals(input.TotalScoreOption))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AllowFailChecklistItems != null)
                    hashCode = hashCode * 59 + this.AllowFailChecklistItems.GetHashCode();
                if (this.AllowMultiInspections != null)
                    hashCode = hashCode * 59 + this.AllowMultiInspections.GetHashCode();
                if (this.Associations != null)
                    hashCode = hashCode * 59 + this.Associations.GetHashCode();
                if (this.CancelRestriction != null)
                    hashCode = hashCode * 59 + this.CancelRestriction.GetHashCode();
                if (this.CarryoverFlag != null)
                    hashCode = hashCode * 59 + this.CarryoverFlag.GetHashCode();
                if (this.DefaultDepartment != null)
                    hashCode = hashCode * 59 + this.DefaultDepartment.GetHashCode();
                if (this.Disciplines != null)
                    hashCode = hashCode * 59 + this.Disciplines.GetHashCode();
                if (this.FlowEnabledFlag != null)
                    hashCode = hashCode * 59 + this.FlowEnabledFlag.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.GuideGroup != null)
                    hashCode = hashCode * 59 + this.GuideGroup.GetHashCode();
                if (this.HasCancelPermission != null)
                    hashCode = hashCode * 59 + this.HasCancelPermission.GetHashCode();
                if (this.HasFlowFlag != null)
                    hashCode = hashCode * 59 + this.HasFlowFlag.GetHashCode();
                if (this.HasNextInspectionAdvance != null)
                    hashCode = hashCode * 59 + this.HasNextInspectionAdvance.GetHashCode();
                if (this.HasReschdulePermission != null)
                    hashCode = hashCode * 59 + this.HasReschdulePermission.GetHashCode();
                if (this.HasSchdulePermission != null)
                    hashCode = hashCode * 59 + this.HasSchdulePermission.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InspectionEditable != null)
                    hashCode = hashCode * 59 + this.InspectionEditable.GetHashCode();
                if (this.IsAutoAssign != null)
                    hashCode = hashCode * 59 + this.IsAutoAssign.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.IvrNumber != null)
                    hashCode = hashCode * 59 + this.IvrNumber.GetHashCode();
                if (this.MaxPoints != null)
                    hashCode = hashCode * 59 + this.MaxPoints.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.PublicVisible != null)
                    hashCode = hashCode * 59 + this.PublicVisible.GetHashCode();
                if (this.RefereceNumber != null)
                    hashCode = hashCode * 59 + this.RefereceNumber.GetHashCode();
                if (this.RescheduleRestriction != null)
                    hashCode = hashCode * 59 + this.RescheduleRestriction.GetHashCode();
                if (this.ResultGroup != null)
                    hashCode = hashCode * 59 + this.ResultGroup.GetHashCode();
                if (this.SchdulePermission != null)
                    hashCode = hashCode * 59 + this.SchdulePermission.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.TotalScore != null)
                    hashCode = hashCode * 59 + this.TotalScore.GetHashCode();
                if (this.TotalScoreOption != null)
                    hashCode = hashCode * 59 + this.TotalScoreOption.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
