/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// InspectionCommentModel
    /// </summary>
    [DataContract]
    public partial class InspectionCommentModel :  IEquatable<InspectionCommentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionCommentModel" /> class.
        /// </summary>
        /// <param name="createdBy">The userid of the individual that created the entry..</param>
        /// <param name="createdDate">The date the comment was created..</param>
        /// <param name="inspectionId">The ID of the inspection the comment is attached to..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="text">The comment..</param>
        /// <param name="type">The comment type..</param>
        public InspectionCommentModel(string createdBy = default(string), string createdDate = default(string), long? inspectionId = default(long?), RecordIdModel recordId = default(RecordIdModel), string text = default(string), string type = default(string))
        {
            this.CreatedBy = createdBy;
            this.CreatedDate = createdDate;
            this.InspectionId = inspectionId;
            this.RecordId = recordId;
            this.Text = text;
            this.Type = type;
        }
        
        /// <summary>
        /// The userid of the individual that created the entry.
        /// </summary>
        /// <value>The userid of the individual that created the entry.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The date the comment was created.
        /// </summary>
        /// <value>The date the comment was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// The ID of the inspection the comment is attached to.
        /// </summary>
        /// <value>The ID of the inspection the comment is attached to.</value>
        [DataMember(Name="inspectionId", EmitDefaultValue=false)]
        public long? InspectionId { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The comment.
        /// </summary>
        /// <value>The comment.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The comment type.
        /// </summary>
        /// <value>The comment type.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionCommentModel {\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  InspectionId: ").Append(InspectionId).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectionCommentModel);
        }

        /// <summary>
        /// Returns true if InspectionCommentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectionCommentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionCommentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.InspectionId == input.InspectionId ||
                    (this.InspectionId != null &&
                    this.InspectionId.Equals(input.InspectionId))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.InspectionId != null)
                    hashCode = hashCode * 59 + this.InspectionId.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
