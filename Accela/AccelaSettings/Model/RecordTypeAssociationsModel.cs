/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// RecordTypeAssociationsModel
    /// </summary>
    [DataContract]
    public partial class RecordTypeAssociationsModel :  IEquatable<RecordTypeAssociationsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordTypeAssociationsModel" /> class.
        /// </summary>
        /// <param name="addressTypeGroup">The name of the address type group that contains permissible address tyeps for instances of the record type..</param>
        /// <param name="customFormGroup">The name of the custom forms group for instances of the record type..</param>
        /// <param name="documentCode">The code that defines the document types for the record type..</param>
        /// <param name="expirationCode">The code that defines the parameters for expiring records that are instances of the record type..</param>
        /// <param name="feeSchedule">The name of the fee schedule associated with instances of the record type..</param>
        /// <param name="inspectionGroup">The name of the inspection group that contains the inspection-related parameters applied to instances of the record type..</param>
        /// <param name="recordStatusGroup">The group of record statuses associated with the record type..</param>
        /// <param name="standardCommentGroup">standardCommentGroup.</param>
        /// <param name="virtualFolderGroup">The name of the virtual folder group associated with instances of the record type..</param>
        /// <param name="workflow">The name of the workflow associated with instances of the record type..</param>
        public RecordTypeAssociationsModel(string addressTypeGroup = default(string), string customFormGroup = default(string), string documentCode = default(string), string expirationCode = default(string), string feeSchedule = default(string), string inspectionGroup = default(string), string recordStatusGroup = default(string), List<RecordTypeAssociationsModelStandardCommentGroup> standardCommentGroup = default(List<RecordTypeAssociationsModelStandardCommentGroup>), string virtualFolderGroup = default(string), string workflow = default(string))
        {
            this.AddressTypeGroup = addressTypeGroup;
            this.CustomFormGroup = customFormGroup;
            this.DocumentCode = documentCode;
            this.ExpirationCode = expirationCode;
            this.FeeSchedule = feeSchedule;
            this.InspectionGroup = inspectionGroup;
            this.RecordStatusGroup = recordStatusGroup;
            this.StandardCommentGroup = standardCommentGroup;
            this.VirtualFolderGroup = virtualFolderGroup;
            this.Workflow = workflow;
        }
        
        /// <summary>
        /// The name of the address type group that contains permissible address tyeps for instances of the record type.
        /// </summary>
        /// <value>The name of the address type group that contains permissible address tyeps for instances of the record type.</value>
        [DataMember(Name="addressTypeGroup", EmitDefaultValue=false)]
        public string AddressTypeGroup { get; set; }

        /// <summary>
        /// The name of the custom forms group for instances of the record type.
        /// </summary>
        /// <value>The name of the custom forms group for instances of the record type.</value>
        [DataMember(Name="customFormGroup", EmitDefaultValue=false)]
        public string CustomFormGroup { get; set; }

        /// <summary>
        /// The code that defines the document types for the record type.
        /// </summary>
        /// <value>The code that defines the document types for the record type.</value>
        [DataMember(Name="documentCode", EmitDefaultValue=false)]
        public string DocumentCode { get; set; }

        /// <summary>
        /// The code that defines the parameters for expiring records that are instances of the record type.
        /// </summary>
        /// <value>The code that defines the parameters for expiring records that are instances of the record type.</value>
        [DataMember(Name="expirationCode", EmitDefaultValue=false)]
        public string ExpirationCode { get; set; }

        /// <summary>
        /// The name of the fee schedule associated with instances of the record type.
        /// </summary>
        /// <value>The name of the fee schedule associated with instances of the record type.</value>
        [DataMember(Name="feeSchedule", EmitDefaultValue=false)]
        public string FeeSchedule { get; set; }

        /// <summary>
        /// The name of the inspection group that contains the inspection-related parameters applied to instances of the record type.
        /// </summary>
        /// <value>The name of the inspection group that contains the inspection-related parameters applied to instances of the record type.</value>
        [DataMember(Name="inspectionGroup", EmitDefaultValue=false)]
        public string InspectionGroup { get; set; }

        /// <summary>
        /// The group of record statuses associated with the record type.
        /// </summary>
        /// <value>The group of record statuses associated with the record type.</value>
        [DataMember(Name="recordStatusGroup", EmitDefaultValue=false)]
        public string RecordStatusGroup { get; set; }

        /// <summary>
        /// Gets or Sets StandardCommentGroup
        /// </summary>
        [DataMember(Name="standardCommentGroup", EmitDefaultValue=false)]
        public List<RecordTypeAssociationsModelStandardCommentGroup> StandardCommentGroup { get; set; }

        /// <summary>
        /// The name of the virtual folder group associated with instances of the record type.
        /// </summary>
        /// <value>The name of the virtual folder group associated with instances of the record type.</value>
        [DataMember(Name="virtualFolderGroup", EmitDefaultValue=false)]
        public string VirtualFolderGroup { get; set; }

        /// <summary>
        /// The name of the workflow associated with instances of the record type.
        /// </summary>
        /// <value>The name of the workflow associated with instances of the record type.</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public string Workflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordTypeAssociationsModel {\n");
            sb.Append("  AddressTypeGroup: ").Append(AddressTypeGroup).Append("\n");
            sb.Append("  CustomFormGroup: ").Append(CustomFormGroup).Append("\n");
            sb.Append("  DocumentCode: ").Append(DocumentCode).Append("\n");
            sb.Append("  ExpirationCode: ").Append(ExpirationCode).Append("\n");
            sb.Append("  FeeSchedule: ").Append(FeeSchedule).Append("\n");
            sb.Append("  InspectionGroup: ").Append(InspectionGroup).Append("\n");
            sb.Append("  RecordStatusGroup: ").Append(RecordStatusGroup).Append("\n");
            sb.Append("  StandardCommentGroup: ").Append(StandardCommentGroup).Append("\n");
            sb.Append("  VirtualFolderGroup: ").Append(VirtualFolderGroup).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordTypeAssociationsModel);
        }

        /// <summary>
        /// Returns true if RecordTypeAssociationsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordTypeAssociationsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordTypeAssociationsModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressTypeGroup == input.AddressTypeGroup ||
                    (this.AddressTypeGroup != null &&
                    this.AddressTypeGroup.Equals(input.AddressTypeGroup))
                ) && 
                (
                    this.CustomFormGroup == input.CustomFormGroup ||
                    (this.CustomFormGroup != null &&
                    this.CustomFormGroup.Equals(input.CustomFormGroup))
                ) && 
                (
                    this.DocumentCode == input.DocumentCode ||
                    (this.DocumentCode != null &&
                    this.DocumentCode.Equals(input.DocumentCode))
                ) && 
                (
                    this.ExpirationCode == input.ExpirationCode ||
                    (this.ExpirationCode != null &&
                    this.ExpirationCode.Equals(input.ExpirationCode))
                ) && 
                (
                    this.FeeSchedule == input.FeeSchedule ||
                    (this.FeeSchedule != null &&
                    this.FeeSchedule.Equals(input.FeeSchedule))
                ) && 
                (
                    this.InspectionGroup == input.InspectionGroup ||
                    (this.InspectionGroup != null &&
                    this.InspectionGroup.Equals(input.InspectionGroup))
                ) && 
                (
                    this.RecordStatusGroup == input.RecordStatusGroup ||
                    (this.RecordStatusGroup != null &&
                    this.RecordStatusGroup.Equals(input.RecordStatusGroup))
                ) && 
                (
                    this.StandardCommentGroup == input.StandardCommentGroup ||
                    this.StandardCommentGroup != null &&
                    this.StandardCommentGroup.SequenceEqual(input.StandardCommentGroup)
                ) && 
                (
                    this.VirtualFolderGroup == input.VirtualFolderGroup ||
                    (this.VirtualFolderGroup != null &&
                    this.VirtualFolderGroup.Equals(input.VirtualFolderGroup))
                ) && 
                (
                    this.Workflow == input.Workflow ||
                    (this.Workflow != null &&
                    this.Workflow.Equals(input.Workflow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressTypeGroup != null)
                    hashCode = hashCode * 59 + this.AddressTypeGroup.GetHashCode();
                if (this.CustomFormGroup != null)
                    hashCode = hashCode * 59 + this.CustomFormGroup.GetHashCode();
                if (this.DocumentCode != null)
                    hashCode = hashCode * 59 + this.DocumentCode.GetHashCode();
                if (this.ExpirationCode != null)
                    hashCode = hashCode * 59 + this.ExpirationCode.GetHashCode();
                if (this.FeeSchedule != null)
                    hashCode = hashCode * 59 + this.FeeSchedule.GetHashCode();
                if (this.InspectionGroup != null)
                    hashCode = hashCode * 59 + this.InspectionGroup.GetHashCode();
                if (this.RecordStatusGroup != null)
                    hashCode = hashCode * 59 + this.RecordStatusGroup.GetHashCode();
                if (this.StandardCommentGroup != null)
                    hashCode = hashCode * 59 + this.StandardCommentGroup.GetHashCode();
                if (this.VirtualFolderGroup != null)
                    hashCode = hashCode * 59 + this.VirtualFolderGroup.GetHashCode();
                if (this.Workflow != null)
                    hashCode = hashCode * 59 + this.Workflow.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
