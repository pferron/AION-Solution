/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaInspections.Client;
using AccelaInspections.Model;

namespace AccelaInspections.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IInspectionsConditionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Inspection Conditions
        /// </summary>
        /// <remarks>
        /// Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4DeleteInspectionsInspectionIdConditionsIds (string contentType, string authorization, long? inspectionId, string ids, string lang = null);

        /// <summary>
        /// Delete Inspection Conditions
        /// </summary>
        /// <remarks>
        /// Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4DeleteInspectionsInspectionIdConditionsIdsWithHttpInfo (string contentType, string authorization, long? inspectionId, string ids, string lang = null);
        /// <summary>
        /// Get All Standard Conditions for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionConditionModelArray</returns>
        ResponseInspectionConditionModelArray V4GetInspectionsInspectionIdConditions (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Standard Conditions for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionConditionModelArray</returns>
        ApiResponse<ResponseInspectionConditionModelArray> V4GetInspectionsInspectionIdConditionsWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Condition
        /// </summary>
        /// <remarks>
        /// Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionConditionModel</returns>
        ResponseInspectionConditionModel V4GetInspectionsInspectionIdConditionsId (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection Condition
        /// </summary>
        /// <remarks>
        /// Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionConditionModel</returns>
        ApiResponse<ResponseInspectionConditionModel> V4GetInspectionsInspectionIdConditionsIdWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Condition History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionHistoryModelArray</returns>
        ResponseConditionHistoryModelArray V4GetInspectionsInspectionIdConditionsIdHistories (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection Condition History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionHistoryModelArray</returns>
        ApiResponse<ResponseConditionHistoryModelArray> V4GetInspectionsInspectionIdConditionsIdHistoriesWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);
        /// <summary>
        /// Create Inspection Standard Conditions
        /// </summary>
        /// <remarks>
        /// Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PostInspectionsInspectionIdConditions (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null);

        /// <summary>
        /// Create Inspection Standard Conditions
        /// </summary>
        /// <remarks>
        /// Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PostInspectionsInspectionIdConditionsWithHttpInfo (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null);
        /// <summary>
        /// Update Inspection Condition
        /// </summary>
        /// <remarks>
        /// Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionConditionModel</returns>
        ResponseInspectionConditionModel V4PutInspectionsInspectionIdConditionsId (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null);

        /// <summary>
        /// Update Inspection Condition
        /// </summary>
        /// <remarks>
        /// Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionConditionModel</returns>
        ApiResponse<ResponseInspectionConditionModel> V4PutInspectionsInspectionIdConditionsIdWithHttpInfo (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Inspection Conditions
        /// </summary>
        /// <remarks>
        /// Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsInspectionIdConditionsIdsAsync (string contentType, string authorization, long? inspectionId, string ids, string lang = null);

        /// <summary>
        /// Delete Inspection Conditions
        /// </summary>
        /// <remarks>
        /// Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsInspectionIdConditionsIdsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string ids, string lang = null);
        /// <summary>
        /// Get All Standard Conditions for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionConditionModelArray</returns>
        System.Threading.Tasks.Task<ResponseInspectionConditionModelArray> V4GetInspectionsInspectionIdConditionsAsync (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Standard Conditions for Inspection
        /// </summary>
        /// <remarks>
        /// Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionConditionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionConditionModelArray>> V4GetInspectionsInspectionIdConditionsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Condition
        /// </summary>
        /// <remarks>
        /// Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionConditionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionConditionModel> V4GetInspectionsInspectionIdConditionsIdAsync (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection Condition
        /// </summary>
        /// <remarks>
        /// Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionConditionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionConditionModel>> V4GetInspectionsInspectionIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);
        /// <summary>
        /// Get Inspection Condition History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionHistoryModelArray</returns>
        System.Threading.Tasks.Task<ResponseConditionHistoryModelArray> V4GetInspectionsInspectionIdConditionsIdHistoriesAsync (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);

        /// <summary>
        /// Get Inspection Condition History
        /// </summary>
        /// <remarks>
        /// Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionHistoryModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseConditionHistoryModelArray>> V4GetInspectionsInspectionIdConditionsIdHistoriesAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null);
        /// <summary>
        /// Create Inspection Standard Conditions
        /// </summary>
        /// <remarks>
        /// Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsInspectionIdConditionsAsync (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null);

        /// <summary>
        /// Create Inspection Standard Conditions
        /// </summary>
        /// <remarks>
        /// Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsInspectionIdConditionsAsyncWithHttpInfo (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null);
        /// <summary>
        /// Update Inspection Condition
        /// </summary>
        /// <remarks>
        /// Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionConditionModel</returns>
        System.Threading.Tasks.Task<ResponseInspectionConditionModel> V4PutInspectionsInspectionIdConditionsIdAsync (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null);

        /// <summary>
        /// Update Inspection Condition
        /// </summary>
        /// <remarks>
        /// Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionConditionModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseInspectionConditionModel>> V4PutInspectionsInspectionIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class InspectionsConditionsApi : IInspectionsConditionsApi
    {
        private AccelaInspections.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsConditionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public InspectionsConditionsApi(String basePath)
        {
            this.Configuration = new AccelaInspections.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionsConditionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public InspectionsConditionsApi(AccelaInspections.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaInspections.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaInspections.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaInspections.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaInspections.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Inspection Conditions Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4DeleteInspectionsInspectionIdConditionsIds (string contentType, string authorization, long? inspectionId, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4DeleteInspectionsInspectionIdConditionsIdsWithHttpInfo(contentType, authorization, inspectionId, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Inspection Conditions Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4DeleteInspectionsInspectionIdConditionsIdsWithHttpInfo (string contentType, string authorization, long? inspectionId, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");

            var localVarPath = "/v4/Inspections/{inspectionId}/conditions/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsInspectionIdConditionsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Delete Inspection Conditions Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4DeleteInspectionsInspectionIdConditionsIdsAsync (string contentType, string authorization, long? inspectionId, string ids, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4DeleteInspectionsInspectionIdConditionsIdsAsyncWithHttpInfo(contentType, authorization, inspectionId, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Inspection Conditions Deletes conditons from the specified inspections. **API Endpoint**:  DELETE /v4/inspections/{inspectionId}/conditions/{ids}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="ids">Comma-delimited IDs of inspection conditions to be deleted.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4DeleteInspectionsInspectionIdConditionsIdsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling InspectionsConditionsApi->V4DeleteInspectionsInspectionIdConditionsIds");

            var localVarPath = "/v4/Inspections/{inspectionId}/conditions/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteInspectionsInspectionIdConditionsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Get All Standard Conditions for Inspection Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionConditionModelArray</returns>
        public ResponseInspectionConditionModelArray V4GetInspectionsInspectionIdConditions (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionConditionModelArray> localVarResponse = V4GetInspectionsInspectionIdConditionsWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Standard Conditions for Inspection Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionConditionModelArray</returns>
        public ApiResponse< ResponseInspectionConditionModelArray > V4GetInspectionsInspectionIdConditionsWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditions");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditions");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionConditionModelArray)));
        }

        /// <summary>
        /// Get All Standard Conditions for Inspection Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionConditionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionConditionModelArray> V4GetInspectionsInspectionIdConditionsAsync (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionConditionModelArray> localVarResponse = await V4GetInspectionsInspectionIdConditionsAsyncWithHttpInfo(contentType, authorization, inspectionId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Standard Conditions for Inspection Gets the conditions that apply to the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionConditionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionConditionModelArray>> V4GetInspectionsInspectionIdConditionsAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditions");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditions");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionConditionModelArray)));
        }

        /// <summary>
        /// Get Inspection Condition Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionConditionModel</returns>
        public ResponseInspectionConditionModel V4GetInspectionsInspectionIdConditionsId (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionConditionModel> localVarResponse = V4GetInspectionsInspectionIdConditionsIdWithHttpInfo(contentType, authorization, inspectionId, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspection Condition Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionConditionModel</returns>
        public ApiResponse< ResponseInspectionConditionModel > V4GetInspectionsInspectionIdConditionsIdWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionConditionModel)));
        }

        /// <summary>
        /// Get Inspection Condition Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionConditionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionConditionModel> V4GetInspectionsInspectionIdConditionsIdAsync (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseInspectionConditionModel> localVarResponse = await V4GetInspectionsInspectionIdConditionsIdAsyncWithHttpInfo(contentType, authorization, inspectionId, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspection Condition Gets the condition for the specified inspection. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionConditionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionConditionModel>> V4GetInspectionsInspectionIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsId");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionConditionModel)));
        }

        /// <summary>
        /// Get Inspection Condition History Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionHistoryModelArray</returns>
        public ResponseConditionHistoryModelArray V4GetInspectionsInspectionIdConditionsIdHistories (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionHistoryModelArray> localVarResponse = V4GetInspectionsInspectionIdConditionsIdHistoriesWithHttpInfo(contentType, authorization, inspectionId, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Inspection Condition History Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionHistoryModelArray</returns>
        public ApiResponse< ResponseConditionHistoryModelArray > V4GetInspectionsInspectionIdConditionsIdHistoriesWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions/{id}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdConditionsIdHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionHistoryModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionHistoryModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionHistoryModelArray)));
        }

        /// <summary>
        /// Get Inspection Condition History Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionHistoryModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseConditionHistoryModelArray> V4GetInspectionsInspectionIdConditionsIdHistoriesAsync (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionHistoryModelArray> localVarResponse = await V4GetInspectionsInspectionIdConditionsIdHistoriesAsyncWithHttpInfo(contentType, authorization, inspectionId, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Inspection Condition History Gets the history for the specified conditions associated with the specified inspections. **API Endpoint**:  GET /v4/inspections/{inspectionId}/conditions/{id}/histories  **Scope**:  inspections  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionHistoryModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseConditionHistoryModelArray>> V4GetInspectionsInspectionIdConditionsIdHistoriesAsyncWithHttpInfo (string contentType, string authorization, long? inspectionId, long? id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsConditionsApi->V4GetInspectionsInspectionIdConditionsIdHistories");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions/{id}/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetInspectionsInspectionIdConditionsIdHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionHistoryModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionHistoryModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionHistoryModelArray)));
        }

        /// <summary>
        /// Create Inspection Standard Conditions Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PostInspectionsInspectionIdConditions (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PostInspectionsInspectionIdConditionsWithHttpInfo(contentType, authorization, body, inspectionId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Inspection Standard Conditions Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PostInspectionsInspectionIdConditionsWithHttpInfo (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Create Inspection Standard Conditions Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PostInspectionsInspectionIdConditionsAsync (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PostInspectionsInspectionIdConditionsAsyncWithHttpInfo(contentType, authorization, body, inspectionId, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Inspection Standard Conditions Adds a set of conditions to the specified inspections. **API Endpoint**:  POST /v4/inspections/{inspectionId}/conditions  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The inspection condition to add.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PostInspectionsInspectionIdConditionsAsyncWithHttpInfo (string contentType, string authorization, List<InspectionConditionModel> body, long? inspectionId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4PostInspectionsInspectionIdConditions");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostInspectionsInspectionIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Inspection Condition Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseInspectionConditionModel</returns>
        public ResponseInspectionConditionModel V4PutInspectionsInspectionIdConditionsId (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null)
        {
             ApiResponse<ResponseInspectionConditionModel> localVarResponse = V4PutInspectionsInspectionIdConditionsIdWithHttpInfo(contentType, authorization, body, inspectionId, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Inspection Condition Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseInspectionConditionModel</returns>
        public ApiResponse< ResponseInspectionConditionModel > V4PutInspectionsInspectionIdConditionsIdWithHttpInfo (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsInspectionIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionConditionModel)));
        }

        /// <summary>
        /// Update Inspection Condition Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseInspectionConditionModel</returns>
        public async System.Threading.Tasks.Task<ResponseInspectionConditionModel> V4PutInspectionsInspectionIdConditionsIdAsync (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null)
        {
             ApiResponse<ResponseInspectionConditionModel> localVarResponse = await V4PutInspectionsInspectionIdConditionsIdAsyncWithHttpInfo(contentType, authorization, body, inspectionId, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Inspection Condition Updates conditions for the specified inspection. **API Endpoint**:  PUT /v4/inspections/{inspectionId}/conditions/{id}  **Scope**:  inspections  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaInspections.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The condition information to be updated.</param>
        /// <param name="inspectionId">The ID of the inspection to fetch. See [Get All Inspections](./api-inspections.html#operation/v4.get.inspections), [Search Inspections](./api-search.html#operation/v4.post.search.inspections).</param>
        /// <param name="id">The ID of the inspection condition to update.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseInspectionConditionModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseInspectionConditionModel>> V4PutInspectionsInspectionIdConditionsIdAsyncWithHttpInfo (string contentType, string authorization, InspectionConditionModel body, long? inspectionId, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'inspectionId' is set
            if (inspectionId == null)
                throw new ApiException(400, "Missing required parameter 'inspectionId' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling InspectionsConditionsApi->V4PutInspectionsInspectionIdConditionsId");

            var localVarPath = "/v4/inspections/{inspectionId}/conditions/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (inspectionId != null) localVarPathParams.Add("inspectionId", this.Configuration.ApiClient.ParameterToString(inspectionId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutInspectionsInspectionIdConditionsId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseInspectionConditionModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseInspectionConditionModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseInspectionConditionModel)));
        }

    }
}
