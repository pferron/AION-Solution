/* 
 * Authentication
 *
 * Construct's OAuth2 APIs for generating API access tokens. For an overview, see [Construct API Authentication](../construct-apiAuth.html).
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAuthorization.Client;
using AccelaAuthorization.Model;

namespace AccelaAuthorization.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>ResponseAuthorize</returns>
        ResponseAuthorize Oauth2Authorize (RequestAuthorize body);

        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>ApiResponse of ResponseAuthorize</returns>
        ApiResponse<ResponseAuthorize> Oauth2AuthorizeWithHttpInfo (RequestAuthorize body);
        /// <summary>
        /// Get Access Token
        /// </summary>
        /// <remarks>
        /// Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>ResponseToken</returns>
        ResponseToken Oauth2Token (RequestToken body, string contentType, string xAccelaAppid);

        /// <summary>
        /// Get Access Token
        /// </summary>
        /// <remarks>
        /// Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>ApiResponse of ResponseToken</returns>
        ApiResponse<ResponseToken> Oauth2TokenWithHttpInfo (RequestToken body, string contentType, string xAccelaAppid);
        /// <summary>
        /// Get Token Info
        /// </summary>
        /// <remarks>
        /// Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>ResponseTokeninfo</returns>
        ResponseTokeninfo Oauth2Tokeninfo (string authorization);

        /// <summary>
        /// Get Token Info
        /// </summary>
        /// <remarks>
        /// Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>ApiResponse of ResponseTokeninfo</returns>
        ApiResponse<ResponseTokeninfo> Oauth2TokeninfoWithHttpInfo (string authorization);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>Task of ResponseAuthorize</returns>
        System.Threading.Tasks.Task<ResponseAuthorize> Oauth2AuthorizeAsync (RequestAuthorize body);

        /// <summary>
        /// Get Authorization Code
        /// </summary>
        /// <remarks>
        /// Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>Task of ApiResponse (ResponseAuthorize)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAuthorize>> Oauth2AuthorizeAsyncWithHttpInfo (RequestAuthorize body);
        /// <summary>
        /// Get Access Token
        /// </summary>
        /// <remarks>
        /// Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>Task of ResponseToken</returns>
        System.Threading.Tasks.Task<ResponseToken> Oauth2TokenAsync (RequestToken body, string contentType, string xAccelaAppid);

        /// <summary>
        /// Get Access Token
        /// </summary>
        /// <remarks>
        /// Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>Task of ApiResponse (ResponseToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseToken>> Oauth2TokenAsyncWithHttpInfo (RequestToken body, string contentType, string xAccelaAppid);
        /// <summary>
        /// Get Token Info
        /// </summary>
        /// <remarks>
        /// Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>Task of ResponseTokeninfo</returns>
        System.Threading.Tasks.Task<ResponseTokeninfo> Oauth2TokeninfoAsync (string authorization);

        /// <summary>
        /// Get Token Info
        /// </summary>
        /// <remarks>
        /// Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </remarks>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>Task of ApiResponse (ResponseTokeninfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTokeninfo>> Oauth2TokeninfoAsyncWithHttpInfo (string authorization);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class DefaultApi : IDefaultApi
    {
        private AccelaAuthorization.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new AccelaAuthorization.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAuthorization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = AccelaAuthorization.Client.Configuration.Default;

            ExceptionFactory = AccelaAuthorization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(AccelaAuthorization.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAuthorization.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAuthorization.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAuthorization.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAuthorization.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Authorization Code Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>ResponseAuthorize</returns>
        public ResponseAuthorize Oauth2Authorize (RequestAuthorize body)
        {
             ApiResponse<ResponseAuthorize> localVarResponse = Oauth2AuthorizeWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Authorization Code Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>ApiResponse of ResponseAuthorize</returns>
        public ApiResponse< ResponseAuthorize > Oauth2AuthorizeWithHttpInfo (RequestAuthorize body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Oauth2Authorize");

            var localVarPath = "/oauth2/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, body, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAuthorize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAuthorize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAuthorize)));
        }

        /// <summary>
        /// Get Authorization Code Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>Task of ResponseAuthorize</returns>
        public async System.Threading.Tasks.Task<ResponseAuthorize> Oauth2AuthorizeAsync (RequestAuthorize body)
        {
             ApiResponse<ResponseAuthorize> localVarResponse = await Oauth2AuthorizeAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Authorization Code Gets an authorization code (for authorization code flow) or access token (for implicit flow) from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter response_type&#x3D;code. If successful, the authorization code will be returned in the response body. Use the authorization code to get the access token from [Get Access Token](#operation/oauth2.token).  - [Implicit Flow](../construct-implicitFlow.html) - set the request parameter response_type&#x3D;token. If successful, the access token will be returned in the access_token parameter in the redirect URL.     **Note**: You can invoke this API using the HTTP GET method. In which case, specify the described request body fields as request query parameters. **API Endpoint**:  POST /oauth2/authorize
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request authorization parameters</param>
        /// <returns>Task of ApiResponse (ResponseAuthorize)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAuthorize>> Oauth2AuthorizeAsyncWithHttpInfo (RequestAuthorize body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Oauth2Authorize");

            var localVarPath = "/oauth2/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAuthorize>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAuthorize) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAuthorize)));
        }

        /// <summary>
        /// Get Access Token Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>ResponseToken</returns>
        public ResponseToken Oauth2Token (RequestToken body, string contentType, string xAccelaAppid)
        {
             ApiResponse<ResponseToken> localVarResponse = Oauth2TokenWithHttpInfo(body, contentType, xAccelaAppid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Access Token Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>ApiResponse of ResponseToken</returns>
        public ApiResponse< ResponseToken > Oauth2TokenWithHttpInfo (RequestToken body, string contentType, string xAccelaAppid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Oauth2Token");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->Oauth2Token");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling DefaultApi->Oauth2Token");

            var localVarPath = "/oauth2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
          //  Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {contentType};
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            //// to determine the Accept header
            //String[] localVarHttpHeaderAccepts = new String[] {
            //    "*/*"
            //};
            // String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            String localVarHttpHeaderAccept = null;
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter
            //if (body != null && body.GetType() != typeof(byte[]))
            //{
            //    localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            //}
            //else
            //{
            //    localVarPostBody = body; // byte array
            //}

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, body, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2Token", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseToken) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseToken)));
        }

        /// <summary>
        /// Get Access Token Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>Task of ResponseToken</returns>
        public async System.Threading.Tasks.Task<ResponseToken> Oauth2TokenAsync (RequestToken body, string contentType, string xAccelaAppid)
        {
             ApiResponse<ResponseToken> localVarResponse = await Oauth2TokenAsyncWithHttpInfo(body, contentType, xAccelaAppid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Access Token Gets an access token from the authentication server.  This API is used for the following:  - [Authorization Code Flow](../construct-authCodeFlow.html) - set the request parameter grant_type&#x3D;authorization_code.   - [Password Credential Login](../construct-passwordCredentialLogin.html) - set the request parameter grant_type&#x3D;password.    - Refreshing the token - set the request parameter grant_type&#x3D;refresh_token. Access tokens have a limited lifetime and, in some cases, an application needs access to an API beyond the lifetime of a single access token. When this is the case, your application can obtain a new access token using the refresh token. Your app can refresh the token before it expires or when it expires, according your app requirements or workflow.  **API Endpoint**:  POST /oauth2/token
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Request token parameters</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="xAccelaAppid">Your app id.</param>
        /// <returns>Task of ApiResponse (ResponseToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseToken>> Oauth2TokenAsyncWithHttpInfo (RequestToken body, string contentType, string xAccelaAppid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->Oauth2Token");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling DefaultApi->Oauth2Token");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling DefaultApi->Oauth2Token");

            var localVarPath = "/oauth2/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            //  Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] { contentType };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            //// to determine the Accept header
            //String[] localVarHttpHeaderAccepts = new String[] {
            //    "*/*"
            //};
            // String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            String localVarHttpHeaderAccept = null;
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter
            //if (body != null && body.GetType() != typeof(byte[]))
            //{
            //    localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            //}
            //else
            //{
            //    localVarPostBody = body; // byte array
            //}

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, body, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2Token", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseToken)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseToken)));
        }

        /// <summary>
        /// Get Token Info Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>ResponseTokeninfo</returns>
        public ResponseTokeninfo Oauth2Tokeninfo (string authorization)
        {
             ApiResponse<ResponseTokeninfo> localVarResponse = Oauth2TokeninfoWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Token Info Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>ApiResponse of ResponseTokeninfo</returns>
        public ApiResponse< ResponseTokeninfo > Oauth2TokeninfoWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->Oauth2Tokeninfo");

            var localVarPath = "/oauth2/tokeninfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2Tokeninfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTokeninfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTokeninfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTokeninfo)));
        }

        /// <summary>
        /// Get Token Info Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>Task of ResponseTokeninfo</returns>
        public async System.Threading.Tasks.Task<ResponseTokeninfo> Oauth2TokeninfoAsync (string authorization)
        {
             ApiResponse<ResponseTokeninfo> localVarResponse = await Oauth2TokeninfoAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Token Info Validates a given access token in the *Authorization* http header, and returns the token information. Use the token information to match it with the information used to request the access token.    **API Endpoint**:  GET /oauth2/tokeninfo
        /// </summary>
        /// <exception cref="AccelaAuthorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The access token to validate.</param>
        /// <returns>Task of ApiResponse (ResponseTokeninfo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTokeninfo>> Oauth2TokeninfoAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DefaultApi->Oauth2Tokeninfo");

            var localVarPath = "/oauth2/tokeninfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Oauth2Tokeninfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTokeninfo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseTokeninfo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTokeninfo)));
        }

    }
}
