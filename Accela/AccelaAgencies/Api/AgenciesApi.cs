/* 
 * Agencies-b
 *
 * The Agencies API provides agency information as configured in the [Construct Admin Portal](https://admin.accela.com).
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAgencies.Client;
using AccelaAgencies.Model;

namespace AccelaAgencies.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAgenciesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Agencies
        /// </summary>
        /// <remarks>
        /// Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>ResponseAgencyArray</returns>
        ResponseAgencyArray V4GetAgencies (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null);

        /// <summary>
        /// Get All Agencies
        /// </summary>
        /// <remarks>
        /// Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>ApiResponse of ResponseAgencyArray</returns>
        ApiResponse<ResponseAgencyArray> V4GetAgenciesWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null);
        /// <summary>
        /// Get Agency
        /// </summary>
        /// <remarks>
        /// Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseAgency</returns>
        ResponseAgency V4GetAgenciesName (string contentType, string authorization, string xAccelaAppid, string name);

        /// <summary>
        /// Get Agency
        /// </summary>
        /// <remarks>
        /// Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseAgency</returns>
        ApiResponse<ResponseAgency> V4GetAgenciesNameWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name);
        /// <summary>
        /// Get Agency Environments
        /// </summary>
        /// <remarks>
        /// Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseEnvironmentArray</returns>
        ResponseEnvironmentArray V4GetAgenciesNameEnvironments (string contentType, string authorization, string xAccelaAppid, string name);

        /// <summary>
        /// Get Agency Environments
        /// </summary>
        /// <remarks>
        /// Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseEnvironmentArray</returns>
        ApiResponse<ResponseEnvironmentArray> V4GetAgenciesNameEnvironmentsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name);
        /// <summary>
        /// Get Agency Environment Status
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseEnvironmentStatus</returns>
        ResponseEnvironmentStatus V4GetAgenciesNameEnvironmentsEnvStatus (string contentType, string authorization, string xAccelaAppid, string env, string name);

        /// <summary>
        /// Get Agency Environment Status
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseEnvironmentStatus</returns>
        ApiResponse<ResponseEnvironmentStatus> V4GetAgenciesNameEnvironmentsEnvStatusWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string env, string name);
        /// <summary>
        /// Get Agency Logo
        /// </summary>
        /// <remarks>
        /// Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseLogo</returns>
        ResponseLogo V4GetAgenciesNameLogo (string contentType, string authorization, string xAccelaAppid, string name);

        /// <summary>
        /// Get Agency Logo
        /// </summary>
        /// <remarks>
        /// Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseLogo</returns>
        ApiResponse<ResponseLogo> V4GetAgenciesNameLogoWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Agencies
        /// </summary>
        /// <remarks>
        /// Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of ResponseAgencyArray</returns>
        System.Threading.Tasks.Task<ResponseAgencyArray> V4GetAgenciesAsync (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null);

        /// <summary>
        /// Get All Agencies
        /// </summary>
        /// <remarks>
        /// Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAgencyArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAgencyArray>> V4GetAgenciesAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null);
        /// <summary>
        /// Get Agency
        /// </summary>
        /// <remarks>
        /// Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseAgency</returns>
        System.Threading.Tasks.Task<ResponseAgency> V4GetAgenciesNameAsync (string contentType, string authorization, string xAccelaAppid, string name);

        /// <summary>
        /// Get Agency
        /// </summary>
        /// <remarks>
        /// Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseAgency)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAgency>> V4GetAgenciesNameAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name);
        /// <summary>
        /// Get Agency Environments
        /// </summary>
        /// <remarks>
        /// Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseEnvironmentArray</returns>
        System.Threading.Tasks.Task<ResponseEnvironmentArray> V4GetAgenciesNameEnvironmentsAsync (string contentType, string authorization, string xAccelaAppid, string name);

        /// <summary>
        /// Get Agency Environments
        /// </summary>
        /// <remarks>
        /// Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseEnvironmentArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEnvironmentArray>> V4GetAgenciesNameEnvironmentsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name);
        /// <summary>
        /// Get Agency Environment Status
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseEnvironmentStatus</returns>
        System.Threading.Tasks.Task<ResponseEnvironmentStatus> V4GetAgenciesNameEnvironmentsEnvStatusAsync (string contentType, string authorization, string xAccelaAppid, string env, string name);

        /// <summary>
        /// Get Agency Environment Status
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseEnvironmentStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseEnvironmentStatus>> V4GetAgenciesNameEnvironmentsEnvStatusAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string env, string name);
        /// <summary>
        /// Get Agency Logo
        /// </summary>
        /// <remarks>
        /// Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseLogo</returns>
        System.Threading.Tasks.Task<ResponseLogo> V4GetAgenciesNameLogoAsync (string contentType, string authorization, string xAccelaAppid, string name);

        /// <summary>
        /// Get Agency Logo
        /// </summary>
        /// <remarks>
        /// Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </remarks>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseLogo)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseLogo>> V4GetAgenciesNameLogoAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AgenciesApi : IAgenciesApi
    {
        private AccelaAgencies.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AgenciesApi(String basePath)
        {
            this.Configuration = new AccelaAgencies.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAgencies.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// </summary>
        /// <returns></returns>
        public AgenciesApi()
        {
            this.Configuration = AccelaAgencies.Client.Configuration.Default;

            ExceptionFactory = AccelaAgencies.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AgenciesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AgenciesApi(AccelaAgencies.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAgencies.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAgencies.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAgencies.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAgencies.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Agencies Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>ResponseAgencyArray</returns>
        public ResponseAgencyArray V4GetAgencies (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null)
        {
             ApiResponse<ResponseAgencyArray> localVarResponse = V4GetAgenciesWithHttpInfo(contentType, authorization, xAccelaAppid, name, offset, limit, order, direction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Agencies Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>ApiResponse of ResponseAgencyArray</returns>
        public ApiResponse< ResponseAgencyArray > V4GetAgenciesWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgencies");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgencies");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgencies");

            var localVarPath = "/v4/agencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAgencyArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAgencyArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAgencyArray)));
        }

        /// <summary>
        /// Get All Agencies Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of ResponseAgencyArray</returns>
        public async System.Threading.Tasks.Task<ResponseAgencyArray> V4GetAgenciesAsync (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null)
        {
             ApiResponse<ResponseAgencyArray> localVarResponse = await V4GetAgenciesAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, name, offset, limit, order, direction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Agencies Gets all enabled agencies that are configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the object to be queried. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="order"> (optional)</param>
        /// <param name="direction"> (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAgencyArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAgencyArray>> V4GetAgenciesAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name = null, int? offset = null, int? limit = null, string order = null, string direction = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgencies");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgencies");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgencies");

            var localVarPath = "/v4/agencies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (order != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order", order)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgencies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAgencyArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAgencyArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAgencyArray)));
        }

        /// <summary>
        /// Get Agency Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseAgency</returns>
        public ResponseAgency V4GetAgenciesName (string contentType, string authorization, string xAccelaAppid, string name)
        {
             ApiResponse<ResponseAgency> localVarResponse = V4GetAgenciesNameWithHttpInfo(contentType, authorization, xAccelaAppid, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agency Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseAgency</returns>
        public ApiResponse< ResponseAgency > V4GetAgenciesNameWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesName");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesName");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesName");

            var localVarPath = "/v4/agencies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAgency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAgency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAgency)));
        }

        /// <summary>
        /// Get Agency Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseAgency</returns>
        public async System.Threading.Tasks.Task<ResponseAgency> V4GetAgenciesNameAsync (string contentType, string authorization, string xAccelaAppid, string name)
        {
             ApiResponse<ResponseAgency> localVarResponse = await V4GetAgenciesNameAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Agency Gets information for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseAgency)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAgency>> V4GetAgenciesNameAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesName");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesName");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesName");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesName");

            var localVarPath = "/v4/agencies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAgency>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAgency) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAgency)));
        }

        /// <summary>
        /// Get Agency Environments Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseEnvironmentArray</returns>
        public ResponseEnvironmentArray V4GetAgenciesNameEnvironments (string contentType, string authorization, string xAccelaAppid, string name)
        {
             ApiResponse<ResponseEnvironmentArray> localVarResponse = V4GetAgenciesNameEnvironmentsWithHttpInfo(contentType, authorization, xAccelaAppid, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agency Environments Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseEnvironmentArray</returns>
        public ApiResponse< ResponseEnvironmentArray > V4GetAgenciesNameEnvironmentsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesNameEnvironments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesNameEnvironments");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesNameEnvironments");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesNameEnvironments");

            var localVarPath = "/v4/agencies/{name}/environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesNameEnvironments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEnvironmentArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEnvironmentArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEnvironmentArray)));
        }

        /// <summary>
        /// Get Agency Environments Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseEnvironmentArray</returns>
        public async System.Threading.Tasks.Task<ResponseEnvironmentArray> V4GetAgenciesNameEnvironmentsAsync (string contentType, string authorization, string xAccelaAppid, string name)
        {
             ApiResponse<ResponseEnvironmentArray> localVarResponse = await V4GetAgenciesNameEnvironmentsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Agency Environments Gets the API runtime environments for the specified agency, including the environment&#x27;s API provider and version. The environments are configured on [Construct Admin Portal](https://admin.accela.com) &gt; Agencies &gt; {agencyHost}:AgencyInfo &gt; Environments.    **API Endpoint**:  GET /v4/agencies/{name}/environments  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseEnvironmentArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEnvironmentArray>> V4GetAgenciesNameEnvironmentsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesNameEnvironments");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesNameEnvironments");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesNameEnvironments");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesNameEnvironments");

            var localVarPath = "/v4/agencies/{name}/environments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesNameEnvironments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEnvironmentArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEnvironmentArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEnvironmentArray)));
        }

        /// <summary>
        /// Get Agency Environment Status Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseEnvironmentStatus</returns>
        public ResponseEnvironmentStatus V4GetAgenciesNameEnvironmentsEnvStatus (string contentType, string authorization, string xAccelaAppid, string env, string name)
        {
             ApiResponse<ResponseEnvironmentStatus> localVarResponse = V4GetAgenciesNameEnvironmentsEnvStatusWithHttpInfo(contentType, authorization, xAccelaAppid, env, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agency Environment Status Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseEnvironmentStatus</returns>
        public ApiResponse< ResponseEnvironmentStatus > V4GetAgenciesNameEnvironmentsEnvStatusWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string env, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'env' is set
            if (env == null)
                throw new ApiException(400, "Missing required parameter 'env' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");

            var localVarPath = "/v4/agencies/{name}/environments/{env}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (env != null) localVarPathParams.Add("env", this.Configuration.ApiClient.ParameterToString(env)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesNameEnvironmentsEnvStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEnvironmentStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEnvironmentStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEnvironmentStatus)));
        }

        /// <summary>
        /// Get Agency Environment Status Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseEnvironmentStatus</returns>
        public async System.Threading.Tasks.Task<ResponseEnvironmentStatus> V4GetAgenciesNameEnvironmentsEnvStatusAsync (string contentType, string authorization, string xAccelaAppid, string env, string name)
        {
             ApiResponse<ResponseEnvironmentStatus> localVarResponse = await V4GetAgenciesNameEnvironmentsEnvStatusAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, env, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Agency Environment Status Gets the status of the specified agency environment. If the environment is unavailable or has been disabled on the [Construct Admin Portal](https://admin.accela.com), \&quot;isAvailable\&quot;:\&quot;false\&quot; is returned. If Accela Gateway is unreachable, the Get Environment Status API returns 500.  **API Endpoint**: GET /v4/agencies/{name}/environments/{env}/status   **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="env">The name of the environment to be queried.</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseEnvironmentStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseEnvironmentStatus>> V4GetAgenciesNameEnvironmentsEnvStatusAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string env, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'env' is set
            if (env == null)
                throw new ApiException(400, "Missing required parameter 'env' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesNameEnvironmentsEnvStatus");

            var localVarPath = "/v4/agencies/{name}/environments/{env}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (env != null) localVarPathParams.Add("env", this.Configuration.ApiClient.ParameterToString(env)); // path parameter
            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesNameEnvironmentsEnvStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseEnvironmentStatus>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseEnvironmentStatus) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseEnvironmentStatus)));
        }

        /// <summary>
        /// Get Agency Logo Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ResponseLogo</returns>
        public ResponseLogo V4GetAgenciesNameLogo (string contentType, string authorization, string xAccelaAppid, string name)
        {
             ApiResponse<ResponseLogo> localVarResponse = V4GetAgenciesNameLogoWithHttpInfo(contentType, authorization, xAccelaAppid, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Agency Logo Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>ApiResponse of ResponseLogo</returns>
        public ApiResponse< ResponseLogo > V4GetAgenciesNameLogoWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesNameLogo");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesNameLogo");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesNameLogo");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesNameLogo");

            var localVarPath = "/v4/agencies/{name}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesNameLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseLogo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseLogo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseLogo)));
        }

        /// <summary>
        /// Get Agency Logo Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ResponseLogo</returns>
        public async System.Threading.Tasks.Task<ResponseLogo> V4GetAgenciesNameLogoAsync (string contentType, string authorization, string xAccelaAppid, string name)
        {
             ApiResponse<ResponseLogo> localVarResponse = await V4GetAgenciesNameLogoAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Agency Logo Gets the logo for the specified agency, as configured on the [Construct Admin Portal](https://admin.accela.com).    **API Endpoint**:  GET /v4/agencies/{name}/logo  **Scope**:  agencies   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: All  
        /// </summary>
        /// <exception cref="AccelaAgencies.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="name">The name of the agency to be queried.</param>
        /// <returns>Task of ApiResponse (ResponseLogo)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseLogo>> V4GetAgenciesNameLogoAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string name)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AgenciesApi->V4GetAgenciesNameLogo");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AgenciesApi->V4GetAgenciesNameLogo");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling AgenciesApi->V4GetAgenciesNameLogo");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling AgenciesApi->V4GetAgenciesNameLogo");

            var localVarPath = "/v4/agencies/{name}/logo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAgenciesNameLogo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseLogo>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseLogo) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseLogo)));
        }

    }
}
