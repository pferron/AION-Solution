/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// GISObjectModel
    /// </summary>
    [DataContract]
    public partial class GISObjectModel :  IEquatable<GISObjectModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GISObjectModel" /> class.
        /// </summary>
        /// <param name="gisId">The GIS object id..</param>
        /// <param name="layerId">The map layer id..</param>
        /// <param name="serviceId">The map service id..</param>
        public GISObjectModel(string gisId = default(string), string layerId = default(string), string serviceId = default(string))
        {
            this.GisId = gisId;
            this.LayerId = layerId;
            this.ServiceId = serviceId;
        }
        
        /// <summary>
        /// The GIS object id.
        /// </summary>
        /// <value>The GIS object id.</value>
        [DataMember(Name="gisId", EmitDefaultValue=false)]
        public string GisId { get; set; }

        /// <summary>
        /// The map layer id.
        /// </summary>
        /// <value>The map layer id.</value>
        [DataMember(Name="layerId", EmitDefaultValue=false)]
        public string LayerId { get; set; }

        /// <summary>
        /// The map service id.
        /// </summary>
        /// <value>The map service id.</value>
        [DataMember(Name="serviceId", EmitDefaultValue=false)]
        public string ServiceId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GISObjectModel {\n");
            sb.Append("  GisId: ").Append(GisId).Append("\n");
            sb.Append("  LayerId: ").Append(LayerId).Append("\n");
            sb.Append("  ServiceId: ").Append(ServiceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GISObjectModel);
        }

        /// <summary>
        /// Returns true if GISObjectModel instances are equal
        /// </summary>
        /// <param name="input">Instance of GISObjectModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GISObjectModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GisId == input.GisId ||
                    (this.GisId != null &&
                    this.GisId.Equals(input.GisId))
                ) && 
                (
                    this.LayerId == input.LayerId ||
                    (this.LayerId != null &&
                    this.LayerId.Equals(input.LayerId))
                ) && 
                (
                    this.ServiceId == input.ServiceId ||
                    (this.ServiceId != null &&
                    this.ServiceId.Equals(input.ServiceId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GisId != null)
                    hashCode = hashCode * 59 + this.GisId.GetHashCode();
                if (this.LayerId != null)
                    hashCode = hashCode * 59 + this.LayerId.GetHashCode();
                if (this.ServiceId != null)
                    hashCode = hashCode * 59 + this.ServiceId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
