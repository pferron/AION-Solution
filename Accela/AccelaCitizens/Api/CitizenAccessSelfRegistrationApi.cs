/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaCitizens.Client;
using AccelaCitizens.Model;

namespace AccelaCitizens.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICitizenAccessSelfRegistrationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete My Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        ResponseResultCountModel V4DeleteCivicidCitizenaccessContactsIds (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete My Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        ApiResponse<ResponseResultCountModel> V4DeleteCivicidCitizenaccessContactsIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Get My Contacts
        /// </summary>
        /// <remarks>
        /// Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>CitizenContactModel</returns>
        CitizenContactModel V4GetCivicidCitizenaccessContacts (string contentType, string authorization, string fields = null, string lang = null);

        /// <summary>
        /// Get My Contacts
        /// </summary>
        /// <remarks>
        /// Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of CitizenContactModel</returns>
        ApiResponse<CitizenContactModel> V4GetCivicidCitizenaccessContactsWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null);
        /// <summary>
        /// Get My Citizen Profile
        /// </summary>
        /// <remarks>
        /// Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>CitizenProfileModel</returns>
        CitizenProfileModel V4GetCivicidCitizenaccessProfile (string contentType, string authorization, string fields = null, string lang = null);

        /// <summary>
        /// Get My Citizen Profile
        /// </summary>
        /// <remarks>
        /// Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of CitizenProfileModel</returns>
        ApiResponse<CitizenProfileModel> V4GetCivicidCitizenaccessProfileWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null);
        /// <summary>
        /// Register Citizen
        /// </summary>
        /// <remarks>
        /// Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserRegisterModel</returns>
        ResponsePublicUserRegisterModel V4PostCitizenaccessRegister (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null);

        /// <summary>
        /// Register Citizen
        /// </summary>
        /// <remarks>
        /// Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserRegisterModel</returns>
        ApiResponse<ResponsePublicUserRegisterModel> V4PostCitizenaccessRegisterWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null);
        /// <summary>
        /// Create My Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        ResponseResultCountModel V4PostCivicidCitizenaccessContacts (string contentType, string authorization, List<string> body, string lang = null);

        /// <summary>
        /// Create My Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        ApiResponse<ResponseResultCountModel> V4PostCivicidCitizenaccessContactsWithHttpInfo (string contentType, string authorization, List<string> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete My Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        System.Threading.Tasks.Task<ResponseResultCountModel> V4DeleteCivicidCitizenaccessContactsIdsAsync (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete My Contacts
        /// </summary>
        /// <remarks>
        /// Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4DeleteCivicidCitizenaccessContactsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Get My Contacts
        /// </summary>
        /// <remarks>
        /// Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of CitizenContactModel</returns>
        System.Threading.Tasks.Task<CitizenContactModel> V4GetCivicidCitizenaccessContactsAsync (string contentType, string authorization, string fields = null, string lang = null);

        /// <summary>
        /// Get My Contacts
        /// </summary>
        /// <remarks>
        /// Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (CitizenContactModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CitizenContactModel>> V4GetCivicidCitizenaccessContactsAsyncWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null);
        /// <summary>
        /// Get My Citizen Profile
        /// </summary>
        /// <remarks>
        /// Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of CitizenProfileModel</returns>
        System.Threading.Tasks.Task<CitizenProfileModel> V4GetCivicidCitizenaccessProfileAsync (string contentType, string authorization, string fields = null, string lang = null);

        /// <summary>
        /// Get My Citizen Profile
        /// </summary>
        /// <remarks>
        /// Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (CitizenProfileModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CitizenProfileModel>> V4GetCivicidCitizenaccessProfileAsyncWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null);
        /// <summary>
        /// Register Citizen
        /// </summary>
        /// <remarks>
        /// Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserRegisterModel</returns>
        System.Threading.Tasks.Task<ResponsePublicUserRegisterModel> V4PostCitizenaccessRegisterAsync (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null);

        /// <summary>
        /// Register Citizen
        /// </summary>
        /// <remarks>
        /// Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserRegisterModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserRegisterModel>> V4PostCitizenaccessRegisterAsyncWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null);
        /// <summary>
        /// Create My Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        System.Threading.Tasks.Task<ResponseResultCountModel> V4PostCivicidCitizenaccessContactsAsync (string contentType, string authorization, List<string> body, string lang = null);

        /// <summary>
        /// Create My Contacts
        /// </summary>
        /// <remarks>
        /// Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4PostCivicidCitizenaccessContactsAsyncWithHttpInfo (string contentType, string authorization, List<string> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CitizenAccessSelfRegistrationApi : ICitizenAccessSelfRegistrationApi
    {
        private AccelaCitizens.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessSelfRegistrationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CitizenAccessSelfRegistrationApi(String basePath)
        {
            this.Configuration = new AccelaCitizens.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessSelfRegistrationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CitizenAccessSelfRegistrationApi(AccelaCitizens.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaCitizens.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaCitizens.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaCitizens.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete My Contacts Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        public ResponseResultCountModel V4DeleteCivicidCitizenaccessContactsIds (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = V4DeleteCivicidCitizenaccessContactsIdsWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete My Contacts Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        public ApiResponse< ResponseResultCountModel > V4DeleteCivicidCitizenaccessContactsIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4DeleteCivicidCitizenaccessContactsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4DeleteCivicidCitizenaccessContactsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling CitizenAccessSelfRegistrationApi->V4DeleteCivicidCitizenaccessContactsIds");

            var localVarPath = "/v4/citizenaccess/contacts/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteCivicidCitizenaccessContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Delete My Contacts Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultCountModel> V4DeleteCivicidCitizenaccessContactsIdsAsync (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = await V4DeleteCivicidCitizenaccessContactsIdsAsyncWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete My Contacts Deletes the specified contacts from the currently logged in user.    **API Endpoint**:  DELETE /v4/citizenaccess/contacts/{ids}   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma-delimited IDs of contacts to delete.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4DeleteCivicidCitizenaccessContactsIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4DeleteCivicidCitizenaccessContactsIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4DeleteCivicidCitizenaccessContactsIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling CitizenAccessSelfRegistrationApi->V4DeleteCivicidCitizenaccessContactsIds");

            var localVarPath = "/v4/citizenaccess/contacts/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteCivicidCitizenaccessContactsIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Get My Contacts Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>CitizenContactModel</returns>
        public CitizenContactModel V4GetCivicidCitizenaccessContacts (string contentType, string authorization, string fields = null, string lang = null)
        {
             ApiResponse<CitizenContactModel> localVarResponse = V4GetCivicidCitizenaccessContactsWithHttpInfo(contentType, authorization, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get My Contacts Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of CitizenContactModel</returns>
        public ApiResponse< CitizenContactModel > V4GetCivicidCitizenaccessContactsWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessContacts");

            var localVarPath = "/v4/citizenaccess/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCivicidCitizenaccessContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitizenContactModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CitizenContactModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitizenContactModel)));
        }

        /// <summary>
        /// Get My Contacts Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of CitizenContactModel</returns>
        public async System.Threading.Tasks.Task<CitizenContactModel> V4GetCivicidCitizenaccessContactsAsync (string contentType, string authorization, string fields = null, string lang = null)
        {
             ApiResponse<CitizenContactModel> localVarResponse = await V4GetCivicidCitizenaccessContactsAsyncWithHttpInfo(contentType, authorization, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get My Contacts Gets the contacts for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (CitizenContactModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CitizenContactModel>> V4GetCivicidCitizenaccessContactsAsyncWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessContacts");

            var localVarPath = "/v4/citizenaccess/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCivicidCitizenaccessContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitizenContactModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CitizenContactModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitizenContactModel)));
        }

        /// <summary>
        /// Get My Citizen Profile Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>CitizenProfileModel</returns>
        public CitizenProfileModel V4GetCivicidCitizenaccessProfile (string contentType, string authorization, string fields = null, string lang = null)
        {
             ApiResponse<CitizenProfileModel> localVarResponse = V4GetCivicidCitizenaccessProfileWithHttpInfo(contentType, authorization, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get My Citizen Profile Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of CitizenProfileModel</returns>
        public ApiResponse< CitizenProfileModel > V4GetCivicidCitizenaccessProfileWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessProfile");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessProfile");

            var localVarPath = "/v4/citizenaccess/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCivicidCitizenaccessProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitizenProfileModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CitizenProfileModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitizenProfileModel)));
        }

        /// <summary>
        /// Get My Citizen Profile Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of CitizenProfileModel</returns>
        public async System.Threading.Tasks.Task<CitizenProfileModel> V4GetCivicidCitizenaccessProfileAsync (string contentType, string authorization, string fields = null, string lang = null)
        {
             ApiResponse<CitizenProfileModel> localVarResponse = await V4GetCivicidCitizenaccessProfileAsyncWithHttpInfo(contentType, authorization, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get My Citizen Profile Gets the profile for the currently logged in citizen user.    **API Endpoint**:  GET /v4/citizenaccess/profile   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (CitizenProfileModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CitizenProfileModel>> V4GetCivicidCitizenaccessProfileAsyncWithHttpInfo (string contentType, string authorization, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessProfile");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4GetCivicidCitizenaccessProfile");

            var localVarPath = "/v4/citizenaccess/profile";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCivicidCitizenaccessProfile", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CitizenProfileModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CitizenProfileModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CitizenProfileModel)));
        }

        /// <summary>
        /// Register Citizen Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserRegisterModel</returns>
        public ResponsePublicUserRegisterModel V4PostCitizenaccessRegister (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserRegisterModel> localVarResponse = V4PostCitizenaccessRegisterWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register Citizen Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserRegisterModel</returns>
        public ApiResponse< ResponsePublicUserRegisterModel > V4PostCitizenaccessRegisterWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4PostCitizenaccessRegister");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4PostCitizenaccessRegister");

            var localVarPath = "/v4/citizenaccess/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizenaccessRegister", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserRegisterModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserRegisterModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserRegisterModel)));
        }

        /// <summary>
        /// Register Citizen Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserRegisterModel</returns>
        public async System.Threading.Tasks.Task<ResponsePublicUserRegisterModel> V4PostCitizenaccessRegisterAsync (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserRegisterModel> localVarResponse = await V4PostCitizenaccessRegisterAsyncWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register Citizen Registers a new citizen user. The agency name is required in the HTTP header x-accela-agency. The userName to be registered is required. Note: 7.3.3.4 version supports only 1 contact in the request contacts[]. Multiple contacts will be supported in a future release.    **API Endpoint**:  POST /v4/citizenaccess/register   **Scope**:  users   **App Type**:  All   **Authorization Type**:  No authorization required   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">The user profile to register. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserRegisterModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserRegisterModel>> V4PostCitizenaccessRegisterAsyncWithHttpInfo (string contentType, string authorization, PublicUserRegisterModel body = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4PostCitizenaccessRegister");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4PostCitizenaccessRegister");

            var localVarPath = "/v4/citizenaccess/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizenaccessRegister", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserRegisterModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserRegisterModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserRegisterModel)));
        }

        /// <summary>
        /// Create My Contacts Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        public ResponseResultCountModel V4PostCivicidCitizenaccessContacts (string contentType, string authorization, List<string> body, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = V4PostCivicidCitizenaccessContactsWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create My Contacts Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        public ApiResponse< ResponseResultCountModel > V4PostCivicidCitizenaccessContactsWithHttpInfo (string contentType, string authorization, List<string> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4PostCivicidCitizenaccessContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4PostCivicidCitizenaccessContacts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessSelfRegistrationApi->V4PostCivicidCitizenaccessContacts");

            var localVarPath = "/v4/citizenaccess/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCivicidCitizenaccessContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Create My Contacts Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultCountModel> V4PostCivicidCitizenaccessContactsAsync (string contentType, string authorization, List<string> body, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = await V4PostCivicidCitizenaccessContactsAsyncWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create My Contacts Adds contacts to the currently logged in citizen user.    **API Endpoint**:  POST /v4/citizenaccess/contacts   **Scope**:  users   **App Type**:  Citizen   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.3.4  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">An array of reference contact IDs to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4PostCivicidCitizenaccessContactsAsyncWithHttpInfo (string contentType, string authorization, List<string> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessSelfRegistrationApi->V4PostCivicidCitizenaccessContacts");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessSelfRegistrationApi->V4PostCivicidCitizenaccessContacts");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessSelfRegistrationApi->V4PostCivicidCitizenaccessContacts");

            var localVarPath = "/v4/citizenaccess/contacts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCivicidCitizenaccessContacts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

    }
}
