using AION.BL;
using AION.BL.Adapters;
using AION.BL.BusinessObjects;
using AION.Estimator.Engine.BusinessEntities;
using AION.Estimator.Engine.BusinessObjects;
using AION.Manager.BusinessObjects;
using Meck.Logging;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace AION.Manager.Adapters
{
    public class ReportingAdapter : BaseManagerAdapter
    {
        //get the scheduling lead time report
        public bool GenerateSchedulingLeadTimeData(int userId)
        {
            try
            {
                var bo = new BusinessObjects.SchedulingLeadTimeReportBO();
                bool ret = bo.GenerateSchedulingLeadTimeData();

                string csvEmails = "";
                if (userId == 1)
                {
                    //generated by the report function 
                    //get the ITS support group as the email string
                    //get all the users with role ITS Support Group
                    int systemroleid = new SystemRoleModelBO().BaseList.Where(x => x.SrcSystemValTxt == "ITS_Support_Group").FirstOrDefault().ID;
                    List<UserBE> userBEs = new UserBO().GetListBySystemRoleID(systemroleid);
                    foreach (UserBE user in userBEs)
                    {
                        csvEmails += user.Email + ";";
                    }
                }
                else
                {

                    //generate email
                    UserIdentity user = new UserIdentityModelBO().GetInstance(userId);
                    csvEmails = user.Email;
                }

                //send email
                bool sendEmail = new EmailAdapter().SendSchedulingLeadTimeReportDataAvailable(csvEmails, System.DateTime.Now.ToUniversalTime());

                return true;

            }
            catch (System.Exception ex)
            {
                string errorMessage = "Error in ReportingAdapter.GetSchedulingLeadTimeReport - " + ex.Message;

                var logging = Logger.LogMessageAsync(Enums.LoggingType.Exception, MethodBase.GetCurrentMethod(), errorMessage,
                    string.Empty, string.Empty, string.Empty);
                throw;
            }
        }


    }
}