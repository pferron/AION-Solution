/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// PublicUserRegisterModelResponseV4PostCitizenaccessRegister
    /// </summary>
    [DataContract]
    public partial class PublicUserRegisterModelResponseV4PostCitizenaccessRegister :  IEquatable<PublicUserRegisterModelResponseV4PostCitizenaccessRegister>, IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RoleEnum
        {
            
            /// <summary>
            /// Enum CONTRACTINSPECTOR for value: CONTRACT_INSPECTOR
            /// </summary>
            [EnumMember(Value = "CONTRACT_INSPECTOR")]
            CONTRACTINSPECTOR = 1,
            
            /// <summary>
            /// Enum CITIZEN for value: CITIZEN
            /// </summary>
            [EnumMember(Value = "CITIZEN")]
            CITIZEN = 2,
            
            /// <summary>
            /// Enum AUTHAGENTCLERK for value: AUTH_AGENT_CLERK
            /// </summary>
            [EnumMember(Value = "AUTH_AGENT_CLERK")]
            AUTHAGENTCLERK = 3,
            
            /// <summary>
            /// Enum AUTHAGENT for value: AUTH_AGENT
            /// </summary>
            [EnumMember(Value = "AUTH_AGENT")]
            AUTHAGENT = 4,
            
            /// <summary>
            /// Enum SELFCERTIFIEDINSPECTOR for value: SELF_CERTIFIED_INSPECTOR
            /// </summary>
            [EnumMember(Value = "SELF_CERTIFIED_INSPECTOR")]
            SELFCERTIFIEDINSPECTOR = 5
        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public RoleEnum? Role { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PublicUserRegisterModelResponseV4PostCitizenaccessRegister" /> class.
        /// </summary>
        /// <param name="associatedLicenseIds">associatedLicenseIds.</param>
        /// <param name="cellPhone">cellPhone.</param>
        /// <param name="contacts">contacts.</param>
        /// <param name="email">email.</param>
        /// <param name="id">id.</param>
        /// <param name="password">password.</param>
        /// <param name="questions">questions.</param>
        /// <param name="receiveSMS">receiveSMS.</param>
        /// <param name="role">role.</param>
        /// <param name="servProvCode">servProvCode.</param>
        /// <param name="userName">userName.</param>
        public PublicUserRegisterModelResponseV4PostCitizenaccessRegister(List<long?> associatedLicenseIds = default(List<long?>), string cellPhone = default(string), List<PeopleModelResponseV4PostCitizenaccessRegister> contacts = default(List<PeopleModelResponseV4PostCitizenaccessRegister>), string email = default(string), long? id = default(long?), string password = default(string), List<PublicUserQuestionModel> questions = default(List<PublicUserQuestionModel>), string receiveSMS = default(string), RoleEnum? role = default(RoleEnum?), string servProvCode = default(string), string userName = default(string))
        {
            this.AssociatedLicenseIds = associatedLicenseIds;
            this.CellPhone = cellPhone;
            this.Contacts = contacts;
            this.Email = email;
            this.Id = id;
            this.Password = password;
            this.Questions = questions;
            this.ReceiveSMS = receiveSMS;
            this.Role = role;
            this.ServProvCode = servProvCode;
            this.UserName = userName;
        }
        
        /// <summary>
        /// Gets or Sets AssociatedLicenseIds
        /// </summary>
        [DataMember(Name="associatedLicenseIds", EmitDefaultValue=false)]
        public List<long?> AssociatedLicenseIds { get; set; }

        /// <summary>
        /// Gets or Sets CellPhone
        /// </summary>
        [DataMember(Name="cellPhone", EmitDefaultValue=false)]
        public string CellPhone { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<PeopleModelResponseV4PostCitizenaccessRegister> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Questions
        /// </summary>
        [DataMember(Name="questions", EmitDefaultValue=false)]
        public List<PublicUserQuestionModel> Questions { get; set; }

        /// <summary>
        /// Gets or Sets ReceiveSMS
        /// </summary>
        [DataMember(Name="receiveSMS", EmitDefaultValue=false)]
        public string ReceiveSMS { get; set; }


        /// <summary>
        /// Gets or Sets ServProvCode
        /// </summary>
        [DataMember(Name="servProvCode", EmitDefaultValue=false)]
        public string ServProvCode { get; set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [DataMember(Name="userName", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PublicUserRegisterModelResponseV4PostCitizenaccessRegister {\n");
            sb.Append("  AssociatedLicenseIds: ").Append(AssociatedLicenseIds).Append("\n");
            sb.Append("  CellPhone: ").Append(CellPhone).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  ReceiveSMS: ").Append(ReceiveSMS).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  ServProvCode: ").Append(ServProvCode).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PublicUserRegisterModelResponseV4PostCitizenaccessRegister);
        }

        /// <summary>
        /// Returns true if PublicUserRegisterModelResponseV4PostCitizenaccessRegister instances are equal
        /// </summary>
        /// <param name="input">Instance of PublicUserRegisterModelResponseV4PostCitizenaccessRegister to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PublicUserRegisterModelResponseV4PostCitizenaccessRegister input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AssociatedLicenseIds == input.AssociatedLicenseIds ||
                    this.AssociatedLicenseIds != null &&
                    this.AssociatedLicenseIds.SequenceEqual(input.AssociatedLicenseIds)
                ) && 
                (
                    this.CellPhone == input.CellPhone ||
                    (this.CellPhone != null &&
                    this.CellPhone.Equals(input.CellPhone))
                ) && 
                (
                    this.Contacts == input.Contacts ||
                    this.Contacts != null &&
                    this.Contacts.SequenceEqual(input.Contacts)
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.Questions == input.Questions ||
                    this.Questions != null &&
                    this.Questions.SequenceEqual(input.Questions)
                ) && 
                (
                    this.ReceiveSMS == input.ReceiveSMS ||
                    (this.ReceiveSMS != null &&
                    this.ReceiveSMS.Equals(input.ReceiveSMS))
                ) && 
                (
                    this.Role == input.Role ||
                    (this.Role != null &&
                    this.Role.Equals(input.Role))
                ) && 
                (
                    this.ServProvCode == input.ServProvCode ||
                    (this.ServProvCode != null &&
                    this.ServProvCode.Equals(input.ServProvCode))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AssociatedLicenseIds != null)
                    hashCode = hashCode * 59 + this.AssociatedLicenseIds.GetHashCode();
                if (this.CellPhone != null)
                    hashCode = hashCode * 59 + this.CellPhone.GetHashCode();
                if (this.Contacts != null)
                    hashCode = hashCode * 59 + this.Contacts.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.Questions != null)
                    hashCode = hashCode * 59 + this.Questions.GetHashCode();
                if (this.ReceiveSMS != null)
                    hashCode = hashCode * 59 + this.ReceiveSMS.GetHashCode();
                if (this.Role != null)
                    hashCode = hashCode * 59 + this.Role.GetHashCode();
                if (this.ServProvCode != null)
                    hashCode = hashCode * 59 + this.ServProvCode.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
