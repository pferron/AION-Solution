/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaSettings.Client;
using AccelaSettings.Model;

namespace AccelaSettings.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISettingsAssetTypesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Asset Class Types
        /// </summary>
        /// <remarks>
        /// Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 V4GetSettingsAssettypesClassTypes (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Class Types
        /// </summary>
        /// <remarks>
        /// Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> V4GetSettingsAssettypesClassTypesWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Asset Rating Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRatingTypeModelArray</returns>
        ResponseRatingTypeModelArray V4GetSettingsAssettypesRatingTypes (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Rating Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRatingTypeModelArray</returns>
        ApiResponse<ResponseRatingTypeModelArray> V4GetSettingsAssettypesRatingTypesWithHttpInfo (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Record Types for Asset Type
        /// </summary>
        /// <remarks>
        /// Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAssetRecordTypeModelArray</returns>
        ResponseAssetRecordTypeModelArray V4GetSettingsAssettypesRecordtypes (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Record Types for Asset Type
        /// </summary>
        /// <remarks>
        /// Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAssetRecordTypeModelArray</returns>
        ApiResponse<ResponseAssetRecordTypeModelArray> V4GetSettingsAssettypesRecordtypesWithHttpInfo (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Asset Types
        /// </summary>
        /// <remarks>
        /// Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAssetTypeModelArray</returns>
        ResponseAssetTypeModelArray V4GetSettingsAssettypesTypes (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Types
        /// </summary>
        /// <remarks>
        /// Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAssetTypeModelArray</returns>
        ApiResponse<ResponseAssetTypeModelArray> V4GetSettingsAssettypesTypesWithHttpInfo (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Asset Usage Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAssetUnitTypeModelArray</returns>
        ResponseAssetUnitTypeModelArray V4GetSettingsAssettypesUsageTypes (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Usage Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAssetUnitTypeModelArray</returns>
        ApiResponse<ResponseAssetUnitTypeModelArray> V4GetSettingsAssettypesUsageTypesWithHttpInfo (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Asset Class Types
        /// </summary>
        /// <remarks>
        /// Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> V4GetSettingsAssettypesClassTypesAsync (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Class Types
        /// </summary>
        /// <remarks>
        /// Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V4GetSettingsAssettypesClassTypesAsyncWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Asset Rating Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRatingTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseRatingTypeModelArray> V4GetSettingsAssettypesRatingTypesAsync (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Rating Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRatingTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseRatingTypeModelArray>> V4GetSettingsAssettypesRatingTypesAsyncWithHttpInfo (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Record Types for Asset Type
        /// </summary>
        /// <remarks>
        /// Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAssetRecordTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseAssetRecordTypeModelArray> V4GetSettingsAssettypesRecordtypesAsync (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Record Types for Asset Type
        /// </summary>
        /// <remarks>
        /// Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAssetRecordTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAssetRecordTypeModelArray>> V4GetSettingsAssettypesRecordtypesAsyncWithHttpInfo (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Asset Types
        /// </summary>
        /// <remarks>
        /// Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAssetTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseAssetTypeModelArray> V4GetSettingsAssettypesTypesAsync (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Types
        /// </summary>
        /// <remarks>
        /// Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAssetTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAssetTypeModelArray>> V4GetSettingsAssettypesTypesAsyncWithHttpInfo (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Asset Usage Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAssetUnitTypeModelArray</returns>
        System.Threading.Tasks.Task<ResponseAssetUnitTypeModelArray> V4GetSettingsAssettypesUsageTypesAsync (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Asset Usage Types
        /// </summary>
        /// <remarks>
        /// Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </remarks>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAssetUnitTypeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAssetUnitTypeModelArray>> V4GetSettingsAssettypesUsageTypesAsyncWithHttpInfo (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SettingsAssetTypesApi : ISettingsAssetTypesApi
    {
        private AccelaSettings.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsAssetTypesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SettingsAssetTypesApi(String basePath)
        {
            this.Configuration = new AccelaSettings.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SettingsAssetTypesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SettingsAssetTypesApi(AccelaSettings.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaSettings.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaSettings.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaSettings.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaSettings.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Asset Class Types Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 V4GetSettingsAssettypesClassTypes (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = V4GetSettingsAssettypesClassTypesWithHttpInfo(contentType, authorization, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Asset Class Types Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse< InlineResponse200 > V4GetSettingsAssettypesClassTypesWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesClassTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesClassTypes");

            var localVarPath = "/v4/settings/assettypes/classTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesClassTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get All Asset Class Types Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> V4GetSettingsAssettypesClassTypesAsync (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<InlineResponse200> localVarResponse = await V4GetSettingsAssettypesClassTypesAsyncWithHttpInfo(contentType, authorization, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Asset Class Types Returns all out-of-the-box asset class types in Civic Platform. **API Endpoint**:  GET /v4/settings/assettypes/classTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> V4GetSettingsAssettypesClassTypesAsyncWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesClassTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesClassTypes");

            var localVarPath = "/v4/settings/assettypes/classTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesClassTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse200>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse200) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse200)));
        }

        /// <summary>
        /// Get All Asset Rating Types Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseRatingTypeModelArray</returns>
        public ResponseRatingTypeModelArray V4GetSettingsAssettypesRatingTypes (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRatingTypeModelArray> localVarResponse = V4GetSettingsAssettypesRatingTypesWithHttpInfo(contentType, assetGroup, assetType, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Asset Rating Types Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseRatingTypeModelArray</returns>
        public ApiResponse< ResponseRatingTypeModelArray > V4GetSettingsAssettypesRatingTypesWithHttpInfo (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRatingTypes");
            // verify the required parameter 'assetGroup' is set
            if (assetGroup == null)
                throw new ApiException(400, "Missing required parameter 'assetGroup' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRatingTypes");
            // verify the required parameter 'assetType' is set
            if (assetType == null)
                throw new ApiException(400, "Missing required parameter 'assetType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRatingTypes");

            var localVarPath = "/v4/settings/assettypes/ratingTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesRatingTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRatingTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRatingTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRatingTypeModelArray)));
        }

        /// <summary>
        /// Get All Asset Rating Types Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseRatingTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseRatingTypeModelArray> V4GetSettingsAssettypesRatingTypesAsync (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseRatingTypeModelArray> localVarResponse = await V4GetSettingsAssettypesRatingTypesAsyncWithHttpInfo(contentType, assetGroup, assetType, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Asset Rating Types Returns all configured asset rating types. Specify both {assetType} and {assetGroup} parameters to filter by asset type and asset group. **API Endpoint**:  GET /v4/settings/assettypes/ratingTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types).</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseRatingTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseRatingTypeModelArray>> V4GetSettingsAssettypesRatingTypesAsyncWithHttpInfo (string contentType, string assetGroup, string assetType, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRatingTypes");
            // verify the required parameter 'assetGroup' is set
            if (assetGroup == null)
                throw new ApiException(400, "Missing required parameter 'assetGroup' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRatingTypes");
            // verify the required parameter 'assetType' is set
            if (assetType == null)
                throw new ApiException(400, "Missing required parameter 'assetType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRatingTypes");

            var localVarPath = "/v4/settings/assettypes/ratingTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesRatingTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseRatingTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseRatingTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseRatingTypeModelArray)));
        }

        /// <summary>
        /// Get All Record Types for Asset Type Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAssetRecordTypeModelArray</returns>
        public ResponseAssetRecordTypeModelArray V4GetSettingsAssettypesRecordtypes (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAssetRecordTypeModelArray> localVarResponse = V4GetSettingsAssettypesRecordtypesWithHttpInfo(contentType, authorization, assetGroup, assetType, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Record Types for Asset Type Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAssetRecordTypeModelArray</returns>
        public ApiResponse< ResponseAssetRecordTypeModelArray > V4GetSettingsAssettypesRecordtypesWithHttpInfo (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRecordtypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRecordtypes");
            // verify the required parameter 'assetGroup' is set
            if (assetGroup == null)
                throw new ApiException(400, "Missing required parameter 'assetGroup' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRecordtypes");

            var localVarPath = "/v4/settings/assettypes/recordtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesRecordtypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAssetRecordTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAssetRecordTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAssetRecordTypeModelArray)));
        }

        /// <summary>
        /// Get All Record Types for Asset Type Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAssetRecordTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseAssetRecordTypeModelArray> V4GetSettingsAssettypesRecordtypesAsync (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAssetRecordTypeModelArray> localVarResponse = await V4GetSettingsAssettypesRecordtypesAsyncWithHttpInfo(contentType, authorization, assetGroup, assetType, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Record Types for Asset Type Returns all configured record types for a given asset type or asset group. **API Endpoint**:  GET /v4/settings/assettypes/recordtypes  **Scope**:  settings  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. For example: Water or Street. An Asset Group is an agency-defined collection of objects the agency owns or maintains.</param>
        /// <param name="assetType">Filter by type of asset. For example: Hydrant or Manhole. An Asset Type is an agencydefined classification of similar objects that share the same standard asset attributes. Related asset types belong to an asset group, and multiple asset types can share the same Class Type. See [Get All Asset Types](./api-settings.html#operation/v4.get.settings.assettypes.types). (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAssetRecordTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAssetRecordTypeModelArray>> V4GetSettingsAssettypesRecordtypesAsyncWithHttpInfo (string contentType, string authorization, string assetGroup, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRecordtypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRecordtypes");
            // verify the required parameter 'assetGroup' is set
            if (assetGroup == null)
                throw new ApiException(400, "Missing required parameter 'assetGroup' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesRecordtypes");

            var localVarPath = "/v4/settings/assettypes/recordtypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesRecordtypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAssetRecordTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAssetRecordTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAssetRecordTypeModelArray)));
        }

        /// <summary>
        /// Get All Asset Types Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAssetTypeModelArray</returns>
        public ResponseAssetTypeModelArray V4GetSettingsAssettypesTypes (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAssetTypeModelArray> localVarResponse = V4GetSettingsAssettypesTypesWithHttpInfo(contentType, authorization, assetGroup, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Asset Types Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAssetTypeModelArray</returns>
        public ApiResponse< ResponseAssetTypeModelArray > V4GetSettingsAssettypesTypesWithHttpInfo (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesTypes");

            var localVarPath = "/v4/settings/assettypes/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAssetTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAssetTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAssetTypeModelArray)));
        }

        /// <summary>
        /// Get All Asset Types Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAssetTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseAssetTypeModelArray> V4GetSettingsAssettypesTypesAsync (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAssetTypeModelArray> localVarResponse = await V4GetSettingsAssettypesTypesAsyncWithHttpInfo(contentType, authorization, assetGroup, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Asset Types Returns all asset types, which can be filtered by asset group. **API Endpoint**: GET /v4/settings/assettypes/types  **Scope** : assets **App Type** : Agency **Authorization Type** : Access token **Civic Platform version** : 9.0.0  
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="assetGroup">Filter by asset group. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAssetTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAssetTypeModelArray>> V4GetSettingsAssettypesTypesAsyncWithHttpInfo (string contentType, string authorization, string assetGroup = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesTypes");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesTypes");

            var localVarPath = "/v4/settings/assettypes/types";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAssetTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAssetTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAssetTypeModelArray)));
        }

        /// <summary>
        /// Get All Asset Usage Types Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAssetUnitTypeModelArray</returns>
        public ResponseAssetUnitTypeModelArray V4GetSettingsAssettypesUsageTypes (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAssetUnitTypeModelArray> localVarResponse = V4GetSettingsAssettypesUsageTypesWithHttpInfo(contentType, assetGroup, assetType, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Asset Usage Types Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAssetUnitTypeModelArray</returns>
        public ApiResponse< ResponseAssetUnitTypeModelArray > V4GetSettingsAssettypesUsageTypesWithHttpInfo (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesUsageTypes");

            var localVarPath = "/v4/settings/assettypes/usageTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesUsageTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAssetUnitTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAssetUnitTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAssetUnitTypeModelArray)));
        }

        /// <summary>
        /// Get All Asset Usage Types Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAssetUnitTypeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseAssetUnitTypeModelArray> V4GetSettingsAssettypesUsageTypesAsync (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAssetUnitTypeModelArray> localVarResponse = await V4GetSettingsAssettypesUsageTypesAsyncWithHttpInfo(contentType, assetGroup, assetType, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Asset Usage Types Returns all configured asset usage types. **API Endpoint**:  GET /v4/settings/assettypes/usageTypes  **Scope**:  assets  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 9.0.0 
        /// </summary>
        /// <exception cref="AccelaSettings.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="assetGroup">Asset group filter (optional)</param>
        /// <param name="assetType">Asset type filter (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAssetUnitTypeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAssetUnitTypeModelArray>> V4GetSettingsAssettypesUsageTypesAsyncWithHttpInfo (string contentType, string assetGroup = null, string assetType = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling SettingsAssetTypesApi->V4GetSettingsAssettypesUsageTypes");

            var localVarPath = "/v4/settings/assettypes/usageTypes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (assetGroup != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetGroup", assetGroup)); // query parameter
            if (assetType != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "assetType", assetType)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetSettingsAssettypesUsageTypes", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAssetUnitTypeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseAssetUnitTypeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAssetUnitTypeModelArray)));
        }

    }
}
