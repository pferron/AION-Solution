/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaCitizens.Client;
using AccelaCitizens.Model;

namespace AccelaCitizens.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICitizenAccessDelegateManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete Delegates
        /// </summary>
        /// <remarks>
        /// Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        ResponseResultCountModel V4DeleteCitizenaccessCitizensDelegatesIds (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete Delegates
        /// </summary>
        /// <remarks>
        /// Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        ApiResponse<ResponseResultCountModel> V4DeleteCitizenaccessCitizensDelegatesIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Get Citizen Delegate Privileges
        /// </summary>
        /// <remarks>
        /// Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDelegatePrivilegeModelArray</returns>
        ResponseDelegatePrivilegeModelArray V4GetCitizenaccessCitizensDelegatePrivileges (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get Citizen Delegate Privileges
        /// </summary>
        /// <remarks>
        /// Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDelegatePrivilegeModelArray</returns>
        ApiResponse<ResponseDelegatePrivilegeModelArray> V4GetCitizenaccessCitizensDelegatePrivilegesWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Get All Delegates
        /// </summary>
        /// <remarks>
        /// Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserDelegateModelArray</returns>
        ResponsePublicUserDelegateModelArray V4GetCitizenaccessCitizensDelegates (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Delegates
        /// </summary>
        /// <remarks>
        /// Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserDelegateModelArray</returns>
        ApiResponse<ResponsePublicUserDelegateModelArray> V4GetCitizenaccessCitizensDelegatesWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Create Delegates
        /// </summary>
        /// <remarks>
        /// Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        ResponseResultModel V4PostCitizenaccessCitizensDelegates (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null);

        /// <summary>
        /// Create Delegates
        /// </summary>
        /// <remarks>
        /// Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        ApiResponse<ResponseResultModel> V4PostCitizenaccessCitizensDelegatesWithHttpInfo (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Delete Delegates
        /// </summary>
        /// <remarks>
        /// Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        System.Threading.Tasks.Task<ResponseResultCountModel> V4DeleteCitizenaccessCitizensDelegatesIdsAsync (string contentType, string authorization, string ids, string lang = null);

        /// <summary>
        /// Delete Delegates
        /// </summary>
        /// <remarks>
        /// Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4DeleteCitizenaccessCitizensDelegatesIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null);
        /// <summary>
        /// Get Citizen Delegate Privileges
        /// </summary>
        /// <remarks>
        /// Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDelegatePrivilegeModelArray</returns>
        System.Threading.Tasks.Task<ResponseDelegatePrivilegeModelArray> V4GetCitizenaccessCitizensDelegatePrivilegesAsync (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get Citizen Delegate Privileges
        /// </summary>
        /// <remarks>
        /// Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDelegatePrivilegeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDelegatePrivilegeModelArray>> V4GetCitizenaccessCitizensDelegatePrivilegesAsyncWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Get All Delegates
        /// </summary>
        /// <remarks>
        /// Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserDelegateModelArray</returns>
        System.Threading.Tasks.Task<ResponsePublicUserDelegateModelArray> V4GetCitizenaccessCitizensDelegatesAsync (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);

        /// <summary>
        /// Get All Delegates
        /// </summary>
        /// <remarks>
        /// Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserDelegateModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserDelegateModelArray>> V4GetCitizenaccessCitizensDelegatesAsyncWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null);
        /// <summary>
        /// Create Delegates
        /// </summary>
        /// <remarks>
        /// Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        System.Threading.Tasks.Task<ResponseResultModel> V4PostCitizenaccessCitizensDelegatesAsync (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null);

        /// <summary>
        /// Create Delegates
        /// </summary>
        /// <remarks>
        /// Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </remarks>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PostCitizenaccessCitizensDelegatesAsyncWithHttpInfo (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CitizenAccessDelegateManagementApi : ICitizenAccessDelegateManagementApi
    {
        private AccelaCitizens.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessDelegateManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CitizenAccessDelegateManagementApi(String basePath)
        {
            this.Configuration = new AccelaCitizens.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CitizenAccessDelegateManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CitizenAccessDelegateManagementApi(AccelaCitizens.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaCitizens.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaCitizens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaCitizens.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaCitizens.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Delete Delegates Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultCountModel</returns>
        public ResponseResultCountModel V4DeleteCitizenaccessCitizensDelegatesIds (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = V4DeleteCitizenaccessCitizensDelegatesIdsWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Delegates Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultCountModel</returns>
        public ApiResponse< ResponseResultCountModel > V4DeleteCitizenaccessCitizensDelegatesIdsWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4DeleteCitizenaccessCitizensDelegatesIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4DeleteCitizenaccessCitizensDelegatesIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling CitizenAccessDelegateManagementApi->V4DeleteCitizenaccessCitizensDelegatesIds");

            var localVarPath = "/v4/citizenaccess/citizens/delegates/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteCitizenaccessCitizensDelegatesIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Delete Delegates Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultCountModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultCountModel> V4DeleteCitizenaccessCitizensDelegatesIdsAsync (string contentType, string authorization, string ids, string lang = null)
        {
             ApiResponse<ResponseResultCountModel> localVarResponse = await V4DeleteCitizenaccessCitizensDelegatesIdsAsyncWithHttpInfo(contentType, authorization, ids, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete Delegates Deletes the specified delegates whom the logged - in user has delegated.   ** API Endpoint ** : DELETE /v4/citizenaccess/citizens/delegates/{ids}   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="ids">Comma - delimited IDs of delegates to delete .</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultCountModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultCountModel>> V4DeleteCitizenaccessCitizensDelegatesIdsAsyncWithHttpInfo (string contentType, string authorization, string ids, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4DeleteCitizenaccessCitizensDelegatesIds");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4DeleteCitizenaccessCitizensDelegatesIds");
            // verify the required parameter 'ids' is set
            if (ids == null)
                throw new ApiException(400, "Missing required parameter 'ids' when calling CitizenAccessDelegateManagementApi->V4DeleteCitizenaccessCitizensDelegatesIds");

            var localVarPath = "/v4/citizenaccess/citizens/delegates/{ids}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ids != null) localVarPathParams.Add("ids", this.Configuration.ApiClient.ParameterToString(ids)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4DeleteCitizenaccessCitizensDelegatesIds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultCountModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultCountModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultCountModel)));
        }

        /// <summary>
        /// Get Citizen Delegate Privileges Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseDelegatePrivilegeModelArray</returns>
        public ResponseDelegatePrivilegeModelArray V4GetCitizenaccessCitizensDelegatePrivileges (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseDelegatePrivilegeModelArray> localVarResponse = V4GetCitizenaccessCitizensDelegatePrivilegesWithHttpInfo(contentType, authorization, offset, limit, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Citizen Delegate Privileges Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseDelegatePrivilegeModelArray</returns>
        public ApiResponse< ResponseDelegatePrivilegeModelArray > V4GetCitizenaccessCitizensDelegatePrivilegesWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegatePrivileges");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegatePrivileges");

            var localVarPath = "/v4/citizenaccess/citizens/delegatePrivileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensDelegatePrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDelegatePrivilegeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDelegatePrivilegeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDelegatePrivilegeModelArray)));
        }

        /// <summary>
        /// Get Citizen Delegate Privileges Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseDelegatePrivilegeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseDelegatePrivilegeModelArray> V4GetCitizenaccessCitizensDelegatePrivilegesAsync (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponseDelegatePrivilegeModelArray> localVarResponse = await V4GetCitizenaccessCitizensDelegatePrivilegesAsyncWithHttpInfo(contentType, authorization, offset, limit, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Citizen Delegate Privileges Gets the privileges of the citizen delegates associated to the logged-in user. **API Endpoint**:  GET /v4/citizenaccess/citizens/delegatePrivileges  **Scope**:  users  **App Type**:  Citizen  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.3.5 
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseDelegatePrivilegeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseDelegatePrivilegeModelArray>> V4GetCitizenaccessCitizensDelegatePrivilegesAsyncWithHttpInfo (string contentType, string authorization, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegatePrivileges");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegatePrivileges");

            var localVarPath = "/v4/citizenaccess/citizens/delegatePrivileges";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensDelegatePrivileges", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseDelegatePrivilegeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseDelegatePrivilegeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseDelegatePrivilegeModelArray)));
        }

        /// <summary>
        /// Get All Delegates Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponsePublicUserDelegateModelArray</returns>
        public ResponsePublicUserDelegateModelArray V4GetCitizenaccessCitizensDelegates (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserDelegateModelArray> localVarResponse = V4GetCitizenaccessCitizensDelegatesWithHttpInfo(contentType, authorization, userName, name, delegateStatus, offset, limit, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Delegates Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponsePublicUserDelegateModelArray</returns>
        public ApiResponse< ResponsePublicUserDelegateModelArray > V4GetCitizenaccessCitizensDelegatesWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegates");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegates");

            var localVarPath = "/v4/citizenaccess/citizens/delegates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (delegateStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delegateStatus", delegateStatus)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensDelegates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserDelegateModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserDelegateModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserDelegateModelArray)));
        }

        /// <summary>
        /// Get All Delegates Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponsePublicUserDelegateModelArray</returns>
        public async System.Threading.Tasks.Task<ResponsePublicUserDelegateModelArray> V4GetCitizenaccessCitizensDelegatesAsync (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
             ApiResponse<ResponsePublicUserDelegateModelArray> localVarResponse = await V4GetCitizenaccessCitizensDelegatesAsyncWithHttpInfo(contentType, authorization, userName, name, delegateStatus, offset, limit, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Delegates Gets the citizen users delegated by the logged - in user.  ** API Endpoint ** : GET /v4/citizenaccess/citizens/delegates  ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="userName">Filter by the delegate &#39;s login name. (optional)</param>
        /// <param name="name">Filter by the delegate&#39; s name. (optional)</param>
        /// <param name="delegateStatus">Filter by the delegate status. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponsePublicUserDelegateModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponsePublicUserDelegateModelArray>> V4GetCitizenaccessCitizensDelegatesAsyncWithHttpInfo (string contentType, string authorization, string userName = null, string name = null, string delegateStatus = null, long? offset = null, long? limit = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegates");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4GetCitizenaccessCitizensDelegates");

            var localVarPath = "/v4/citizenaccess/citizens/delegates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (delegateStatus != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "delegateStatus", delegateStatus)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetCitizenaccessCitizensDelegates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponsePublicUserDelegateModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponsePublicUserDelegateModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponsePublicUserDelegateModelArray)));
        }

        /// <summary>
        /// Create Delegates Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModel</returns>
        public ResponseResultModel V4PostCitizenaccessCitizensDelegates (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = V4PostCitizenaccessCitizensDelegatesWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Delegates Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModel</returns>
        public ApiResponse< ResponseResultModel > V4PostCitizenaccessCitizensDelegatesWithHttpInfo (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4PostCitizenaccessCitizensDelegates");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4PostCitizenaccessCitizensDelegates");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessDelegateManagementApi->V4PostCitizenaccessCitizensDelegates");

            var localVarPath = "/v4/citizenaccess/citizens/delegates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizenaccessCitizensDelegates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

        /// <summary>
        /// Create Delegates Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModel</returns>
        public async System.Threading.Tasks.Task<ResponseResultModel> V4PostCitizenaccessCitizensDelegatesAsync (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModel> localVarResponse = await V4PostCitizenaccessCitizensDelegatesAsyncWithHttpInfo(contentType, authorization, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Delegates Creates the specified delegate users.The Create Delegates API allows the logged - in user to send delegate requests to one or more users,as specified in the request array.The specified userNames must be valid citizen users.The logged - in user cannot send more than one delegate request to the same userName.For each new delegate,the delegateStatus is set to PENDING.The citizen user receiving the delegate request will need to accept the delegate request(via Update Invitation API)to enable the assigned permissions.If the citizen user rejects the invitation(via Update Invitation API),the permissions will not take effect; the delegate record remains until it is deleted by the Delete Delegates API.   ** API Endpoint ** : POST /v4/citizenaccess/citizens/delegates   ** Scope ** : users   ** App Type ** : Citizen   ** Authorization Type ** : Access token   ** Civic Platform version ** : 7.3.3.5  
        /// </summary>
        /// <exception cref="AccelaCitizens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="body">Delegate information to add.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModel>> V4PostCitizenaccessCitizensDelegatesAsyncWithHttpInfo (string contentType, string authorization, List<RequestPublicUserDelegateModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling CitizenAccessDelegateManagementApi->V4PostCitizenaccessCitizensDelegates");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CitizenAccessDelegateManagementApi->V4PostCitizenaccessCitizensDelegates");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CitizenAccessDelegateManagementApi->V4PostCitizenaccessCitizensDelegates");

            var localVarPath = "/v4/citizenaccess/citizens/delegates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content - Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PostCitizenaccessCitizensDelegates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModel)));
        }

    }
}
