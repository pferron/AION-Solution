/* 
 * Miscellaneous
 *
 * Miscellaneous Construct APIs
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaMiscellanous.Client;
using AccelaMiscellanous.Model;

namespace AccelaMiscellanous.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IConditionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Approval Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionApprovalModelArray</returns>
        ResponseConditionApprovalModelArray V4GetConditionApprovalsStandard (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Approval Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionApprovalModelArray</returns>
        ApiResponse<ResponseConditionApprovalModelArray> V4GetConditionApprovalsStandardWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Standard Conditions
        /// </summary>
        /// <remarks>
        /// Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        ResponseConditionModelArray V4GetConditionsStandard (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Standard Conditions
        /// </summary>
        /// <remarks>
        /// Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        ApiResponse<ResponseConditionModelArray> V4GetConditionsStandardWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Approval Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionApprovalModelArray</returns>
        System.Threading.Tasks.Task<ResponseConditionApprovalModelArray> V4GetConditionApprovalsStandardAsync (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Approval Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionApprovalModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseConditionApprovalModelArray>> V4GetConditionApprovalsStandardAsyncWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Standard Conditions
        /// </summary>
        /// <remarks>
        /// Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetConditionsStandardAsync (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Standard Conditions
        /// </summary>
        /// <remarks>
        /// Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetConditionsStandardAsyncWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ConditionsApi : IConditionsApi
    {
        private AccelaMiscellanous.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConditionsApi(String basePath)
        {
            this.Configuration = new AccelaMiscellanous.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaMiscellanous.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ConditionsApi(AccelaMiscellanous.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaMiscellanous.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaMiscellanous.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaMiscellanous.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaMiscellanous.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Approval Conditions Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionApprovalModelArray</returns>
        public ResponseConditionApprovalModelArray V4GetConditionApprovalsStandard (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionApprovalModelArray> localVarResponse = V4GetConditionApprovalsStandardWithHttpInfo(contentType, authorization, type, group, name, severity, publicDisplayMessage, inheritable, priority, shortComments, longComments, resolutionAction, includeNameInNotice, includeShortCommentsInNotice, displayNoticeInAgency, displayNoticeInCitizens, displayNoticeInCitizensFee, offset, limit, sort, direction, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Approval Conditions Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionApprovalModelArray</returns>
        public ApiResponse< ResponseConditionApprovalModelArray > V4GetConditionApprovalsStandardWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ConditionsApi->V4GetConditionApprovalsStandard");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConditionsApi->V4GetConditionApprovalsStandard");

            var localVarPath = "/v4/conditionApprovals/standard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severity", severity)); // query parameter
            if (publicDisplayMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicDisplayMessage", publicDisplayMessage)); // query parameter
            if (inheritable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritable", inheritable)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (shortComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shortComments", shortComments)); // query parameter
            if (longComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longComments", longComments)); // query parameter
            if (resolutionAction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolutionAction", resolutionAction)); // query parameter
            if (includeNameInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNameInNotice", includeNameInNotice)); // query parameter
            if (includeShortCommentsInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeShortCommentsInNotice", includeShortCommentsInNotice)); // query parameter
            if (displayNoticeInAgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInAgency", displayNoticeInAgency)); // query parameter
            if (displayNoticeInCitizens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizens", displayNoticeInCitizens)); // query parameter
            if (displayNoticeInCitizensFee != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizensFee", displayNoticeInCitizensFee)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetConditionApprovalsStandard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionApprovalModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionApprovalModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionApprovalModelArray)));
        }

        /// <summary>
        /// Get All Approval Conditions Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionApprovalModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseConditionApprovalModelArray> V4GetConditionApprovalsStandardAsync (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionApprovalModelArray> localVarResponse = await V4GetConditionApprovalsStandardAsyncWithHttpInfo(contentType, authorization, type, group, name, severity, publicDisplayMessage, inheritable, priority, shortComments, longComments, resolutionAction, includeNameInNotice, includeShortCommentsInNotice, displayNoticeInAgency, displayNoticeInCitizens, displayNoticeInCitizensFee, offset, limit, sort, direction, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Approval Conditions Gets the conditions of approval available in the system. **API Endpoint**:  GET /v4/conditionApprovals/standard **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionApprovalModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseConditionApprovalModelArray>> V4GetConditionApprovalsStandardAsyncWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ConditionsApi->V4GetConditionApprovalsStandard");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConditionsApi->V4GetConditionApprovalsStandard");

            var localVarPath = "/v4/conditionApprovals/standard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severity", severity)); // query parameter
            if (publicDisplayMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicDisplayMessage", publicDisplayMessage)); // query parameter
            if (inheritable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritable", inheritable)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (shortComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shortComments", shortComments)); // query parameter
            if (longComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longComments", longComments)); // query parameter
            if (resolutionAction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolutionAction", resolutionAction)); // query parameter
            if (includeNameInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNameInNotice", includeNameInNotice)); // query parameter
            if (includeShortCommentsInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeShortCommentsInNotice", includeShortCommentsInNotice)); // query parameter
            if (displayNoticeInAgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInAgency", displayNoticeInAgency)); // query parameter
            if (displayNoticeInCitizens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizens", displayNoticeInCitizens)); // query parameter
            if (displayNoticeInCitizensFee != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizensFee", displayNoticeInCitizensFee)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetConditionApprovalsStandard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionApprovalModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionApprovalModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionApprovalModelArray)));
        }

        /// <summary>
        /// Get All Standard Conditions Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        public ResponseConditionModelArray V4GetConditionsStandard (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = V4GetConditionsStandardWithHttpInfo(contentType, authorization, type, group, name, severity, publicDisplayMessage, inheritable, priority, shortComments, longComments, resolutionAction, includeNameInNotice, includeShortCommentsInNotice, displayNoticeInAgency, displayNoticeInCitizens, displayNoticeInCitizensFee, offset, limit, sort, direction, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Standard Conditions Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        public ApiResponse< ResponseConditionModelArray > V4GetConditionsStandardWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ConditionsApi->V4GetConditionsStandard");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConditionsApi->V4GetConditionsStandard");

            var localVarPath = "/v4/conditions/standard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severity", severity)); // query parameter
            if (publicDisplayMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicDisplayMessage", publicDisplayMessage)); // query parameter
            if (inheritable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritable", inheritable)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (shortComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shortComments", shortComments)); // query parameter
            if (longComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longComments", longComments)); // query parameter
            if (resolutionAction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolutionAction", resolutionAction)); // query parameter
            if (includeNameInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNameInNotice", includeNameInNotice)); // query parameter
            if (includeShortCommentsInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeShortCommentsInNotice", includeShortCommentsInNotice)); // query parameter
            if (displayNoticeInAgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInAgency", displayNoticeInAgency)); // query parameter
            if (displayNoticeInCitizens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizens", displayNoticeInCitizens)); // query parameter
            if (displayNoticeInCitizensFee != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizensFee", displayNoticeInCitizensFee)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetConditionsStandard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

        /// <summary>
        /// Get All Standard Conditions Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetConditionsStandardAsync (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = await V4GetConditionsStandardAsyncWithHttpInfo(contentType, authorization, type, group, name, severity, publicDisplayMessage, inheritable, priority, shortComments, longComments, resolutionAction, includeNameInNotice, includeShortCommentsInNotice, displayNoticeInAgency, displayNoticeInCitizens, displayNoticeInCitizensFee, offset, limit, sort, direction, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Standard Conditions Gets the standard conditions available in the system. **API Endpoint**:  GET /v4/conditions/standard  **Scope**:  conditions  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaMiscellanous.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="type">Filter by the standard condition type. See [Get All Standard Condition Types](./api-settings.html#operation/v4.get.settings.conditions.types). (optional)</param>
        /// <param name="group">Filter by standard condition group. (optional)</param>
        /// <param name="name">Filter by standard condition name. (optional)</param>
        /// <param name="severity">Filter by standard condition severity. (optional)</param>
        /// <param name="publicDisplayMessage">Filter by standard condition public display message. (optional)</param>
        /// <param name="inheritable">Filter whether or not the standard condition is inheritable. (optional)</param>
        /// <param name="priority">Filter by standard condition priority. See [Get All Standard Condition Priorities](./api-settings.html#operation/v4.get.settings.conditions.priorities). (optional)</param>
        /// <param name="shortComments">Filter by standard condition short comments. (optional)</param>
        /// <param name="longComments">Filter by standard condition long comments. (optional)</param>
        /// <param name="resolutionAction">Filter by standard condition  resolution action (optional)</param>
        /// <param name="includeNameInNotice">Filter whether or not the standard condition includes name in notice. (optional)</param>
        /// <param name="includeShortCommentsInNotice">Filter whether or not the standard condition includes short comments in notice. (optional)</param>
        /// <param name="displayNoticeInAgency">Filter whether or not the standard condition displays the notice to the agency. (optional)</param>
        /// <param name="displayNoticeInCitizens">Filter whether or not the standard condition displays the notice to the citizens. (optional)</param>
        /// <param name="displayNoticeInCitizensFee">Filter whether or not the standard condition displays the notice in the citizen fee. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="sort">Sort search result by one field name. (optional)</param>
        /// <param name="direction">The sort direction. Default is ASC. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note: Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetConditionsStandardAsyncWithHttpInfo (string contentType, string authorization, string type = null, string group = null, string name = null, string severity = null, string publicDisplayMessage = null, string inheritable = null, long? priority = null, string shortComments = null, string longComments = null, string resolutionAction = null, bool? includeNameInNotice = null, bool? includeShortCommentsInNotice = null, bool? displayNoticeInAgency = null, bool? displayNoticeInCitizens = null, bool? displayNoticeInCitizensFee = null, long? offset = null, long? limit = null, string sort = null, string direction = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling ConditionsApi->V4GetConditionsStandard");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ConditionsApi->V4GetConditionsStandard");

            var localVarPath = "/v4/conditions/standard";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (severity != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "severity", severity)); // query parameter
            if (publicDisplayMessage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "publicDisplayMessage", publicDisplayMessage)); // query parameter
            if (inheritable != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inheritable", inheritable)); // query parameter
            if (priority != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "priority", priority)); // query parameter
            if (shortComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "shortComments", shortComments)); // query parameter
            if (longComments != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "longComments", longComments)); // query parameter
            if (resolutionAction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "resolutionAction", resolutionAction)); // query parameter
            if (includeNameInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeNameInNotice", includeNameInNotice)); // query parameter
            if (includeShortCommentsInNotice != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "includeShortCommentsInNotice", includeShortCommentsInNotice)); // query parameter
            if (displayNoticeInAgency != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInAgency", displayNoticeInAgency)); // query parameter
            if (displayNoticeInCitizens != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizens", displayNoticeInCitizens)); // query parameter
            if (displayNoticeInCitizensFee != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "displayNoticeInCitizensFee", displayNoticeInCitizensFee)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (sort != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sort", sort)); // query parameter
            if (direction != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "direction", direction)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetConditionsStandard", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

    }
}
