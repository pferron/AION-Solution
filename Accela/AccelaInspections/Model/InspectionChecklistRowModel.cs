/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// InspectionChecklistRowModel
    /// </summary>
    [DataContract]
    public partial class InspectionChecklistRowModel :  IEquatable<InspectionChecklistRowModel>, IValidatableObject
    {
        /// <summary>
        /// Specifies whether to add, update, or delete the custom table row.
        /// </summary>
        /// <value>Specifies whether to add, update, or delete the custom table row.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ActionEnum
        {
            
            /// <summary>
            /// Enum Add for value: add
            /// </summary>
            [EnumMember(Value = "add")]
            Add = 1,
            
            /// <summary>
            /// Enum Update for value: update
            /// </summary>
            [EnumMember(Value = "update")]
            Update = 2,
            
            /// <summary>
            /// Enum Delete for value: delete
            /// </summary>
            [EnumMember(Value = "delete")]
            Delete = 3
        }

        /// <summary>
        /// Specifies whether to add, update, or delete the custom table row.
        /// </summary>
        /// <value>Specifies whether to add, update, or delete the custom table row.</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public ActionEnum Action { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionChecklistRowModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InspectionChecklistRowModel() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionChecklistRowModel" /> class.
        /// </summary>
        /// <param name="action">Specifies whether to add, update, or delete the custom table row. (required).</param>
        /// <param name="fields">fields (required).</param>
        /// <param name="id">The unique identifier for the custom field. Required only if modifying or deleting a row. (required).</param>
        public InspectionChecklistRowModel(ActionEnum action = default(ActionEnum), CustomAttributeModel fields = default(CustomAttributeModel), string id = default(string))
        {
            // to ensure "action" is required (not null)
            this.Action = action;
            // to ensure "fields" is required (not null)
            if (fields == null)
            {
                throw new InvalidDataException("fields is a required property for InspectionChecklistRowModel and cannot be null");
            }
            else
            {
                this.Fields = fields;
            }
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InspectionChecklistRowModel and cannot be null");
            }
            else
            {
                this.Id = id;
            }
        }
        

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public CustomAttributeModel Fields { get; set; }

        /// <summary>
        /// The unique identifier for the custom field. Required only if modifying or deleting a row.
        /// </summary>
        /// <value>The unique identifier for the custom field. Required only if modifying or deleting a row.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionChecklistRowModel {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectionChecklistRowModel);
        }

        /// <summary>
        /// Returns true if InspectionChecklistRowModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectionChecklistRowModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionChecklistRowModel input)
        {
            if (input == null)
                return false;

            return 
                //(
                //    this.Action == input.Action ||
                //    (this.Action != null &&
                //    this.Action.Equals(input.Action))
                //) && 
                (
                    this.Fields == input.Fields ||
                    (this.Fields != null &&
                    this.Fields.Equals(input.Fields))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                //if (this.Action != null)
                //    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.Fields != null)
                    hashCode = hashCode * 59 + this.Fields.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
