/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// AddressModel
    /// </summary>
    [DataContract]
    public partial class AddressModel :  IEquatable<AddressModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressModel" /> class.
        /// </summary>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressTypeFlag">addressTypeFlag.</param>
        /// <param name="city">city.</param>
        /// <param name="country">country.</param>
        /// <param name="county">county.</param>
        /// <param name="description">description.</param>
        /// <param name="direction">direction.</param>
        /// <param name="distance">distance.</param>
        /// <param name="houseAlphaEnd">houseAlphaEnd.</param>
        /// <param name="houseAlphaStart">houseAlphaStart.</param>
        /// <param name="houseFractionEnd">houseFractionEnd.</param>
        /// <param name="houseFractionStart">houseFractionStart.</param>
        /// <param name="id">id.</param>
        /// <param name="inspectionDistrict">inspectionDistrict.</param>
        /// <param name="inspectionDistrictPrefix">inspectionDistrictPrefix.</param>
        /// <param name="isPrimary">isPrimary.</param>
        /// <param name="levelEnd">levelEnd.</param>
        /// <param name="levelPrefix">levelPrefix.</param>
        /// <param name="levelStart">levelStart.</param>
        /// <param name="neighborhood">neighborhood.</param>
        /// <param name="neighborhoodPrefix">neighborhoodPrefix.</param>
        /// <param name="postalCode">postalCode.</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="refAddressId">refAddressId.</param>
        /// <param name="secondaryStreet">secondaryStreet.</param>
        /// <param name="secondaryStreetNumber">secondaryStreetNumber.</param>
        /// <param name="serviceProviderCode">serviceProviderCode.</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="streetAddress">streetAddress.</param>
        /// <param name="streetEnd">streetEnd.</param>
        /// <param name="streetEndFrom">streetEndFrom.</param>
        /// <param name="streetEndTo">streetEndTo.</param>
        /// <param name="streetName">streetName.</param>
        /// <param name="streetPrefix">streetPrefix.</param>
        /// <param name="streetStart">streetStart.</param>
        /// <param name="streetStartFrom">streetStartFrom.</param>
        /// <param name="streetStartTo">streetStartTo.</param>
        /// <param name="streetSuffix">streetSuffix.</param>
        /// <param name="streetSuffixDirection">streetSuffixDirection.</param>
        /// <param name="type">type.</param>
        /// <param name="unitEnd">unitEnd.</param>
        /// <param name="unitStart">unitStart.</param>
        /// <param name="unitType">unitType.</param>
        /// <param name="xCoordinate">xCoordinate.</param>
        /// <param name="yCoordinate">yCoordinate.</param>
        public AddressModel(string addressLine1 = default(string), string addressLine2 = default(string), IdentifierModel addressTypeFlag = default(IdentifierModel), string city = default(string), IdentifierModel country = default(IdentifierModel), string county = default(string), string description = default(string), IdentifierModel direction = default(IdentifierModel), double? distance = default(double?), string houseAlphaEnd = default(string), string houseAlphaStart = default(string), IdentifierModel houseFractionEnd = default(IdentifierModel), IdentifierModel houseFractionStart = default(IdentifierModel), long? id = default(long?), string inspectionDistrict = default(string), string inspectionDistrictPrefix = default(string), string isPrimary = default(string), string levelEnd = default(string), string levelPrefix = default(string), string levelStart = default(string), string neighborhood = default(string), string neighborhoodPrefix = default(string), string postalCode = default(string), CapIDModel recordId = default(CapIDModel), long? refAddressId = default(long?), string secondaryStreet = default(string), int? secondaryStreetNumber = default(int?), string serviceProviderCode = default(string), IdentifierModel state = default(IdentifierModel), IdentifierModel status = default(IdentifierModel), string streetAddress = default(string), int? streetEnd = default(int?), int? streetEndFrom = default(int?), int? streetEndTo = default(int?), string streetName = default(string), string streetPrefix = default(string), int? streetStart = default(int?), int? streetStartFrom = default(int?), int? streetStartTo = default(int?), IdentifierModel streetSuffix = default(IdentifierModel), IdentifierModel streetSuffixDirection = default(IdentifierModel), IdentifierModel type = default(IdentifierModel), string unitEnd = default(string), string unitStart = default(string), IdentifierModel unitType = default(IdentifierModel), double? xCoordinate = default(double?), double? yCoordinate = default(double?))
        {
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressTypeFlag = addressTypeFlag;
            this.City = city;
            this.Country = country;
            this.County = county;
            this.Description = description;
            this.Direction = direction;
            this.Distance = distance;
            this.HouseAlphaEnd = houseAlphaEnd;
            this.HouseAlphaStart = houseAlphaStart;
            this.HouseFractionEnd = houseFractionEnd;
            this.HouseFractionStart = houseFractionStart;
            this.Id = id;
            this.InspectionDistrict = inspectionDistrict;
            this.InspectionDistrictPrefix = inspectionDistrictPrefix;
            this.IsPrimary = isPrimary;
            this.LevelEnd = levelEnd;
            this.LevelPrefix = levelPrefix;
            this.LevelStart = levelStart;
            this.Neighborhood = neighborhood;
            this.NeighborhoodPrefix = neighborhoodPrefix;
            this.PostalCode = postalCode;
            this.RecordId = recordId;
            this.RefAddressId = refAddressId;
            this.SecondaryStreet = secondaryStreet;
            this.SecondaryStreetNumber = secondaryStreetNumber;
            this.ServiceProviderCode = serviceProviderCode;
            this.State = state;
            this.Status = status;
            this.StreetAddress = streetAddress;
            this.StreetEnd = streetEnd;
            this.StreetEndFrom = streetEndFrom;
            this.StreetEndTo = streetEndTo;
            this.StreetName = streetName;
            this.StreetPrefix = streetPrefix;
            this.StreetStart = streetStart;
            this.StreetStartFrom = streetStartFrom;
            this.StreetStartTo = streetStartTo;
            this.StreetSuffix = streetSuffix;
            this.StreetSuffixDirection = streetSuffixDirection;
            this.Type = type;
            this.UnitEnd = unitEnd;
            this.UnitStart = unitStart;
            this.UnitType = unitType;
            this.XCoordinate = xCoordinate;
            this.YCoordinate = yCoordinate;
        }
        
        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Gets or Sets AddressTypeFlag
        /// </summary>
        [DataMember(Name="addressTypeFlag", EmitDefaultValue=false)]
        public IdentifierModel AddressTypeFlag { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public IdentifierModel Country { get; set; }

        /// <summary>
        /// Gets or Sets County
        /// </summary>
        [DataMember(Name="county", EmitDefaultValue=false)]
        public string County { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public IdentifierModel Direction { get; set; }

        /// <summary>
        /// Gets or Sets Distance
        /// </summary>
        [DataMember(Name="distance", EmitDefaultValue=false)]
        public double? Distance { get; set; }

        /// <summary>
        /// Gets or Sets HouseAlphaEnd
        /// </summary>
        [DataMember(Name="houseAlphaEnd", EmitDefaultValue=false)]
        public string HouseAlphaEnd { get; set; }

        /// <summary>
        /// Gets or Sets HouseAlphaStart
        /// </summary>
        [DataMember(Name="houseAlphaStart", EmitDefaultValue=false)]
        public string HouseAlphaStart { get; set; }

        /// <summary>
        /// Gets or Sets HouseFractionEnd
        /// </summary>
        [DataMember(Name="houseFractionEnd", EmitDefaultValue=false)]
        public IdentifierModel HouseFractionEnd { get; set; }

        /// <summary>
        /// Gets or Sets HouseFractionStart
        /// </summary>
        [DataMember(Name="houseFractionStart", EmitDefaultValue=false)]
        public IdentifierModel HouseFractionStart { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets InspectionDistrict
        /// </summary>
        [DataMember(Name="inspectionDistrict", EmitDefaultValue=false)]
        public string InspectionDistrict { get; set; }

        /// <summary>
        /// Gets or Sets InspectionDistrictPrefix
        /// </summary>
        [DataMember(Name="inspectionDistrictPrefix", EmitDefaultValue=false)]
        public string InspectionDistrictPrefix { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public string IsPrimary { get; set; }

        /// <summary>
        /// Gets or Sets LevelEnd
        /// </summary>
        [DataMember(Name="levelEnd", EmitDefaultValue=false)]
        public string LevelEnd { get; set; }

        /// <summary>
        /// Gets or Sets LevelPrefix
        /// </summary>
        [DataMember(Name="levelPrefix", EmitDefaultValue=false)]
        public string LevelPrefix { get; set; }

        /// <summary>
        /// Gets or Sets LevelStart
        /// </summary>
        [DataMember(Name="levelStart", EmitDefaultValue=false)]
        public string LevelStart { get; set; }

        /// <summary>
        /// Gets or Sets Neighborhood
        /// </summary>
        [DataMember(Name="neighborhood", EmitDefaultValue=false)]
        public string Neighborhood { get; set; }

        /// <summary>
        /// Gets or Sets NeighborhoodPrefix
        /// </summary>
        [DataMember(Name="neighborhoodPrefix", EmitDefaultValue=false)]
        public string NeighborhoodPrefix { get; set; }

        /// <summary>
        /// Gets or Sets PostalCode
        /// </summary>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public CapIDModel RecordId { get; set; }

        /// <summary>
        /// Gets or Sets RefAddressId
        /// </summary>
        [DataMember(Name="refAddressId", EmitDefaultValue=false)]
        public long? RefAddressId { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryStreet
        /// </summary>
        [DataMember(Name="secondaryStreet", EmitDefaultValue=false)]
        public string SecondaryStreet { get; set; }

        /// <summary>
        /// Gets or Sets SecondaryStreetNumber
        /// </summary>
        [DataMember(Name="secondaryStreetNumber", EmitDefaultValue=false)]
        public int? SecondaryStreetNumber { get; set; }

        /// <summary>
        /// Gets or Sets ServiceProviderCode
        /// </summary>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public IdentifierModel State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public IdentifierModel Status { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets StreetEnd
        /// </summary>
        [DataMember(Name="streetEnd", EmitDefaultValue=false)]
        public int? StreetEnd { get; set; }

        /// <summary>
        /// Gets or Sets StreetEndFrom
        /// </summary>
        [DataMember(Name="streetEndFrom", EmitDefaultValue=false)]
        public int? StreetEndFrom { get; set; }

        /// <summary>
        /// Gets or Sets StreetEndTo
        /// </summary>
        [DataMember(Name="streetEndTo", EmitDefaultValue=false)]
        public int? StreetEndTo { get; set; }

        /// <summary>
        /// Gets or Sets StreetName
        /// </summary>
        [DataMember(Name="streetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Gets or Sets StreetPrefix
        /// </summary>
        [DataMember(Name="streetPrefix", EmitDefaultValue=false)]
        public string StreetPrefix { get; set; }

        /// <summary>
        /// Gets or Sets StreetStart
        /// </summary>
        [DataMember(Name="streetStart", EmitDefaultValue=false)]
        public int? StreetStart { get; set; }

        /// <summary>
        /// Gets or Sets StreetStartFrom
        /// </summary>
        [DataMember(Name="streetStartFrom", EmitDefaultValue=false)]
        public int? StreetStartFrom { get; set; }

        /// <summary>
        /// Gets or Sets StreetStartTo
        /// </summary>
        [DataMember(Name="streetStartTo", EmitDefaultValue=false)]
        public int? StreetStartTo { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffix
        /// </summary>
        [DataMember(Name="streetSuffix", EmitDefaultValue=false)]
        public IdentifierModel StreetSuffix { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffixDirection
        /// </summary>
        [DataMember(Name="streetSuffixDirection", EmitDefaultValue=false)]
        public IdentifierModel StreetSuffixDirection { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public IdentifierModel Type { get; set; }

        /// <summary>
        /// Gets or Sets UnitEnd
        /// </summary>
        [DataMember(Name="unitEnd", EmitDefaultValue=false)]
        public string UnitEnd { get; set; }

        /// <summary>
        /// Gets or Sets UnitStart
        /// </summary>
        [DataMember(Name="unitStart", EmitDefaultValue=false)]
        public string UnitStart { get; set; }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name="unitType", EmitDefaultValue=false)]
        public IdentifierModel UnitType { get; set; }

        /// <summary>
        /// Gets or Sets XCoordinate
        /// </summary>
        [DataMember(Name="xCoordinate", EmitDefaultValue=false)]
        public double? XCoordinate { get; set; }

        /// <summary>
        /// Gets or Sets YCoordinate
        /// </summary>
        [DataMember(Name="yCoordinate", EmitDefaultValue=false)]
        public double? YCoordinate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressModel {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressTypeFlag: ").Append(AddressTypeFlag).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  County: ").Append(County).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  HouseAlphaEnd: ").Append(HouseAlphaEnd).Append("\n");
            sb.Append("  HouseAlphaStart: ").Append(HouseAlphaStart).Append("\n");
            sb.Append("  HouseFractionEnd: ").Append(HouseFractionEnd).Append("\n");
            sb.Append("  HouseFractionStart: ").Append(HouseFractionStart).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InspectionDistrict: ").Append(InspectionDistrict).Append("\n");
            sb.Append("  InspectionDistrictPrefix: ").Append(InspectionDistrictPrefix).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LevelEnd: ").Append(LevelEnd).Append("\n");
            sb.Append("  LevelPrefix: ").Append(LevelPrefix).Append("\n");
            sb.Append("  LevelStart: ").Append(LevelStart).Append("\n");
            sb.Append("  Neighborhood: ").Append(Neighborhood).Append("\n");
            sb.Append("  NeighborhoodPrefix: ").Append(NeighborhoodPrefix).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  RefAddressId: ").Append(RefAddressId).Append("\n");
            sb.Append("  SecondaryStreet: ").Append(SecondaryStreet).Append("\n");
            sb.Append("  SecondaryStreetNumber: ").Append(SecondaryStreetNumber).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  StreetEnd: ").Append(StreetEnd).Append("\n");
            sb.Append("  StreetEndFrom: ").Append(StreetEndFrom).Append("\n");
            sb.Append("  StreetEndTo: ").Append(StreetEndTo).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetPrefix: ").Append(StreetPrefix).Append("\n");
            sb.Append("  StreetStart: ").Append(StreetStart).Append("\n");
            sb.Append("  StreetStartFrom: ").Append(StreetStartFrom).Append("\n");
            sb.Append("  StreetStartTo: ").Append(StreetStartTo).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  StreetSuffixDirection: ").Append(StreetSuffixDirection).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitEnd: ").Append(UnitEnd).Append("\n");
            sb.Append("  UnitStart: ").Append(UnitStart).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("  XCoordinate: ").Append(XCoordinate).Append("\n");
            sb.Append("  YCoordinate: ").Append(YCoordinate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressModel);
        }

        /// <summary>
        /// Returns true if AddressModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressTypeFlag == input.AddressTypeFlag ||
                    (this.AddressTypeFlag != null &&
                    this.AddressTypeFlag.Equals(input.AddressTypeFlag))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.County == input.County ||
                    (this.County != null &&
                    this.County.Equals(input.County))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.Distance == input.Distance ||
                    (this.Distance != null &&
                    this.Distance.Equals(input.Distance))
                ) && 
                (
                    this.HouseAlphaEnd == input.HouseAlphaEnd ||
                    (this.HouseAlphaEnd != null &&
                    this.HouseAlphaEnd.Equals(input.HouseAlphaEnd))
                ) && 
                (
                    this.HouseAlphaStart == input.HouseAlphaStart ||
                    (this.HouseAlphaStart != null &&
                    this.HouseAlphaStart.Equals(input.HouseAlphaStart))
                ) && 
                (
                    this.HouseFractionEnd == input.HouseFractionEnd ||
                    (this.HouseFractionEnd != null &&
                    this.HouseFractionEnd.Equals(input.HouseFractionEnd))
                ) && 
                (
                    this.HouseFractionStart == input.HouseFractionStart ||
                    (this.HouseFractionStart != null &&
                    this.HouseFractionStart.Equals(input.HouseFractionStart))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InspectionDistrict == input.InspectionDistrict ||
                    (this.InspectionDistrict != null &&
                    this.InspectionDistrict.Equals(input.InspectionDistrict))
                ) && 
                (
                    this.InspectionDistrictPrefix == input.InspectionDistrictPrefix ||
                    (this.InspectionDistrictPrefix != null &&
                    this.InspectionDistrictPrefix.Equals(input.InspectionDistrictPrefix))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LevelEnd == input.LevelEnd ||
                    (this.LevelEnd != null &&
                    this.LevelEnd.Equals(input.LevelEnd))
                ) && 
                (
                    this.LevelPrefix == input.LevelPrefix ||
                    (this.LevelPrefix != null &&
                    this.LevelPrefix.Equals(input.LevelPrefix))
                ) && 
                (
                    this.LevelStart == input.LevelStart ||
                    (this.LevelStart != null &&
                    this.LevelStart.Equals(input.LevelStart))
                ) && 
                (
                    this.Neighborhood == input.Neighborhood ||
                    (this.Neighborhood != null &&
                    this.Neighborhood.Equals(input.Neighborhood))
                ) && 
                (
                    this.NeighborhoodPrefix == input.NeighborhoodPrefix ||
                    (this.NeighborhoodPrefix != null &&
                    this.NeighborhoodPrefix.Equals(input.NeighborhoodPrefix))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.RefAddressId == input.RefAddressId ||
                    (this.RefAddressId != null &&
                    this.RefAddressId.Equals(input.RefAddressId))
                ) && 
                (
                    this.SecondaryStreet == input.SecondaryStreet ||
                    (this.SecondaryStreet != null &&
                    this.SecondaryStreet.Equals(input.SecondaryStreet))
                ) && 
                (
                    this.SecondaryStreetNumber == input.SecondaryStreetNumber ||
                    (this.SecondaryStreetNumber != null &&
                    this.SecondaryStreetNumber.Equals(input.SecondaryStreetNumber))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.StreetEnd == input.StreetEnd ||
                    (this.StreetEnd != null &&
                    this.StreetEnd.Equals(input.StreetEnd))
                ) && 
                (
                    this.StreetEndFrom == input.StreetEndFrom ||
                    (this.StreetEndFrom != null &&
                    this.StreetEndFrom.Equals(input.StreetEndFrom))
                ) && 
                (
                    this.StreetEndTo == input.StreetEndTo ||
                    (this.StreetEndTo != null &&
                    this.StreetEndTo.Equals(input.StreetEndTo))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetPrefix == input.StreetPrefix ||
                    (this.StreetPrefix != null &&
                    this.StreetPrefix.Equals(input.StreetPrefix))
                ) && 
                (
                    this.StreetStart == input.StreetStart ||
                    (this.StreetStart != null &&
                    this.StreetStart.Equals(input.StreetStart))
                ) && 
                (
                    this.StreetStartFrom == input.StreetStartFrom ||
                    (this.StreetStartFrom != null &&
                    this.StreetStartFrom.Equals(input.StreetStartFrom))
                ) && 
                (
                    this.StreetStartTo == input.StreetStartTo ||
                    (this.StreetStartTo != null &&
                    this.StreetStartTo.Equals(input.StreetStartTo))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.StreetSuffixDirection == input.StreetSuffixDirection ||
                    (this.StreetSuffixDirection != null &&
                    this.StreetSuffixDirection.Equals(input.StreetSuffixDirection))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnitEnd == input.UnitEnd ||
                    (this.UnitEnd != null &&
                    this.UnitEnd.Equals(input.UnitEnd))
                ) && 
                (
                    this.UnitStart == input.UnitStart ||
                    (this.UnitStart != null &&
                    this.UnitStart.Equals(input.UnitStart))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                ) && 
                (
                    this.XCoordinate == input.XCoordinate ||
                    (this.XCoordinate != null &&
                    this.XCoordinate.Equals(input.XCoordinate))
                ) && 
                (
                    this.YCoordinate == input.YCoordinate ||
                    (this.YCoordinate != null &&
                    this.YCoordinate.Equals(input.YCoordinate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressTypeFlag != null)
                    hashCode = hashCode * 59 + this.AddressTypeFlag.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.County != null)
                    hashCode = hashCode * 59 + this.County.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.Distance != null)
                    hashCode = hashCode * 59 + this.Distance.GetHashCode();
                if (this.HouseAlphaEnd != null)
                    hashCode = hashCode * 59 + this.HouseAlphaEnd.GetHashCode();
                if (this.HouseAlphaStart != null)
                    hashCode = hashCode * 59 + this.HouseAlphaStart.GetHashCode();
                if (this.HouseFractionEnd != null)
                    hashCode = hashCode * 59 + this.HouseFractionEnd.GetHashCode();
                if (this.HouseFractionStart != null)
                    hashCode = hashCode * 59 + this.HouseFractionStart.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InspectionDistrict != null)
                    hashCode = hashCode * 59 + this.InspectionDistrict.GetHashCode();
                if (this.InspectionDistrictPrefix != null)
                    hashCode = hashCode * 59 + this.InspectionDistrictPrefix.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LevelEnd != null)
                    hashCode = hashCode * 59 + this.LevelEnd.GetHashCode();
                if (this.LevelPrefix != null)
                    hashCode = hashCode * 59 + this.LevelPrefix.GetHashCode();
                if (this.LevelStart != null)
                    hashCode = hashCode * 59 + this.LevelStart.GetHashCode();
                if (this.Neighborhood != null)
                    hashCode = hashCode * 59 + this.Neighborhood.GetHashCode();
                if (this.NeighborhoodPrefix != null)
                    hashCode = hashCode * 59 + this.NeighborhoodPrefix.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.RefAddressId != null)
                    hashCode = hashCode * 59 + this.RefAddressId.GetHashCode();
                if (this.SecondaryStreet != null)
                    hashCode = hashCode * 59 + this.SecondaryStreet.GetHashCode();
                if (this.SecondaryStreetNumber != null)
                    hashCode = hashCode * 59 + this.SecondaryStreetNumber.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.StreetEnd != null)
                    hashCode = hashCode * 59 + this.StreetEnd.GetHashCode();
                if (this.StreetEndFrom != null)
                    hashCode = hashCode * 59 + this.StreetEndFrom.GetHashCode();
                if (this.StreetEndTo != null)
                    hashCode = hashCode * 59 + this.StreetEndTo.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetPrefix != null)
                    hashCode = hashCode * 59 + this.StreetPrefix.GetHashCode();
                if (this.StreetStart != null)
                    hashCode = hashCode * 59 + this.StreetStart.GetHashCode();
                if (this.StreetStartFrom != null)
                    hashCode = hashCode * 59 + this.StreetStartFrom.GetHashCode();
                if (this.StreetStartTo != null)
                    hashCode = hashCode * 59 + this.StreetStartTo.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.StreetSuffixDirection != null)
                    hashCode = hashCode * 59 + this.StreetSuffixDirection.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitEnd != null)
                    hashCode = hashCode * 59 + this.UnitEnd.GetHashCode();
                if (this.UnitStart != null)
                    hashCode = hashCode * 59 + this.UnitStart.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                if (this.XCoordinate != null)
                    hashCode = hashCode * 59 + this.XCoordinate.GetHashCode();
                if (this.YCoordinate != null)
                    hashCode = hashCode * 59 + this.YCoordinate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
