/* 
 * Contacts and Professionals
 *
 * The Contacts and Professionals APIs enable apps to manage reference contacts and licensed professionals.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaContactsAndProfessionals.Client.SwaggerDateConverter;

namespace AccelaContactsAndProfessionals.Model
{
    /// <summary>
    /// ContactAddressModel
    /// </summary>
    [DataContract]
    public partial class ContactAddressModel :  IEquatable<ContactAddressModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.
        /// </summary>
        /// <value>Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsPrimaryEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.
        /// </summary>
        /// <value>Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time.</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public IsPrimaryEnum? IsPrimary { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactAddressModel" /> class.
        /// </summary>
        /// <param name="addressLine1">The first line of the address..</param>
        /// <param name="addressLine2">The second line of the address..</param>
        /// <param name="addressLine3">The third line of the address..</param>
        /// <param name="city">The name of the city.</param>
        /// <param name="country">country.</param>
        /// <param name="direction">direction.</param>
        /// <param name="effectiveDate"> The date when the address takes effect..</param>
        /// <param name="expirationDate"> The date when the address expires..</param>
        /// <param name="fax">The fax number for the contact..</param>
        /// <param name="faxCountryCode">Fax Number Country Code.</param>
        /// <param name="houseAlphaEnd">The ending street number that makes up the address..</param>
        /// <param name="houseAlphaStart">The beginning street number that makes up the address..</param>
        /// <param name="id">The id of the address assigned by the Civic Platform server..</param>
        /// <param name="isPrimary">Indicates whether or not to designate the address as the primary address. Only one address can be primary at any given time..</param>
        /// <param name="levelEnd">The ending level number (floor number) that makes up the address within a complex..</param>
        /// <param name="levelPrefix">The prefix for the level numbers (floor numbers) that make up the address..</param>
        /// <param name="levelStart">The beginning level number (floor number) that makes up the address within a complex..</param>
        /// <param name="phone">The phone number of the user..</param>
        /// <param name="phoneCountryCode">The country code for the assoicated phone number..</param>
        /// <param name="postalCode">The postal ZIP code for the address..</param>
        /// <param name="recipient">The contact person for the contact address..</param>
        /// <param name="state">state.</param>
        /// <param name="status">status.</param>
        /// <param name="streetAddress">The street address..</param>
        /// <param name="streetEnd">The end of a range of street numbers..</param>
        /// <param name="streetName">The street name for the address..</param>
        /// <param name="streetPrefix">Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \&quot;West\&quot; is the street prefix..</param>
        /// <param name="streetStart">The start of a range of street numbers..</param>
        /// <param name="streetSuffix">streetSuffix.</param>
        /// <param name="streetSuffixDirection">streetSuffixDirection.</param>
        /// <param name="type">type.</param>
        /// <param name="unitEnd">The end parameter of a range of unit numbers..</param>
        /// <param name="unitStart">The starting parameter of a range of unit numbers..</param>
        /// <param name="unitType">unitType.</param>
        public ContactAddressModel(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string city = default(string), ContactAddressModelCountry country = default(ContactAddressModelCountry), ContactAddressModelDirection direction = default(ContactAddressModelDirection), DateTime? effectiveDate = default(DateTime?), DateTime? expirationDate = default(DateTime?), string fax = default(string), string faxCountryCode = default(string), string houseAlphaEnd = default(string), string houseAlphaStart = default(string), long? id = default(long?), IsPrimaryEnum? isPrimary = default(IsPrimaryEnum?), string levelEnd = default(string), string levelPrefix = default(string), string levelStart = default(string), string phone = default(string), string phoneCountryCode = default(string), string postalCode = default(string), string recipient = default(string), ContactAddressModelState state = default(ContactAddressModelState), ContactAddressModelStatus status = default(ContactAddressModelStatus), string streetAddress = default(string), long? streetEnd = default(long?), string streetName = default(string), string streetPrefix = default(string), long? streetStart = default(long?), ContactAddressModelStreetSuffix streetSuffix = default(ContactAddressModelStreetSuffix), ContactAddressModelStreetSuffixDirection streetSuffixDirection = default(ContactAddressModelStreetSuffixDirection), ContactAddressModelType type = default(ContactAddressModelType), string unitEnd = default(string), string unitStart = default(string), ContactAddressModelUnitType unitType = default(ContactAddressModelUnitType))
        {
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.City = city;
            this.Country = country;
            this.Direction = direction;
            this.EffectiveDate = effectiveDate;
            this.ExpirationDate = expirationDate;
            this.Fax = fax;
            this.FaxCountryCode = faxCountryCode;
            this.HouseAlphaEnd = houseAlphaEnd;
            this.HouseAlphaStart = houseAlphaStart;
            this.Id = id;
            this.IsPrimary = isPrimary;
            this.LevelEnd = levelEnd;
            this.LevelPrefix = levelPrefix;
            this.LevelStart = levelStart;
            this.Phone = phone;
            this.PhoneCountryCode = phoneCountryCode;
            this.PostalCode = postalCode;
            this.Recipient = recipient;
            this.State = state;
            this.Status = status;
            this.StreetAddress = streetAddress;
            this.StreetEnd = streetEnd;
            this.StreetName = streetName;
            this.StreetPrefix = streetPrefix;
            this.StreetStart = streetStart;
            this.StreetSuffix = streetSuffix;
            this.StreetSuffixDirection = streetSuffixDirection;
            this.Type = type;
            this.UnitEnd = unitEnd;
            this.UnitStart = unitStart;
            this.UnitType = unitType;
        }
        
        /// <summary>
        /// The first line of the address.
        /// </summary>
        /// <value>The first line of the address.</value>
        [DataMember(Name="addressLine1", EmitDefaultValue=false)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// The second line of the address.
        /// </summary>
        /// <value>The second line of the address.</value>
        [DataMember(Name="addressLine2", EmitDefaultValue=false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// The third line of the address.
        /// </summary>
        /// <value>The third line of the address.</value>
        [DataMember(Name="addressLine3", EmitDefaultValue=false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The name of the city
        /// </summary>
        /// <value>The name of the city</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public ContactAddressModelCountry Country { get; set; }

        /// <summary>
        /// Gets or Sets Direction
        /// </summary>
        [DataMember(Name="direction", EmitDefaultValue=false)]
        public ContactAddressModelDirection Direction { get; set; }

        /// <summary>
        ///  The date when the address takes effect.
        /// </summary>
        /// <value> The date when the address takes effect.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        ///  The date when the address expires.
        /// </summary>
        /// <value> The date when the address expires.</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// The fax number for the contact.
        /// </summary>
        /// <value>The fax number for the contact.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Fax Number Country Code
        /// </summary>
        /// <value>Fax Number Country Code</value>
        [DataMember(Name="faxCountryCode", EmitDefaultValue=false)]
        public string FaxCountryCode { get; set; }

        /// <summary>
        /// The ending street number that makes up the address.
        /// </summary>
        /// <value>The ending street number that makes up the address.</value>
        [DataMember(Name="houseAlphaEnd", EmitDefaultValue=false)]
        public string HouseAlphaEnd { get; set; }

        /// <summary>
        /// The beginning street number that makes up the address.
        /// </summary>
        /// <value>The beginning street number that makes up the address.</value>
        [DataMember(Name="houseAlphaStart", EmitDefaultValue=false)]
        public string HouseAlphaStart { get; set; }

        /// <summary>
        /// The id of the address assigned by the Civic Platform server.
        /// </summary>
        /// <value>The id of the address assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// The ending level number (floor number) that makes up the address within a complex.
        /// </summary>
        /// <value>The ending level number (floor number) that makes up the address within a complex.</value>
        [DataMember(Name="levelEnd", EmitDefaultValue=false)]
        public string LevelEnd { get; set; }

        /// <summary>
        /// The prefix for the level numbers (floor numbers) that make up the address.
        /// </summary>
        /// <value>The prefix for the level numbers (floor numbers) that make up the address.</value>
        [DataMember(Name="levelPrefix", EmitDefaultValue=false)]
        public string LevelPrefix { get; set; }

        /// <summary>
        /// The beginning level number (floor number) that makes up the address within a complex.
        /// </summary>
        /// <value>The beginning level number (floor number) that makes up the address within a complex.</value>
        [DataMember(Name="levelStart", EmitDefaultValue=false)]
        public string LevelStart { get; set; }

        /// <summary>
        /// The phone number of the user.
        /// </summary>
        /// <value>The phone number of the user.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// The country code for the assoicated phone number.
        /// </summary>
        /// <value>The country code for the assoicated phone number.</value>
        [DataMember(Name="phoneCountryCode", EmitDefaultValue=false)]
        public string PhoneCountryCode { get; set; }

        /// <summary>
        /// The postal ZIP code for the address.
        /// </summary>
        /// <value>The postal ZIP code for the address.</value>
        [DataMember(Name="postalCode", EmitDefaultValue=false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The contact person for the contact address.
        /// </summary>
        /// <value>The contact person for the contact address.</value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public ContactAddressModelState State { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ContactAddressModelStatus Status { get; set; }

        /// <summary>
        /// The street address.
        /// </summary>
        /// <value>The street address.</value>
        [DataMember(Name="streetAddress", EmitDefaultValue=false)]
        public string StreetAddress { get; set; }

        /// <summary>
        /// The end of a range of street numbers.
        /// </summary>
        /// <value>The end of a range of street numbers.</value>
        [DataMember(Name="streetEnd", EmitDefaultValue=false)]
        public long? StreetEnd { get; set; }

        /// <summary>
        /// The street name for the address.
        /// </summary>
        /// <value>The street name for the address.</value>
        [DataMember(Name="streetName", EmitDefaultValue=false)]
        public string StreetName { get; set; }

        /// <summary>
        /// Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \&quot;West\&quot; is the street prefix.
        /// </summary>
        /// <value>Any part of an address that appears before a street name or number. For example, if the address is 123 West Main, \&quot;West\&quot; is the street prefix.</value>
        [DataMember(Name="streetPrefix", EmitDefaultValue=false)]
        public string StreetPrefix { get; set; }

        /// <summary>
        /// The start of a range of street numbers.
        /// </summary>
        /// <value>The start of a range of street numbers.</value>
        [DataMember(Name="streetStart", EmitDefaultValue=false)]
        public long? StreetStart { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffix
        /// </summary>
        [DataMember(Name="streetSuffix", EmitDefaultValue=false)]
        public ContactAddressModelStreetSuffix StreetSuffix { get; set; }

        /// <summary>
        /// Gets or Sets StreetSuffixDirection
        /// </summary>
        [DataMember(Name="streetSuffixDirection", EmitDefaultValue=false)]
        public ContactAddressModelStreetSuffixDirection StreetSuffixDirection { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ContactAddressModelType Type { get; set; }

        /// <summary>
        /// The end parameter of a range of unit numbers.
        /// </summary>
        /// <value>The end parameter of a range of unit numbers.</value>
        [DataMember(Name="unitEnd", EmitDefaultValue=false)]
        public string UnitEnd { get; set; }

        /// <summary>
        /// The starting parameter of a range of unit numbers.
        /// </summary>
        /// <value>The starting parameter of a range of unit numbers.</value>
        [DataMember(Name="unitStart", EmitDefaultValue=false)]
        public string UnitStart { get; set; }

        /// <summary>
        /// Gets or Sets UnitType
        /// </summary>
        [DataMember(Name="unitType", EmitDefaultValue=false)]
        public ContactAddressModelUnitType UnitType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactAddressModel {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Direction: ").Append(Direction).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FaxCountryCode: ").Append(FaxCountryCode).Append("\n");
            sb.Append("  HouseAlphaEnd: ").Append(HouseAlphaEnd).Append("\n");
            sb.Append("  HouseAlphaStart: ").Append(HouseAlphaStart).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LevelEnd: ").Append(LevelEnd).Append("\n");
            sb.Append("  LevelPrefix: ").Append(LevelPrefix).Append("\n");
            sb.Append("  LevelStart: ").Append(LevelStart).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneCountryCode: ").Append(PhoneCountryCode).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  StreetEnd: ").Append(StreetEnd).Append("\n");
            sb.Append("  StreetName: ").Append(StreetName).Append("\n");
            sb.Append("  StreetPrefix: ").Append(StreetPrefix).Append("\n");
            sb.Append("  StreetStart: ").Append(StreetStart).Append("\n");
            sb.Append("  StreetSuffix: ").Append(StreetSuffix).Append("\n");
            sb.Append("  StreetSuffixDirection: ").Append(StreetSuffixDirection).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitEnd: ").Append(UnitEnd).Append("\n");
            sb.Append("  UnitStart: ").Append(UnitStart).Append("\n");
            sb.Append("  UnitType: ").Append(UnitType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ContactAddressModel);
        }

        /// <summary>
        /// Returns true if ContactAddressModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ContactAddressModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactAddressModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.Direction == input.Direction ||
                    (this.Direction != null &&
                    this.Direction.Equals(input.Direction))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FaxCountryCode == input.FaxCountryCode ||
                    (this.FaxCountryCode != null &&
                    this.FaxCountryCode.Equals(input.FaxCountryCode))
                ) && 
                (
                    this.HouseAlphaEnd == input.HouseAlphaEnd ||
                    (this.HouseAlphaEnd != null &&
                    this.HouseAlphaEnd.Equals(input.HouseAlphaEnd))
                ) && 
                (
                    this.HouseAlphaStart == input.HouseAlphaStart ||
                    (this.HouseAlphaStart != null &&
                    this.HouseAlphaStart.Equals(input.HouseAlphaStart))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LevelEnd == input.LevelEnd ||
                    (this.LevelEnd != null &&
                    this.LevelEnd.Equals(input.LevelEnd))
                ) && 
                (
                    this.LevelPrefix == input.LevelPrefix ||
                    (this.LevelPrefix != null &&
                    this.LevelPrefix.Equals(input.LevelPrefix))
                ) && 
                (
                    this.LevelStart == input.LevelStart ||
                    (this.LevelStart != null &&
                    this.LevelStart.Equals(input.LevelStart))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PhoneCountryCode == input.PhoneCountryCode ||
                    (this.PhoneCountryCode != null &&
                    this.PhoneCountryCode.Equals(input.PhoneCountryCode))
                ) && 
                (
                    this.PostalCode == input.PostalCode ||
                    (this.PostalCode != null &&
                    this.PostalCode.Equals(input.PostalCode))
                ) && 
                (
                    this.Recipient == input.Recipient ||
                    (this.Recipient != null &&
                    this.Recipient.Equals(input.Recipient))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StreetAddress == input.StreetAddress ||
                    (this.StreetAddress != null &&
                    this.StreetAddress.Equals(input.StreetAddress))
                ) && 
                (
                    this.StreetEnd == input.StreetEnd ||
                    (this.StreetEnd != null &&
                    this.StreetEnd.Equals(input.StreetEnd))
                ) && 
                (
                    this.StreetName == input.StreetName ||
                    (this.StreetName != null &&
                    this.StreetName.Equals(input.StreetName))
                ) && 
                (
                    this.StreetPrefix == input.StreetPrefix ||
                    (this.StreetPrefix != null &&
                    this.StreetPrefix.Equals(input.StreetPrefix))
                ) && 
                (
                    this.StreetStart == input.StreetStart ||
                    (this.StreetStart != null &&
                    this.StreetStart.Equals(input.StreetStart))
                ) && 
                (
                    this.StreetSuffix == input.StreetSuffix ||
                    (this.StreetSuffix != null &&
                    this.StreetSuffix.Equals(input.StreetSuffix))
                ) && 
                (
                    this.StreetSuffixDirection == input.StreetSuffixDirection ||
                    (this.StreetSuffixDirection != null &&
                    this.StreetSuffixDirection.Equals(input.StreetSuffixDirection))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnitEnd == input.UnitEnd ||
                    (this.UnitEnd != null &&
                    this.UnitEnd.Equals(input.UnitEnd))
                ) && 
                (
                    this.UnitStart == input.UnitStart ||
                    (this.UnitStart != null &&
                    this.UnitStart.Equals(input.UnitStart))
                ) && 
                (
                    this.UnitType == input.UnitType ||
                    (this.UnitType != null &&
                    this.UnitType.Equals(input.UnitType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                    hashCode = hashCode * 59 + this.AddressLine1.GetHashCode();
                if (this.AddressLine2 != null)
                    hashCode = hashCode * 59 + this.AddressLine2.GetHashCode();
                if (this.AddressLine3 != null)
                    hashCode = hashCode * 59 + this.AddressLine3.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.Direction != null)
                    hashCode = hashCode * 59 + this.Direction.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FaxCountryCode != null)
                    hashCode = hashCode * 59 + this.FaxCountryCode.GetHashCode();
                if (this.HouseAlphaEnd != null)
                    hashCode = hashCode * 59 + this.HouseAlphaEnd.GetHashCode();
                if (this.HouseAlphaStart != null)
                    hashCode = hashCode * 59 + this.HouseAlphaStart.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LevelEnd != null)
                    hashCode = hashCode * 59 + this.LevelEnd.GetHashCode();
                if (this.LevelPrefix != null)
                    hashCode = hashCode * 59 + this.LevelPrefix.GetHashCode();
                if (this.LevelStart != null)
                    hashCode = hashCode * 59 + this.LevelStart.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PhoneCountryCode != null)
                    hashCode = hashCode * 59 + this.PhoneCountryCode.GetHashCode();
                if (this.PostalCode != null)
                    hashCode = hashCode * 59 + this.PostalCode.GetHashCode();
                if (this.Recipient != null)
                    hashCode = hashCode * 59 + this.Recipient.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StreetAddress != null)
                    hashCode = hashCode * 59 + this.StreetAddress.GetHashCode();
                if (this.StreetEnd != null)
                    hashCode = hashCode * 59 + this.StreetEnd.GetHashCode();
                if (this.StreetName != null)
                    hashCode = hashCode * 59 + this.StreetName.GetHashCode();
                if (this.StreetPrefix != null)
                    hashCode = hashCode * 59 + this.StreetPrefix.GetHashCode();
                if (this.StreetStart != null)
                    hashCode = hashCode * 59 + this.StreetStart.GetHashCode();
                if (this.StreetSuffix != null)
                    hashCode = hashCode * 59 + this.StreetSuffix.GetHashCode();
                if (this.StreetSuffixDirection != null)
                    hashCode = hashCode * 59 + this.StreetSuffixDirection.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitEnd != null)
                    hashCode = hashCode * 59 + this.UnitEnd.GetHashCode();
                if (this.UnitStart != null)
                    hashCode = hashCode * 59 + this.UnitStart.GetHashCode();
                if (this.UnitType != null)
                    hashCode = hashCode * 59 + this.UnitType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
