/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// TrustAccountModel
    /// </summary>
    [DataContract]
    public partial class TrustAccountModel :  IEquatable<TrustAccountModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not to designate the trust account as the primary source.
        /// </summary>
        /// <value>Indicates whether or not to designate the trust account as the primary source.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsPrimaryEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not to designate the trust account as the primary source.
        /// </summary>
        /// <value>Indicates whether or not to designate the trust account as the primary source.</value>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public IsPrimaryEnum? IsPrimary { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TrustAccountModel" /> class.
        /// </summary>
        /// <param name="account">The account ID number for the trust account..</param>
        /// <param name="associations">associations.</param>
        /// <param name="balance">The balance of the trust account in dollars..</param>
        /// <param name="description">The description of the trust account..</param>
        /// <param name="id">The trust account system id assigned by the Civic Platform server..</param>
        /// <param name="isPrimary">Indicates whether or not to designate the trust account as the primary source..</param>
        /// <param name="ledgerAccount">The ledger account of the trust account..</param>
        /// <param name="overdraft">overdraft.</param>
        /// <param name="overdraftLimit">The overdraft limit amount, in dollars, for the trust account..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="status">status.</param>
        /// <param name="thresholdAmount">The minimum amount required in a trust account..</param>
        public TrustAccountModel(string account = default(string), TrustAccountModelAssociations associations = default(TrustAccountModelAssociations), double? balance = default(double?), string description = default(string), long? id = default(long?), IsPrimaryEnum? isPrimary = default(IsPrimaryEnum?), string ledgerAccount = default(string), TrustAccountModelOverdraft overdraft = default(TrustAccountModelOverdraft), double? overdraftLimit = default(double?), RecordIdModel recordId = default(RecordIdModel), string serviceProviderCode = default(string), TrustAccountModelStatus status = default(TrustAccountModelStatus), double? thresholdAmount = default(double?))
        {
            this.Account = account;
            this.Associations = associations;
            this.Balance = balance;
            this.Description = description;
            this.Id = id;
            this.IsPrimary = isPrimary;
            this.LedgerAccount = ledgerAccount;
            this.Overdraft = overdraft;
            this.OverdraftLimit = overdraftLimit;
            this.RecordId = recordId;
            this.ServiceProviderCode = serviceProviderCode;
            this.Status = status;
            this.ThresholdAmount = thresholdAmount;
        }
        
        /// <summary>
        /// The account ID number for the trust account.
        /// </summary>
        /// <value>The account ID number for the trust account.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations", EmitDefaultValue=false)]
        public TrustAccountModelAssociations Associations { get; set; }

        /// <summary>
        /// The balance of the trust account in dollars.
        /// </summary>
        /// <value>The balance of the trust account in dollars.</value>
        [DataMember(Name="balance", EmitDefaultValue=false)]
        public double? Balance { get; set; }

        /// <summary>
        /// The description of the trust account.
        /// </summary>
        /// <value>The description of the trust account.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The trust account system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The trust account system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }


        /// <summary>
        /// The ledger account of the trust account.
        /// </summary>
        /// <value>The ledger account of the trust account.</value>
        [DataMember(Name="ledgerAccount", EmitDefaultValue=false)]
        public string LedgerAccount { get; set; }

        /// <summary>
        /// Gets or Sets Overdraft
        /// </summary>
        [DataMember(Name="overdraft", EmitDefaultValue=false)]
        public TrustAccountModelOverdraft Overdraft { get; set; }

        /// <summary>
        /// The overdraft limit amount, in dollars, for the trust account.
        /// </summary>
        /// <value>The overdraft limit amount, in dollars, for the trust account.</value>
        [DataMember(Name="overdraftLimit", EmitDefaultValue=false)]
        public double? OverdraftLimit { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public TrustAccountModelStatus Status { get; set; }

        /// <summary>
        /// The minimum amount required in a trust account.
        /// </summary>
        /// <value>The minimum amount required in a trust account.</value>
        [DataMember(Name="thresholdAmount", EmitDefaultValue=false)]
        public double? ThresholdAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TrustAccountModel {\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Balance: ").Append(Balance).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LedgerAccount: ").Append(LedgerAccount).Append("\n");
            sb.Append("  Overdraft: ").Append(Overdraft).Append("\n");
            sb.Append("  OverdraftLimit: ").Append(OverdraftLimit).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ThresholdAmount: ").Append(ThresholdAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TrustAccountModel);
        }

        /// <summary>
        /// Returns true if TrustAccountModel instances are equal
        /// </summary>
        /// <param name="input">Instance of TrustAccountModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TrustAccountModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.Balance == input.Balance ||
                    (this.Balance != null &&
                    this.Balance.Equals(input.Balance))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LedgerAccount == input.LedgerAccount ||
                    (this.LedgerAccount != null &&
                    this.LedgerAccount.Equals(input.LedgerAccount))
                ) && 
                (
                    this.Overdraft == input.Overdraft ||
                    (this.Overdraft != null &&
                    this.Overdraft.Equals(input.Overdraft))
                ) && 
                (
                    this.OverdraftLimit == input.OverdraftLimit ||
                    (this.OverdraftLimit != null &&
                    this.OverdraftLimit.Equals(input.OverdraftLimit))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.ThresholdAmount == input.ThresholdAmount ||
                    (this.ThresholdAmount != null &&
                    this.ThresholdAmount.Equals(input.ThresholdAmount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this.Associations != null)
                    hashCode = hashCode * 59 + this.Associations.GetHashCode();
                if (this.Balance != null)
                    hashCode = hashCode * 59 + this.Balance.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LedgerAccount != null)
                    hashCode = hashCode * 59 + this.LedgerAccount.GetHashCode();
                if (this.Overdraft != null)
                    hashCode = hashCode * 59 + this.Overdraft.GetHashCode();
                if (this.OverdraftLimit != null)
                    hashCode = hashCode * 59 + this.OverdraftLimit.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.ThresholdAmount != null)
                    hashCode = hashCode * 59 + this.ThresholdAmount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
