/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// DepartmentModel
    /// </summary>
    [DataContract]
    public partial class DepartmentModel :  IEquatable<DepartmentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DepartmentModel" /> class.
        /// </summary>
        /// <param name="agency">The department agency.</param>
        /// <param name="bureau">The name of the bureau, which is an organization level within an agency..</param>
        /// <param name="division">The name of the division, which is an organization level within a bureau..</param>
        /// <param name="group">The department group..</param>
        /// <param name="id">The department system id assigned by the Civic Platform server..</param>
        /// <param name="office">An organization level within a group. An office is the final level within an organization structure. Agency-&gt;Bureau-&gt;Division-&gt;Section-&gt;Group-&gt;Office..</param>
        /// <param name="section">A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line..</param>
        /// <param name="serviceProviderCode">The unique agency identifier.</param>
        /// <param name="text">The department display text..</param>
        /// <param name="value">The department value..</param>
        public DepartmentModel(string agency = default(string), string bureau = default(string), string division = default(string), string group = default(string), string id = default(string), string office = default(string), string section = default(string), string serviceProviderCode = default(string), string text = default(string), string value = default(string))
        {
            this.Agency = agency;
            this.Bureau = bureau;
            this.Division = division;
            this.Group = group;
            this.Id = id;
            this.Office = office;
            this.Section = section;
            this.ServiceProviderCode = serviceProviderCode;
            this.Text = text;
            this.Value = value;
        }
        
        /// <summary>
        /// The department agency
        /// </summary>
        /// <value>The department agency</value>
        [DataMember(Name="agency", EmitDefaultValue=false)]
        public string Agency { get; set; }

        /// <summary>
        /// The name of the bureau, which is an organization level within an agency.
        /// </summary>
        /// <value>The name of the bureau, which is an organization level within an agency.</value>
        [DataMember(Name="bureau", EmitDefaultValue=false)]
        public string Bureau { get; set; }

        /// <summary>
        /// The name of the division, which is an organization level within a bureau.
        /// </summary>
        /// <value>The name of the division, which is an organization level within a bureau.</value>
        [DataMember(Name="division", EmitDefaultValue=false)]
        public string Division { get; set; }

        /// <summary>
        /// The department group.
        /// </summary>
        /// <value>The department group.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// The department system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The department system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// An organization level within a group. An office is the final level within an organization structure. Agency-&gt;Bureau-&gt;Division-&gt;Section-&gt;Group-&gt;Office.
        /// </summary>
        /// <value>An organization level within a group. An office is the final level within an organization structure. Agency-&gt;Bureau-&gt;Division-&gt;Section-&gt;Group-&gt;Office.</value>
        [DataMember(Name="office", EmitDefaultValue=false)]
        public string Office { get; set; }

        /// <summary>
        /// A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line.
        /// </summary>
        /// <value>A piece of a township measuring 640 acres, one square mile, numbered with reference to the base line and meridian line.</value>
        [DataMember(Name="section", EmitDefaultValue=false)]
        public string Section { get; set; }

        /// <summary>
        /// The unique agency identifier
        /// </summary>
        /// <value>The unique agency identifier</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// The department display text.
        /// </summary>
        /// <value>The department display text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The department value.
        /// </summary>
        /// <value>The department value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DepartmentModel {\n");
            sb.Append("  Agency: ").Append(Agency).Append("\n");
            sb.Append("  Bureau: ").Append(Bureau).Append("\n");
            sb.Append("  Division: ").Append(Division).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Office: ").Append(Office).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DepartmentModel);
        }

        /// <summary>
        /// Returns true if DepartmentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DepartmentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DepartmentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Agency == input.Agency ||
                    (this.Agency != null &&
                    this.Agency.Equals(input.Agency))
                ) && 
                (
                    this.Bureau == input.Bureau ||
                    (this.Bureau != null &&
                    this.Bureau.Equals(input.Bureau))
                ) && 
                (
                    this.Division == input.Division ||
                    (this.Division != null &&
                    this.Division.Equals(input.Division))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Office == input.Office ||
                    (this.Office != null &&
                    this.Office.Equals(input.Office))
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Agency != null)
                    hashCode = hashCode * 59 + this.Agency.GetHashCode();
                if (this.Bureau != null)
                    hashCode = hashCode * 59 + this.Bureau.GetHashCode();
                if (this.Division != null)
                    hashCode = hashCode * 59 + this.Division.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Office != null)
                    hashCode = hashCode * 59 + this.Office.GetHashCode();
                if (this.Section != null)
                    hashCode = hashCode * 59 + this.Section.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
