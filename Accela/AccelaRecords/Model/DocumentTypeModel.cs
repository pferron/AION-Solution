/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// DocumentTypeModel
    /// </summary>
    [DataContract]
    public partial class DocumentTypeModel :  IEquatable<DocumentTypeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeModel" /> class.
        /// </summary>
        /// <param name="deletable">Indicates whether or not the record can be deleted..</param>
        /// <param name="downloadable">Indicates whether or not the document type can be downloaded..</param>
        /// <param name="group">group.</param>
        /// <param name="id">The document category system id assigned by the Civic Platform server..</param>
        /// <param name="text">The localized display text..</param>
        /// <param name="uploadable">Indicates whether or not you can upload documents of the specified category..</param>
        /// <param name="value">The document category value..</param>
        /// <param name="viewable">Indicates whether or not you can view the document category associated with the record..</param>
        public DocumentTypeModel(bool? deletable = default(bool?), bool? downloadable = default(bool?), DocumentTypeModelGroup group = default(DocumentTypeModelGroup), string id = default(string), string text = default(string), bool? uploadable = default(bool?), string value = default(string), bool? viewable = default(bool?))
        {
            this.Deletable = deletable;
            this.Downloadable = downloadable;
            this.Group = group;
            this.Id = id;
            this.Text = text;
            this.Uploadable = uploadable;
            this.Value = value;
            this.Viewable = viewable;
        }
        
        /// <summary>
        /// Indicates whether or not the record can be deleted.
        /// </summary>
        /// <value>Indicates whether or not the record can be deleted.</value>
        [DataMember(Name="deletable", EmitDefaultValue=false)]
        public bool? Deletable { get; set; }

        /// <summary>
        /// Indicates whether or not the document type can be downloaded.
        /// </summary>
        /// <value>Indicates whether or not the document type can be downloaded.</value>
        [DataMember(Name="downloadable", EmitDefaultValue=false)]
        public bool? Downloadable { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public DocumentTypeModelGroup Group { get; set; }

        /// <summary>
        /// The document category system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The document category system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The localized display text.
        /// </summary>
        /// <value>The localized display text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Indicates whether or not you can upload documents of the specified category.
        /// </summary>
        /// <value>Indicates whether or not you can upload documents of the specified category.</value>
        [DataMember(Name="uploadable", EmitDefaultValue=false)]
        public bool? Uploadable { get; set; }

        /// <summary>
        /// The document category value.
        /// </summary>
        /// <value>The document category value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Indicates whether or not you can view the document category associated with the record.
        /// </summary>
        /// <value>Indicates whether or not you can view the document category associated with the record.</value>
        [DataMember(Name="viewable", EmitDefaultValue=false)]
        public bool? Viewable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentTypeModel {\n");
            sb.Append("  Deletable: ").Append(Deletable).Append("\n");
            sb.Append("  Downloadable: ").Append(Downloadable).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Uploadable: ").Append(Uploadable).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Viewable: ").Append(Viewable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTypeModel);
        }

        /// <summary>
        /// Returns true if DocumentTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Deletable == input.Deletable ||
                    (this.Deletable != null &&
                    this.Deletable.Equals(input.Deletable))
                ) && 
                (
                    this.Downloadable == input.Downloadable ||
                    (this.Downloadable != null &&
                    this.Downloadable.Equals(input.Downloadable))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Uploadable == input.Uploadable ||
                    (this.Uploadable != null &&
                    this.Uploadable.Equals(input.Uploadable))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && 
                (
                    this.Viewable == input.Viewable ||
                    (this.Viewable != null &&
                    this.Viewable.Equals(input.Viewable))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Deletable != null)
                    hashCode = hashCode * 59 + this.Deletable.GetHashCode();
                if (this.Downloadable != null)
                    hashCode = hashCode * 59 + this.Downloadable.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Uploadable != null)
                    hashCode = hashCode * 59 + this.Uploadable.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Viewable != null)
                    hashCode = hashCode * 59 + this.Viewable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
