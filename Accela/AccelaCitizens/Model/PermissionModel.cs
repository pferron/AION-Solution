/* 
 * Citizens
 *
 * The Citizens API include endpoints for citizen users to manage their own accounts, authorized users to manage other accounts, and manage citizen delegates, announcements, and invitations. 
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaCitizens.Client.SwaggerDateConverter;

namespace AccelaCitizens.Model
{
    /// <summary>
    /// PermissionModel
    /// </summary>
    [DataContract]
    public partial class PermissionModel :  IEquatable<PermissionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PermissionModel" /> class.
        /// </summary>
        /// <param name="level">level.</param>
        /// <param name="allowedActions">An action the user is allowed to perform.</param>
        public PermissionModel(PermissionLevelModel level = default(PermissionLevelModel), List<string> allowedActions = default(List<string>))
        {
            this.Level = level;
            this.AllowedActions = allowedActions;
        }
        
        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name="level", EmitDefaultValue=false)]
        public PermissionLevelModel Level { get; set; }

        /// <summary>
        /// An action the user is allowed to perform
        /// </summary>
        /// <value>An action the user is allowed to perform</value>
        [DataMember(Name="allowedActions", EmitDefaultValue=false)]
        public List<string> AllowedActions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PermissionModel {\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  AllowedActions: ").Append(AllowedActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PermissionModel);
        }

        /// <summary>
        /// Returns true if PermissionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PermissionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PermissionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Level == input.Level ||
                    (this.Level != null &&
                    this.Level.Equals(input.Level))
                ) && 
                (
                    this.AllowedActions == input.AllowedActions ||
                    this.AllowedActions != null &&
                    this.AllowedActions.SequenceEqual(input.AllowedActions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Level != null)
                    hashCode = hashCode * 59 + this.Level.GetHashCode();
                if (this.AllowedActions != null)
                    hashCode = hashCode * 59 + this.AllowedActions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
