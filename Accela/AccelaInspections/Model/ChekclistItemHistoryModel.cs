/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// ChekclistItemHistoryModel
    /// </summary>
    [DataContract]
    public partial class ChekclistItemHistoryModel :  IEquatable<ChekclistItemHistoryModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChekclistItemHistoryModel" /> class.
        /// </summary>
        /// <param name="checklistItemId">The checklist item id..</param>
        /// <param name="comments">Comments or note about the checklist item..</param>
        /// <param name="inspectionType">The inspection type..</param>
        /// <param name="isRequired">Indicates whether or not the field is required..</param>
        /// <param name="majorViolation">majorViolation.</param>
        /// <param name="score">The inspection score related to the checklist item..</param>
        /// <param name="status">The checklist item status..</param>
        /// <param name="updatedBy">The user who last updated the checklist item..</param>
        /// <param name="updatedDate">The date and time the checklist item was last updated..</param>
        public ChekclistItemHistoryModel(long? checklistItemId = default(long?), string comments = default(string), string inspectionType = default(string), IsRequiredEnum? isRequired = default(IsRequiredEnum?), ChekclistItemHistoryModelMajorViolation majorViolation = default(ChekclistItemHistoryModelMajorViolation), long? score = default(long?), string status = default(string), string updatedBy = default(string), DateTime? updatedDate = default(DateTime?))
        {
            this.ChecklistItemId = checklistItemId;
            this.Comments = comments;
            this.InspectionType = inspectionType;
            this.IsRequired = isRequired;
            this.MajorViolation = majorViolation;
            this.Score = score;
            this.Status = status;
            this.UpdatedBy = updatedBy;
            this.UpdatedDate = updatedDate;
        }
        
        /// <summary>
        /// The checklist item id.
        /// </summary>
        /// <value>The checklist item id.</value>
        [DataMember(Name="checklistItemId", EmitDefaultValue=false)]
        public long? ChecklistItemId { get; set; }

        /// <summary>
        /// Comments or note about the checklist item.
        /// </summary>
        /// <value>Comments or note about the checklist item.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The inspection type.
        /// </summary>
        /// <value>The inspection type.</value>
        [DataMember(Name="inspectionType", EmitDefaultValue=false)]
        public string InspectionType { get; set; }


        /// <summary>
        /// Gets or Sets MajorViolation
        /// </summary>
        [DataMember(Name="majorViolation", EmitDefaultValue=false)]
        public ChekclistItemHistoryModelMajorViolation MajorViolation { get; set; }

        /// <summary>
        /// The inspection score related to the checklist item.
        /// </summary>
        /// <value>The inspection score related to the checklist item.</value>
        [DataMember(Name="score", EmitDefaultValue=false)]
        public long? Score { get; set; }

        /// <summary>
        /// The checklist item status.
        /// </summary>
        /// <value>The checklist item status.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The user who last updated the checklist item.
        /// </summary>
        /// <value>The user who last updated the checklist item.</value>
        [DataMember(Name="updatedBy", EmitDefaultValue=false)]
        public string UpdatedBy { get; set; }

        /// <summary>
        /// The date and time the checklist item was last updated.
        /// </summary>
        /// <value>The date and time the checklist item was last updated.</value>
        [DataMember(Name="updatedDate", EmitDefaultValue=false)]
        public DateTime? UpdatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChekclistItemHistoryModel {\n");
            sb.Append("  ChecklistItemId: ").Append(ChecklistItemId).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  InspectionType: ").Append(InspectionType).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  MajorViolation: ").Append(MajorViolation).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UpdatedBy: ").Append(UpdatedBy).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChekclistItemHistoryModel);
        }

        /// <summary>
        /// Returns true if ChekclistItemHistoryModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ChekclistItemHistoryModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChekclistItemHistoryModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChecklistItemId == input.ChecklistItemId ||
                    (this.ChecklistItemId != null &&
                    this.ChecklistItemId.Equals(input.ChecklistItemId))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.InspectionType == input.InspectionType ||
                    (this.InspectionType != null &&
                    this.InspectionType.Equals(input.InspectionType))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.MajorViolation == input.MajorViolation ||
                    (this.MajorViolation != null &&
                    this.MajorViolation.Equals(input.MajorViolation))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UpdatedBy == input.UpdatedBy ||
                    (this.UpdatedBy != null &&
                    this.UpdatedBy.Equals(input.UpdatedBy))
                ) && 
                (
                    this.UpdatedDate == input.UpdatedDate ||
                    (this.UpdatedDate != null &&
                    this.UpdatedDate.Equals(input.UpdatedDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChecklistItemId != null)
                    hashCode = hashCode * 59 + this.ChecklistItemId.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.InspectionType != null)
                    hashCode = hashCode * 59 + this.InspectionType.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.MajorViolation != null)
                    hashCode = hashCode * 59 + this.MajorViolation.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UpdatedBy != null)
                    hashCode = hashCode * 59 + this.UpdatedBy.GetHashCode();
                if (this.UpdatedDate != null)
                    hashCode = hashCode * 59 + this.UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
