/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// FeeItemBaseModel
    /// </summary>
    [DataContract]
    public partial class FeeItemBaseModel :  IEquatable<FeeItemBaseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FeeItemBaseModel" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="feeNotes">Notes about the fee..</param>
        /// <param name="id">The fee item system id assigned by the Civic Platform server..</param>
        /// <param name="paymentPeriod">paymentPeriod.</param>
        /// <param name="quantity">The number of units for which the same fee applies..</param>
        /// <param name="schedule">schedule.</param>
        /// <param name="version">version.</param>
        public FeeItemBaseModel(FeeItemBaseModelCode code = default(FeeItemBaseModelCode), string feeNotes = default(string), long? id = default(long?), FeeItemBaseModelPaymentPeriod paymentPeriod = default(FeeItemBaseModelPaymentPeriod), double? quantity = default(double?), FeeItemBaseModelSchedule schedule = default(FeeItemBaseModelSchedule), FeeItemBaseModelVersion version = default(FeeItemBaseModelVersion))
        {
            this.Code = code;
            this.FeeNotes = feeNotes;
            this.Id = id;
            this.PaymentPeriod = paymentPeriod;
            this.Quantity = quantity;
            this.Schedule = schedule;
            this.Version = version;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public FeeItemBaseModelCode Code { get; set; }

        /// <summary>
        /// Notes about the fee.
        /// </summary>
        /// <value>Notes about the fee.</value>
        [DataMember(Name="feeNotes", EmitDefaultValue=false)]
        public string FeeNotes { get; set; }

        /// <summary>
        /// The fee item system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The fee item system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets PaymentPeriod
        /// </summary>
        [DataMember(Name="paymentPeriod", EmitDefaultValue=false)]
        public FeeItemBaseModelPaymentPeriod PaymentPeriod { get; set; }

        /// <summary>
        /// The number of units for which the same fee applies.
        /// </summary>
        /// <value>The number of units for which the same fee applies.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Schedule
        /// </summary>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public FeeItemBaseModelSchedule Schedule { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public FeeItemBaseModelVersion Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeeItemBaseModel {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  FeeNotes: ").Append(FeeNotes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PaymentPeriod: ").Append(PaymentPeriod).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FeeItemBaseModel);
        }

        /// <summary>
        /// Returns true if FeeItemBaseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of FeeItemBaseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeeItemBaseModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.FeeNotes == input.FeeNotes ||
                    (this.FeeNotes != null &&
                    this.FeeNotes.Equals(input.FeeNotes))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.PaymentPeriod == input.PaymentPeriod ||
                    (this.PaymentPeriod != null &&
                    this.PaymentPeriod.Equals(input.PaymentPeriod))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Schedule == input.Schedule ||
                    (this.Schedule != null &&
                    this.Schedule.Equals(input.Schedule))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.FeeNotes != null)
                    hashCode = hashCode * 59 + this.FeeNotes.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PaymentPeriod != null)
                    hashCode = hashCode * 59 + this.PaymentPeriod.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Schedule != null)
                    hashCode = hashCode * 59 + this.Schedule.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
