/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using RestSharp;
using AccelaRecords.Client;
using AccelaRecords.Model;

namespace AccelaRecords.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsWorkflowsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Workflow Tasks for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemModelArray</returns>
        ResponseTaskItemModelArray V4GetRecordsRecordIdWorkflowTasks (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Workflow Tasks for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemModelArray</returns>
        ApiResponse<ResponseTaskItemModelArray> V4GetRecordsRecordIdWorkflowTasksWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get Workflow Task Comment Histories
        /// </summary>
        /// <remarks>
        /// Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseWorkflowTaskCommentModelArray</returns>
        ResponseWorkflowTaskCommentModelArray V4GetRecordsRecordIdWorkflowTasksCommentsHistories (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get Workflow Task Comment Histories
        /// </summary>
        /// <remarks>
        /// Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseWorkflowTaskCommentModelArray</returns>
        ApiResponse<ResponseWorkflowTaskCommentModelArray> V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Workflow Task History for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemActionModelArray</returns>
        ResponseTaskItemActionModelArray V4GetRecordsRecordIdWorkflowTasksHistories (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Workflow Task History for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemActionModelArray</returns>
        ApiResponse<ResponseTaskItemActionModelArray> V4GetRecordsRecordIdWorkflowTasksHistoriesWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemModelArray</returns>
        ResponseTaskItemModelArray V4GetRecordsRecordIdWorkflowTasksId (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemModelArray</returns>
        ApiResponse<ResponseTaskItemModelArray> V4GetRecordsRecordIdWorkflowTasksIdWithHttpInfo (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Statuses for Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseIdentifierModelArray</returns>
        ResponseIdentifierModelArray V4GetRecordsRecordIdWorkflowTasksIdStatuses (string contentType, string authorization, string recordId, string id, string lang = null);

        /// <summary>
        /// Get All Statuses for Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseIdentifierModelArray</returns>
        ApiResponse<ResponseIdentifierModelArray> V4GetRecordsRecordIdWorkflowTasksIdStatusesWithHttpInfo (string contentType, string authorization, string recordId, string id, string lang = null);
        /// <summary>
        /// Get All Custom Forms for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        ResponseCustomAttributeModelArray V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms (string contentType, string authorization, string recordId, string taskId, string lang = null);

        /// <summary>
        /// Get All Custom Forms for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        ApiResponse<ResponseCustomAttributeModelArray> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        ApiResponse<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemModel</returns>
        ResponseTaskItemModel V4PutRecordsRecordIdWorkflowTasksId (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemModel</returns>
        ApiResponse<ResponseTaskItemModel> V4PutRecordsRecordIdWorkflowTasksIdWithHttpInfo (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Form for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null);

        /// <summary>
        /// Update Custom Form for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Workflow Tasks for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemModelArray</returns>
       // System.Threading.Tasks.Task<ResponseTaskItemModelArray> V4GetRecordsRecordIdWorkflowTasksAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksAsync(string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Workflow Tasks for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemModelArray)</returns>
     //   System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemModelArray>> V4GetRecordsRecordIdWorkflowTasksAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksAsyncWithHttpInfo(string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get Workflow Task Comment Histories
        /// </summary>
        /// <remarks>
        /// Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseWorkflowTaskCommentModelArray</returns>
        System.Threading.Tasks.Task<ResponseWorkflowTaskCommentModelArray> V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        /// <summary>
        /// Get Workflow Task Comment Histories
        /// </summary>
        /// <remarks>
        /// Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseWorkflowTaskCommentModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseWorkflowTaskCommentModelArray>> V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);
        /// <summary>
        /// Get All Workflow Task History for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemActionModelArray</returns>
        System.Threading.Tasks.Task<ResponseTaskItemActionModelArray> V4GetRecordsRecordIdWorkflowTasksHistoriesAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksHistoriesStringAsync(string contentType, string authorization, string recordId, string fields = null, string lang = null);


        /// <summary>
        /// Get All Workflow Task History for Record
        /// </summary>
        /// <remarks>
        /// Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemActionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemActionModelArray>> V4GetRecordsRecordIdWorkflowTasksHistoriesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null);

        System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksHistoriesStringAsyncWithHttpInfo(string contentType, string authorization, string recordId, string fields = null, string lang = null);



        /// <summary>
        /// Get Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemModelArray</returns>
        System.Threading.Tasks.Task<ResponseTaskItemModelArray> V4GetRecordsRecordIdWorkflowTasksIdAsync (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null);

        /// <summary>
        /// Get Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemModelArray>> V4GetRecordsRecordIdWorkflowTasksIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null);
        /// <summary>
        /// Get All Statuses for Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseIdentifierModelArray</returns>
        System.Threading.Tasks.Task<ResponseIdentifierModelArray> V4GetRecordsRecordIdWorkflowTasksIdStatusesAsync (string contentType, string authorization, string recordId, string id, string lang = null);

        /// <summary>
        /// Get All Statuses for Workflow Task
        /// </summary>
        /// <remarks>
        /// Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseIdentifierModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseIdentifierModelArray>> V4GetRecordsRecordIdWorkflowTasksIdStatusesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string id, string lang = null);
        /// <summary>
        /// Get All Custom Forms for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsync (string contentType, string authorization, string recordId, string taskId, string lang = null);

        System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsStringAsync(string contentType, string authorization, string recordId, string taskId, string lang = null);


        /// <summary>
        /// Get All Custom Forms for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string lang = null);
        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaAsync (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null);

        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null);
        /// <summary>
        /// Update Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemModel</returns>
        System.Threading.Tasks.Task<ResponseTaskItemModel> V4PutRecordsRecordIdWorkflowTasksIdAsync (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null);

        /// <summary>
        /// Update Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemModel>> V4PutRecordsRecordIdWorkflowTasksIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null);
        /// <summary>
        /// Update Custom Form for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsync (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null);

        /// <summary>
        /// Update Custom Form for Record Workflow Task
        /// </summary>
        /// <remarks>
        /// Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </remarks>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsWorkflowsApi : IRecordsWorkflowsApi
    {
        private AccelaRecords.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsWorkflowsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsWorkflowsApi(String basePath)
        {
            this.Configuration = new AccelaRecords.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsWorkflowsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsWorkflowsApi(AccelaRecords.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaRecords.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaRecords.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaRecords.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaRecords.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Workflow Tasks for Record Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemModelArray</returns>
        public ResponseTaskItemModelArray V4GetRecordsRecordIdWorkflowTasks (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Workflow Tasks for Record Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemModelArray</returns>
        public ApiResponse< ResponseTaskItemModelArray > V4GetRecordsRecordIdWorkflowTasksWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasks");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasks");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasks");

            var localVarPath = "/v4/records/{recordId}/workflowTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemModelArray)));
        }

        /// <summary>
        /// Get All Workflow Tasks for Record Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemModelArray</returns>
      //  public async System.Threading.Tasks.Task<ResponseTaskItemModelArray> V4GetRecordsRecordIdWorkflowTasksAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        public async Task<string> V4GetRecordsRecordIdWorkflowTasksAsync(string contentType, string authorization, string recordId, string fields = null, string lang = null)

        {
            string localVarResponse = await V4GetRecordsRecordIdWorkflowTasksAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse;

        }

        /// <summary>
        /// Get All Workflow Tasks for Record Gets all the workflow tasks associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemModelArray)</returns>
     //   public async System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemModelArray>> V4GetRecordsRecordIdWorkflowTasksAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        public async System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksAsyncWithHttpInfo(string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasks");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasks");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasks");

            var localVarPath = "/v4/records/{recordId}/workflowTasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasks", localVarResponse);
                if (exception != null) throw exception;
            }
            /* Changed to retur n simle Json string value 

            return new ApiResponse<ResponseTaskItemModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemModelArray)));
               */
            return localVarResponse.Content;
        }

        /// <summary>
        /// Get Workflow Task Comment Histories Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseWorkflowTaskCommentModelArray</returns>
        public ResponseWorkflowTaskCommentModelArray V4GetRecordsRecordIdWorkflowTasksCommentsHistories (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseWorkflowTaskCommentModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Workflow Task Comment Histories Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseWorkflowTaskCommentModelArray</returns>
        public ApiResponse< ResponseWorkflowTaskCommentModelArray > V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksCommentsHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksCommentsHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksCommentsHistories");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/comments/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksCommentsHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseWorkflowTaskCommentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseWorkflowTaskCommentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseWorkflowTaskCommentModelArray)));
        }

        /// <summary>
        /// Get Workflow Task Comment Histories Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseWorkflowTaskCommentModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseWorkflowTaskCommentModelArray> V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseWorkflowTaskCommentModelArray> localVarResponse = await V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Workflow Task Comment Histories Gets the workflow task comment history for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/comments/histories   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseWorkflowTaskCommentModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseWorkflowTaskCommentModelArray>> V4GetRecordsRecordIdWorkflowTasksCommentsHistoriesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksCommentsHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksCommentsHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksCommentsHistories");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/comments/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksCommentsHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseWorkflowTaskCommentModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseWorkflowTaskCommentModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseWorkflowTaskCommentModelArray)));
        }

        /// <summary>
        /// Get All Workflow Task History for Record Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemActionModelArray</returns>
        public ResponseTaskItemActionModelArray V4GetRecordsRecordIdWorkflowTasksHistories (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemActionModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksHistoriesWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Workflow Task History for Record Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemActionModelArray</returns>
        public ApiResponse< ResponseTaskItemActionModelArray > V4GetRecordsRecordIdWorkflowTasksHistoriesWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemActionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemActionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemActionModelArray)));
        }

        /// <summary>
        /// Get All Workflow Task History for Record Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemActionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTaskItemActionModelArray> V4GetRecordsRecordIdWorkflowTasksHistoriesAsync (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemActionModelArray> localVarResponse = await V4GetRecordsRecordIdWorkflowTasksHistoriesAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
             return localVarResponse.Data;

        }

        public async System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksHistoriesStringAsync(string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            var localVarResult = await V4GetRecordsRecordIdWorkflowTasksHistoriesStringAsyncWithHttpInfo(contentType, authorization, recordId, fields, lang);
            return localVarResult;

        }
        
        /// <summary>
        /// Get All Workflow Task History for Record Gets all the workflow task history associated with the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/histories  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemActionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemActionModelArray>> V4GetRecordsRecordIdWorkflowTasksHistoriesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksHistories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemActionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemActionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemActionModelArray)));
        }

        public async System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksHistoriesStringAsyncWithHttpInfo(string contentType, string authorization, string recordId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksHistories");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/histories";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksHistoriesString", localVarResponse);
                if (exception != null) throw exception;
            }

            return localVarResponse.Content.ToString();
        }

        /// <summary>
        /// Get Record Workflow Task Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemModelArray</returns>
        public ResponseTaskItemModelArray V4GetRecordsRecordIdWorkflowTasksId (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksIdWithHttpInfo(contentType, authorization, recordId, id, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Record Workflow Task Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemModelArray</returns>
        public ApiResponse< ResponseTaskItemModelArray > V4GetRecordsRecordIdWorkflowTasksIdWithHttpInfo (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemModelArray)));
        }

        /// <summary>
        /// Get Record Workflow Task Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseTaskItemModelArray> V4GetRecordsRecordIdWorkflowTasksIdAsync (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemModelArray> localVarResponse = await V4GetRecordsRecordIdWorkflowTasksIdAsyncWithHttpInfo(contentType, authorization, recordId, id, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Record Workflow Task Gets the requested workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemModelArray>> V4GetRecordsRecordIdWorkflowTasksIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, string id, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksId");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemModelArray)));
        }

        /// <summary>
        /// Get All Statuses for Workflow Task Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseIdentifierModelArray</returns>
        public ResponseIdentifierModelArray V4GetRecordsRecordIdWorkflowTasksIdStatuses (string contentType, string authorization, string recordId, string id, string lang = null)
        {
             ApiResponse<ResponseIdentifierModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksIdStatusesWithHttpInfo(contentType, authorization, recordId, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Statuses for Workflow Task Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseIdentifierModelArray</returns>
        public ApiResponse< ResponseIdentifierModelArray > V4GetRecordsRecordIdWorkflowTasksIdStatusesWithHttpInfo (string contentType, string authorization, string recordId, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{id}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksIdStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseIdentifierModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseIdentifierModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseIdentifierModelArray)));
        }

        /// <summary>
        /// Get All Statuses for Workflow Task Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseIdentifierModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseIdentifierModelArray> V4GetRecordsRecordIdWorkflowTasksIdStatusesAsync (string contentType, string authorization, string recordId, string id, string lang = null)
        {
             ApiResponse<ResponseIdentifierModelArray> localVarResponse = await V4GetRecordsRecordIdWorkflowTasksIdStatusesAsyncWithHttpInfo(contentType, authorization, recordId, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Statuses for Workflow Task Gets the status of the specified workflow task for the specified record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{id}/statuses  **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseIdentifierModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseIdentifierModelArray>> V4GetRecordsRecordIdWorkflowTasksIdStatusesAsyncWithHttpInfo (string contentType, string authorization, string recordId, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksIdStatuses");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{id}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksIdStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseIdentifierModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseIdentifierModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseIdentifierModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms for Record Workflow Task Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        public ResponseCustomAttributeModelArray V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms (string contentType, string authorization, string recordId, string taskId, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsWithHttpInfo(contentType, authorization, recordId, taskId, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms for Record Workflow Task Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        public ApiResponse< ResponseCustomAttributeModelArray > V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms for Record Workflow Task Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsync (string contentType, string authorization, string recordId, string taskId, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = await V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsyncWithHttpInfo(contentType, authorization, recordId, taskId, lang);
             return localVarResponse.Data;

        }

        public async System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsStringAsync(string contentType, string authorization, string recordId, string taskId, string lang = null)
        {
            string localVarResponse = await V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsStringAsyncWithHttpInfo(contentType, authorization, recordId, taskId, lang);
            return localVarResponse;
        }


        /// <summary>
        /// Get All Custom Forms for Record Workflow Task Returns the custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  All  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        public async System.Threading.Tasks.Task<string> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsStringAsyncWithHttpInfo(string contentType, string authorization, string recordId, string taskId, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksTaskIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }
            //return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
            //    localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
            //    (ResponseCustomAttributeModelArray)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
            return localVarResponse.Content;
        }


        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomFormSubgroupModelArray</returns>
        public ResponseCustomFormSubgroupModelArray V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaWithHttpInfo(contentType, authorization, recordId, taskId, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomFormSubgroupModelArray</returns>
        public ApiResponse< ResponseCustomFormSubgroupModelArray > V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomFormSubgroupModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomFormSubgroupModelArray> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaAsync (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null)
        {
             ApiResponse<ResponseCustomFormSubgroupModelArray> localVarResponse = await V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaAsyncWithHttpInfo(contentType, authorization, recordId, taskId, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Custom Forms Metadata for Record Workflow Task Returns the metadata associated with all custom forms for a given workflow task for a specific record. **API Endpoint**:  GET /v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomFormSubgroupModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomFormSubgroupModelArray>> V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMetaAsyncWithHttpInfo (string contentType, string authorization, string recordId, string taskId, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetRecordsRecordIdWorkflowTasksTaskIdCustomFormsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomFormSubgroupModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseCustomFormSubgroupModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomFormSubgroupModelArray)));
        }

        /// <summary>
        /// Update Record Workflow Task Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseTaskItemModel</returns>
        public ResponseTaskItemModel V4PutRecordsRecordIdWorkflowTasksId (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemModel> localVarResponse = V4PutRecordsRecordIdWorkflowTasksIdWithHttpInfo(contentType, authorization, recordId, id, body, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Record Workflow Task Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseTaskItemModel</returns>
        public ApiResponse< ResponseTaskItemModel > V4PutRecordsRecordIdWorkflowTasksIdWithHttpInfo (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdWorkflowTasksId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemModel)));
        }

        /// <summary>
        /// Update Record Workflow Task Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseTaskItemModel</returns>
        public async System.Threading.Tasks.Task<ResponseTaskItemModel> V4PutRecordsRecordIdWorkflowTasksIdAsync (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null)
        {
             ApiResponse<ResponseTaskItemModel> localVarResponse = await V4PutRecordsRecordIdWorkflowTasksIdAsyncWithHttpInfo(contentType, authorization, recordId, id, body, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Record Workflow Task Updates the requested workflow task for the specified record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{id}  **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 7.3.2 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="id">The ID of task to fetch.</param>
        /// <param name="body">The task information to be updated</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseTaskItemModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseTaskItemModel>> V4PutRecordsRecordIdWorkflowTasksIdAsyncWithHttpInfo (string contentType, string authorization, string recordId, string id, RequestTaskItemModel body, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksId");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdWorkflowTasksId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseTaskItemModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseTaskItemModel) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseTaskItemModel)));
        }

        /// <summary>
        /// Update Custom Form for Record Workflow Task Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsWithHttpInfo(contentType, authorization, recordId, taskId, body, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Custom Form for Record Workflow Task Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsWithHttpInfo (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Custom Form for Record Workflow Task Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsync (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsyncWithHttpInfo(contentType, authorization, recordId, taskId, body, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Custom Form for Record Workflow Task Updates custom forms containing task-specific information for a given workflow task for a specific record. **API Endpoint**:  PUT /v4/records/{recordId}/workflowTasks/{taskId}/customForms   **Scope**:  records  **App Type**:  Agency  **Authorization Type**:  Access token  **Civic Platform version**: 8.0.3 
        /// </summary>
        /// <exception cref="AccelaRecords.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="recordId">The ID of the record to fetch. See [Get All Records](./api-records.html#operation/v4.get.records), [Search Records](./api-search.html#operation/v4.post.search.records), or [Get My Records](./api-records.html#operation/v4.get.records.mine).</param>
        /// <param name="taskId">The ID of the workflow task to fetch.</param>
        /// <param name="body">The custom form information to be updated. Ex. [{\&quot;apiField1\&quot;: \&quot;val1\&quot;, \&quot;id\&quot;: \&quot;group-subGroup\&quot;   }]</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutRecordsRecordIdWorkflowTasksTaskIdCustomFormsAsyncWithHttpInfo (string contentType, string authorization, string recordId, string taskId, List<CustomAttributeModel> body, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'recordId' is set
            if (recordId == null)
                throw new ApiException(400, "Missing required parameter 'recordId' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'taskId' is set
            if (taskId == null)
                throw new ApiException(400, "Missing required parameter 'taskId' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RecordsWorkflowsApi->V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms");

            var localVarPath = "/v4/records/{recordId}/workflowTasks/{taskId}/customForms";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recordId != null) localVarPathParams.Add("recordId", this.Configuration.ApiClient.ParameterToString(recordId)); // path parameter
            if (taskId != null) localVarPathParams.Add("taskId", this.Configuration.ApiClient.ParameterToString(taskId)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutRecordsRecordIdWorkflowTasksTaskIdCustomForms", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
