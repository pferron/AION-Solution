/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// InspectionRelatedModel
    /// </summary>
    [DataContract]
    public partial class InspectionRelatedModel :  IEquatable<InspectionRelatedModel>, IValidatableObject
    {
        /// <summary>
        /// This defines whether or not the item is billable.
        /// </summary>
        /// <value>This defines whether or not the item is billable.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum BillableEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// This defines whether or not the item is billable.
        /// </summary>
        /// <value>This defines whether or not the item is billable.</value>
        [DataMember(Name="billable", EmitDefaultValue=false)]
        public BillableEnum? Billable { get; set; }
        /// <summary>
        /// The type of inspection record relationship.
        /// </summary>
        /// <value>The type of inspection record relationship.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RelationshipEnum
        {
            
            /// <summary>
            /// Enum Child for value: Child
            /// </summary>
            [EnumMember(Value = "Child")]
            Child = 1,
            
            /// <summary>
            /// Enum Parent for value: Parent
            /// </summary>
            [EnumMember(Value = "Parent")]
            Parent = 2,
            
            /// <summary>
            /// Enum Renewal for value: Renewal
            /// </summary>
            [EnumMember(Value = "Renewal")]
            Renewal = 3
        }

        /// <summary>
        /// The type of inspection record relationship.
        /// </summary>
        /// <value>The type of inspection record relationship.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public RelationshipEnum? Relationship { get; set; }
        /// <summary>
        /// Indicates whether the scheduleEndTime is in the AM or PM.
        /// </summary>
        /// <value>Indicates whether the scheduleEndTime is in the AM or PM.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleEndAMPMEnum
        {
            
            /// <summary>
            /// Enum AM for value: AM
            /// </summary>
            [EnumMember(Value = "AM")]
            AM = 1,
            
            /// <summary>
            /// Enum PM for value: PM
            /// </summary>
            [EnumMember(Value = "PM")]
            PM = 2
        }

        /// <summary>
        /// Indicates whether the scheduleEndTime is in the AM or PM.
        /// </summary>
        /// <value>Indicates whether the scheduleEndTime is in the AM or PM.</value>
        [DataMember(Name="scheduleEndAMPM", EmitDefaultValue=false)]
        public ScheduleEndAMPMEnum? ScheduleEndAMPM { get; set; }
        /// <summary>
        /// AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight.
        /// </summary>
        /// <value>AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScheduleStartAMPMEnum
        {
            
            /// <summary>
            /// Enum AM for value: AM
            /// </summary>
            [EnumMember(Value = "AM")]
            AM = 1,
            
            /// <summary>
            /// Enum PM for value: PM
            /// </summary>
            [EnumMember(Value = "PM")]
            PM = 2
        }

        /// <summary>
        /// AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight.
        /// </summary>
        /// <value>AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight.</value>
        [DataMember(Name="scheduleStartAMPM", EmitDefaultValue=false)]
        public ScheduleStartAMPMEnum? ScheduleStartAMPM { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InspectionRelatedModel" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="billable">This defines whether or not the item is billable..</param>
        /// <param name="category">The inspection category, which is used to organize inspection types. An inspection type is assigned to one or more inspection categories..</param>
        /// <param name="commentDisplay">Indicates whether or not Accela Citizen Access users can view the inspection results comments..</param>
        /// <param name="commentPublicVisible">Specifies the type of user who can view the inspection result comments. \&quot;All ACA Users\&quot;- Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. \&quot;Record Creator Only\&quot;- the user who created the record can see the comments for the inspection results. \&quot;Record Creator and Licensed Professional\&quot;- The user who created the record and the licensed professional associated with the record can see the comments for the inspection results. .</param>
        /// <param name="completedAMPM">Indicates whether completed time is \&quot;AM\&quot;or \&quot;PM\&quot;..</param>
        /// <param name="completedDate">The date of completion..</param>
        /// <param name="completedTime">The time of completion..</param>
        /// <param name="contact">contact.</param>
        /// <param name="contactFirstName">The contact&#39;s first name. This field is only active when the Contact Type selected is Individual..</param>
        /// <param name="contactLastName">The last name of the contact..</param>
        /// <param name="contactMiddleName">The middle name of the contact..</param>
        /// <param name="desiredAMPM">Indicates whether the desired inspection time is AM or PM..</param>
        /// <param name="desiredDate">The desired inspection date..</param>
        /// <param name="desiredTime">The desired inspection time..</param>
        /// <param name="endMileage">The ending mileage for the inspection..</param>
        /// <param name="endTime">The time the inspection was completed..</param>
        /// <param name="estimatedEndTime">inspection estimated end time..</param>
        /// <param name="estimatedStartTime">The scheduled start time for the inspection..</param>
        /// <param name="gisAreaName">The GIS Object ID of the parent application if the application that the inspection is scheduled for has a parent application that is a project application..</param>
        /// <param name="grade">The name of the inspection grade..</param>
        /// <param name="id">The inspection system id assigned by the Civic Platform server..</param>
        /// <param name="inspectorFullName">The name of the inspector performing the assessment..</param>
        /// <param name="inspectorId">The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors)..</param>
        /// <param name="isAutoAssign">This defines whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status..</param>
        /// <param name="latitude">The angular distance of a place north or south of the earth&#39;s equator, usually expressed in degrees and minutes..</param>
        /// <param name="longitude">The angular distance of a place east or west of the meridian at Greenwich, England, usually expressed in degrees and minutes..</param>
        /// <param name="majorViolation">The number of major violations..</param>
        /// <param name="overtime">A labor cost factor that indicates time worked beyond a worker&#39;s regular working hours..</param>
        /// <param name="priority">The priority level assigned to the inspection..</param>
        /// <param name="publicVisible">This defines whether or not Accela Citizen Access users can view comment about the inspection results..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="recordType">recordType.</param>
        /// <param name="relationship">The type of inspection record relationship..</param>
        /// <param name="requestAMPM">The time segment, AM or PM, for the time specified in the requestTime field..</param>
        /// <param name="requestComment">Comments about the new inspection. For example, you may identify who requested the inspection..</param>
        /// <param name="requestDate">The date when an inspection request is submitted..</param>
        /// <param name="requestTime">This time is automatically generated when a new inspection is scheduled and submitted..</param>
        /// <param name="requestorFirstName">The first name of the person requesting an inspection-related operation..</param>
        /// <param name="requestorLastName">The last name of the person requesting an inspection-related operation..</param>
        /// <param name="requestorMiddleName">The middle name of the person requesting an inspection-related operation..</param>
        /// <param name="requestorPhone">The telephone number for the person who processes the inspection request or schedules the inspection..</param>
        /// <param name="requestorPhoneIDD">The telephone number for the person who processes the inspection request or schedules the inspection..</param>
        /// <param name="requestorUserId">The user Id of the person requesting an inspection-related operation..</param>
        /// <param name="requiredInspection">This defines whether the inspection is optional or required..</param>
        /// <param name="resultComment">The inspection result comments..</param>
        /// <param name="resultType">The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app.</param>
        /// <param name="scheduleDate">The date when the inspection gets scheduled..</param>
        /// <param name="scheduleEndAMPM">Indicates whether the scheduleEndTime is in the AM or PM..</param>
        /// <param name="scheduleEndTime">The scheduled end time for the inspection..</param>
        /// <param name="scheduleStartAMPM">AM indicates the 12 hour period from midnight to noon. PM indicates the 12 hour period from noon to midnight..</param>
        /// <param name="scheduleStartTime">The scheduled start time for the inspection..</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="startMileage">The starting mileage for the inspection..</param>
        /// <param name="startTime">The time when you started the inspection..</param>
        /// <param name="status">status.</param>
        /// <param name="submitAMPM">The time block for the scheduled inspection..</param>
        /// <param name="submitDate">The date that the inspection was submitted..</param>
        /// <param name="submitTime">The time that a new inspection is submitted. Civic Platform generates this value..</param>
        /// <param name="totalMileage">The total mileage for the inspection..</param>
        /// <param name="totalScore">The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option..</param>
        /// <param name="totalTime">The total amount of time used to do an inspection..</param>
        /// <param name="type">type.</param>
        /// <param name="unitNumber">The number of time units (see timeUnitDuration) comprising an inspection..</param>
        /// <param name="units">The amount of time comprising the smallest time unit for conducting an inspection..</param>
        /// <param name="vehicleId">A number, such as the license plate number or VIN, that identifies the vehicle used to complete an inspection..</param>
        public InspectionRelatedModel(InspectionAddressModel address = default(InspectionAddressModel), BillableEnum? billable = default(BillableEnum?), string category = default(string), string commentDisplay = default(string), List<string> commentPublicVisible = default(List<string>), string completedAMPM = default(string), DateTime? completedDate = default(DateTime?), string completedTime = default(string), InspectionContactModel contact = default(InspectionContactModel), string contactFirstName = default(string), string contactLastName = default(string), string contactMiddleName = default(string), string desiredAMPM = default(string), DateTime? desiredDate = default(DateTime?), string desiredTime = default(string), float? endMileage = default(float?), DateTime? endTime = default(DateTime?), string estimatedEndTime = default(string), string estimatedStartTime = default(string), string gisAreaName = default(string), string grade = default(string), long? id = default(long?), string inspectorFullName = default(string), string inspectorId = default(string), string isAutoAssign = default(string), float? latitude = default(float?), float? longitude = default(float?), long? majorViolation = default(long?), string overtime = default(string), double? priority = default(double?), string publicVisible = default(string), RecordIdModel recordId = default(RecordIdModel), RecordTypeModel2 recordType = default(RecordTypeModel2), RelationshipEnum? relationship = default(RelationshipEnum?), string requestAMPM = default(string), string requestComment = default(string), DateTime? requestDate = default(DateTime?), string requestTime = default(string), string requestorFirstName = default(string), string requestorLastName = default(string), string requestorMiddleName = default(string), string requestorPhone = default(string), string requestorPhoneIDD = default(string), string requestorUserId = default(string), string requiredInspection = default(string), string resultComment = default(string), string resultType = default(string), DateTime? scheduleDate = default(DateTime?), ScheduleEndAMPMEnum? scheduleEndAMPM = default(ScheduleEndAMPMEnum?), string scheduleEndTime = default(string), ScheduleStartAMPMEnum? scheduleStartAMPM = default(ScheduleStartAMPMEnum?), string scheduleStartTime = default(string), string serviceProviderCode = default(string), float? startMileage = default(float?), DateTime? startTime = default(DateTime?), InspectionModelStatus status = default(InspectionModelStatus), string submitAMPM = default(string), DateTime? submitDate = default(DateTime?), string submitTime = default(string), float? totalMileage = default(float?), long? totalScore = default(long?), double? totalTime = default(double?), InspectionTypeModel type = default(InspectionTypeModel), string unitNumber = default(string), double? units = default(double?), string vehicleId = default(string))
        {
            this.Address = address;
            this.Billable = billable;
            this.Category = category;
            this.CommentDisplay = commentDisplay;
            this.CommentPublicVisible = commentPublicVisible;
            this.CompletedAMPM = completedAMPM;
            this.CompletedDate = completedDate;
            this.CompletedTime = completedTime;
            this.Contact = contact;
            this.ContactFirstName = contactFirstName;
            this.ContactLastName = contactLastName;
            this.ContactMiddleName = contactMiddleName;
            this.DesiredAMPM = desiredAMPM;
            this.DesiredDate = desiredDate;
            this.DesiredTime = desiredTime;
            this.EndMileage = endMileage;
            this.EndTime = endTime;
            this.EstimatedEndTime = estimatedEndTime;
            this.EstimatedStartTime = estimatedStartTime;
            this.GisAreaName = gisAreaName;
            this.Grade = grade;
            this.Id = id;
            this.InspectorFullName = inspectorFullName;
            this.InspectorId = inspectorId;
            this.IsAutoAssign = isAutoAssign;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.MajorViolation = majorViolation;
            this.Overtime = overtime;
            this.Priority = priority;
            this.PublicVisible = publicVisible;
            this.RecordId = recordId;
            this.RecordType = recordType;
            this.Relationship = relationship;
            this.RequestAMPM = requestAMPM;
            this.RequestComment = requestComment;
            this.RequestDate = requestDate;
            this.RequestTime = requestTime;
            this.RequestorFirstName = requestorFirstName;
            this.RequestorLastName = requestorLastName;
            this.RequestorMiddleName = requestorMiddleName;
            this.RequestorPhone = requestorPhone;
            this.RequestorPhoneIDD = requestorPhoneIDD;
            this.RequestorUserId = requestorUserId;
            this.RequiredInspection = requiredInspection;
            this.ResultComment = resultComment;
            this.ResultType = resultType;
            this.ScheduleDate = scheduleDate;
            this.ScheduleEndAMPM = scheduleEndAMPM;
            this.ScheduleEndTime = scheduleEndTime;
            this.ScheduleStartAMPM = scheduleStartAMPM;
            this.ScheduleStartTime = scheduleStartTime;
            this.ServiceProviderCode = serviceProviderCode;
            this.StartMileage = startMileage;
            this.StartTime = startTime;
            this.Status = status;
            this.SubmitAMPM = submitAMPM;
            this.SubmitDate = submitDate;
            this.SubmitTime = submitTime;
            this.TotalMileage = totalMileage;
            this.TotalScore = totalScore;
            this.TotalTime = totalTime;
            this.Type = type;
            this.UnitNumber = unitNumber;
            this.Units = units;
            this.VehicleId = vehicleId;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public InspectionAddressModel Address { get; set; }


        /// <summary>
        /// The inspection category, which is used to organize inspection types. An inspection type is assigned to one or more inspection categories.
        /// </summary>
        /// <value>The inspection category, which is used to organize inspection types. An inspection type is assigned to one or more inspection categories.</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Indicates whether or not Accela Citizen Access users can view the inspection results comments.
        /// </summary>
        /// <value>Indicates whether or not Accela Citizen Access users can view the inspection results comments.</value>
        [DataMember(Name="commentDisplay", EmitDefaultValue=false)]
        public string CommentDisplay { get; set; }

        /// <summary>
        /// Specifies the type of user who can view the inspection result comments. \&quot;All ACA Users\&quot;- Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. \&quot;Record Creator Only\&quot;- the user who created the record can see the comments for the inspection results. \&quot;Record Creator and Licensed Professional\&quot;- The user who created the record and the licensed professional associated with the record can see the comments for the inspection results. 
        /// </summary>
        /// <value>Specifies the type of user who can view the inspection result comments. \&quot;All ACA Users\&quot;- Both registered and anonymous Accela Citizen Access users can view the comments for inspection results. \&quot;Record Creator Only\&quot;- the user who created the record can see the comments for the inspection results. \&quot;Record Creator and Licensed Professional\&quot;- The user who created the record and the licensed professional associated with the record can see the comments for the inspection results. </value>
        [DataMember(Name="commentPublicVisible", EmitDefaultValue=false)]
        public List<string> CommentPublicVisible { get; set; }

        /// <summary>
        /// Indicates whether completed time is \&quot;AM\&quot;or \&quot;PM\&quot;.
        /// </summary>
        /// <value>Indicates whether completed time is \&quot;AM\&quot;or \&quot;PM\&quot;.</value>
        [DataMember(Name="completedAMPM", EmitDefaultValue=false)]
        public string CompletedAMPM { get; set; }

        /// <summary>
        /// The date of completion.
        /// </summary>
        /// <value>The date of completion.</value>
        [DataMember(Name="completedDate", EmitDefaultValue=false)]
        public DateTime? CompletedDate { get; set; }

        /// <summary>
        /// The time of completion.
        /// </summary>
        /// <value>The time of completion.</value>
        [DataMember(Name="completedTime", EmitDefaultValue=false)]
        public string CompletedTime { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public InspectionContactModel Contact { get; set; }

        /// <summary>
        /// The contact&#39;s first name. This field is only active when the Contact Type selected is Individual.
        /// </summary>
        /// <value>The contact&#39;s first name. This field is only active when the Contact Type selected is Individual.</value>
        [DataMember(Name="contactFirstName", EmitDefaultValue=false)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// The last name of the contact.
        /// </summary>
        /// <value>The last name of the contact.</value>
        [DataMember(Name="contactLastName", EmitDefaultValue=false)]
        public string ContactLastName { get; set; }

        /// <summary>
        /// The middle name of the contact.
        /// </summary>
        /// <value>The middle name of the contact.</value>
        [DataMember(Name="contactMiddleName", EmitDefaultValue=false)]
        public string ContactMiddleName { get; set; }

        /// <summary>
        /// Indicates whether the desired inspection time is AM or PM.
        /// </summary>
        /// <value>Indicates whether the desired inspection time is AM or PM.</value>
        [DataMember(Name="desiredAMPM", EmitDefaultValue=false)]
        public string DesiredAMPM { get; set; }

        /// <summary>
        /// The desired inspection date.
        /// </summary>
        /// <value>The desired inspection date.</value>
        [DataMember(Name="desiredDate", EmitDefaultValue=false)]
        public DateTime? DesiredDate { get; set; }

        /// <summary>
        /// The desired inspection time.
        /// </summary>
        /// <value>The desired inspection time.</value>
        [DataMember(Name="desiredTime", EmitDefaultValue=false)]
        public string DesiredTime { get; set; }

        /// <summary>
        /// The ending mileage for the inspection.
        /// </summary>
        /// <value>The ending mileage for the inspection.</value>
        [DataMember(Name="endMileage", EmitDefaultValue=false)]
        public float? EndMileage { get; set; }

        /// <summary>
        /// The time the inspection was completed.
        /// </summary>
        /// <value>The time the inspection was completed.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// inspection estimated end time.
        /// </summary>
        /// <value>inspection estimated end time.</value>
        [DataMember(Name="estimatedEndTime", EmitDefaultValue=false)]
        public string EstimatedEndTime { get; set; }

        /// <summary>
        /// The scheduled start time for the inspection.
        /// </summary>
        /// <value>The scheduled start time for the inspection.</value>
        [DataMember(Name="estimatedStartTime", EmitDefaultValue=false)]
        public string EstimatedStartTime { get; set; }

        /// <summary>
        /// The GIS Object ID of the parent application if the application that the inspection is scheduled for has a parent application that is a project application.
        /// </summary>
        /// <value>The GIS Object ID of the parent application if the application that the inspection is scheduled for has a parent application that is a project application.</value>
        [DataMember(Name="gisAreaName", EmitDefaultValue=false)]
        public string GisAreaName { get; set; }

        /// <summary>
        /// The name of the inspection grade.
        /// </summary>
        /// <value>The name of the inspection grade.</value>
        [DataMember(Name="grade", EmitDefaultValue=false)]
        public string Grade { get; set; }

        /// <summary>
        /// The inspection system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The inspection system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The name of the inspector performing the assessment.
        /// </summary>
        /// <value>The name of the inspector performing the assessment.</value>
        [DataMember(Name="inspectorFullName", EmitDefaultValue=false)]
        public string InspectorFullName { get; set; }

        /// <summary>
        /// The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).
        /// </summary>
        /// <value>The ID number of the inspector. See [Get All Inspectors](./api-inspections.html#operation/v4.get.inspectors).</value>
        [DataMember(Name="inspectorId", EmitDefaultValue=false)]
        public string InspectorId { get; set; }

        /// <summary>
        /// This defines whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.
        /// </summary>
        /// <value>This defines whether or not you want to automatically reschedule the inspection when the previous inspection status attains Approved status.</value>
        [DataMember(Name="isAutoAssign", EmitDefaultValue=false)]
        public string IsAutoAssign { get; set; }

        /// <summary>
        /// The angular distance of a place north or south of the earth&#39;s equator, usually expressed in degrees and minutes.
        /// </summary>
        /// <value>The angular distance of a place north or south of the earth&#39;s equator, usually expressed in degrees and minutes.</value>
        [DataMember(Name="latitude", EmitDefaultValue=false)]
        public float? Latitude { get; set; }

        /// <summary>
        /// The angular distance of a place east or west of the meridian at Greenwich, England, usually expressed in degrees and minutes.
        /// </summary>
        /// <value>The angular distance of a place east or west of the meridian at Greenwich, England, usually expressed in degrees and minutes.</value>
        [DataMember(Name="longitude", EmitDefaultValue=false)]
        public float? Longitude { get; set; }

        /// <summary>
        /// The number of major violations.
        /// </summary>
        /// <value>The number of major violations.</value>
        [DataMember(Name="majorViolation", EmitDefaultValue=false)]
        public long? MajorViolation { get; set; }

        /// <summary>
        /// A labor cost factor that indicates time worked beyond a worker&#39;s regular working hours.
        /// </summary>
        /// <value>A labor cost factor that indicates time worked beyond a worker&#39;s regular working hours.</value>
        [DataMember(Name="overtime", EmitDefaultValue=false)]
        public string Overtime { get; set; }

        /// <summary>
        /// The priority level assigned to the inspection.
        /// </summary>
        /// <value>The priority level assigned to the inspection.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public double? Priority { get; set; }

        /// <summary>
        /// This defines whether or not Accela Citizen Access users can view comment about the inspection results.
        /// </summary>
        /// <value>This defines whether or not Accela Citizen Access users can view comment about the inspection results.</value>
        [DataMember(Name="publicVisible", EmitDefaultValue=false)]
        public string PublicVisible { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// Gets or Sets RecordType
        /// </summary>
        [DataMember(Name="recordType", EmitDefaultValue=false)]
        public RecordTypeModel2 RecordType { get; set; }


        /// <summary>
        /// The time segment, AM or PM, for the time specified in the requestTime field.
        /// </summary>
        /// <value>The time segment, AM or PM, for the time specified in the requestTime field.</value>
        [DataMember(Name="requestAMPM", EmitDefaultValue=false)]
        public string RequestAMPM { get; set; }

        /// <summary>
        /// Comments about the new inspection. For example, you may identify who requested the inspection.
        /// </summary>
        /// <value>Comments about the new inspection. For example, you may identify who requested the inspection.</value>
        [DataMember(Name="requestComment", EmitDefaultValue=false)]
        public string RequestComment { get; set; }

        /// <summary>
        /// The date when an inspection request is submitted.
        /// </summary>
        /// <value>The date when an inspection request is submitted.</value>
        [DataMember(Name="requestDate", EmitDefaultValue=false)]
        public DateTime? RequestDate { get; set; }

        /// <summary>
        /// This time is automatically generated when a new inspection is scheduled and submitted.
        /// </summary>
        /// <value>This time is automatically generated when a new inspection is scheduled and submitted.</value>
        [DataMember(Name="requestTime", EmitDefaultValue=false)]
        public string RequestTime { get; set; }

        /// <summary>
        /// The first name of the person requesting an inspection-related operation.
        /// </summary>
        /// <value>The first name of the person requesting an inspection-related operation.</value>
        [DataMember(Name="requestorFirstName", EmitDefaultValue=false)]
        public string RequestorFirstName { get; set; }

        /// <summary>
        /// The last name of the person requesting an inspection-related operation.
        /// </summary>
        /// <value>The last name of the person requesting an inspection-related operation.</value>
        [DataMember(Name="requestorLastName", EmitDefaultValue=false)]
        public string RequestorLastName { get; set; }

        /// <summary>
        /// The middle name of the person requesting an inspection-related operation.
        /// </summary>
        /// <value>The middle name of the person requesting an inspection-related operation.</value>
        [DataMember(Name="requestorMiddleName", EmitDefaultValue=false)]
        public string RequestorMiddleName { get; set; }

        /// <summary>
        /// The telephone number for the person who processes the inspection request or schedules the inspection.
        /// </summary>
        /// <value>The telephone number for the person who processes the inspection request or schedules the inspection.</value>
        [DataMember(Name="requestorPhone", EmitDefaultValue=false)]
        public string RequestorPhone { get; set; }

        /// <summary>
        /// The telephone number for the person who processes the inspection request or schedules the inspection.
        /// </summary>
        /// <value>The telephone number for the person who processes the inspection request or schedules the inspection.</value>
        [DataMember(Name="requestorPhoneIDD", EmitDefaultValue=false)]
        public string RequestorPhoneIDD { get; set; }

        /// <summary>
        /// The user Id of the person requesting an inspection-related operation.
        /// </summary>
        /// <value>The user Id of the person requesting an inspection-related operation.</value>
        [DataMember(Name="requestorUserId", EmitDefaultValue=false)]
        public string RequestorUserId { get; set; }

        /// <summary>
        /// This defines whether the inspection is optional or required.
        /// </summary>
        /// <value>This defines whether the inspection is optional or required.</value>
        [DataMember(Name="requiredInspection", EmitDefaultValue=false)]
        public string RequiredInspection { get; set; }

        /// <summary>
        /// The inspection result comments.
        /// </summary>
        /// <value>The inspection result comments.</value>
        [DataMember(Name="resultComment", EmitDefaultValue=false)]
        public string ResultComment { get; set; }

        /// <summary>
        /// The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app
        /// </summary>
        /// <value>The type of result that can be ascibed to an inspection. There are three result types: Approved: Approves (passes) the checklist item. Denied: Denies (fails) the checklist item. Informational: Indicates that the checklist items do not need a status of app</value>
        [DataMember(Name="resultType", EmitDefaultValue=false)]
        public string ResultType { get; set; }

        /// <summary>
        /// The date when the inspection gets scheduled.
        /// </summary>
        /// <value>The date when the inspection gets scheduled.</value>
        [DataMember(Name="scheduleDate", EmitDefaultValue=false)]
        public DateTime? ScheduleDate { get; set; }


        /// <summary>
        /// The scheduled end time for the inspection.
        /// </summary>
        /// <value>The scheduled end time for the inspection.</value>
        [DataMember(Name="scheduleEndTime", EmitDefaultValue=false)]
        public string ScheduleEndTime { get; set; }


        /// <summary>
        /// The scheduled start time for the inspection.
        /// </summary>
        /// <value>The scheduled start time for the inspection.</value>
        [DataMember(Name="scheduleStartTime", EmitDefaultValue=false)]
        public string ScheduleStartTime { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// The starting mileage for the inspection.
        /// </summary>
        /// <value>The starting mileage for the inspection.</value>
        [DataMember(Name="startMileage", EmitDefaultValue=false)]
        public float? StartMileage { get; set; }

        /// <summary>
        /// The time when you started the inspection.
        /// </summary>
        /// <value>The time when you started the inspection.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public InspectionModelStatus Status { get; set; }

        /// <summary>
        /// The time block for the scheduled inspection.
        /// </summary>
        /// <value>The time block for the scheduled inspection.</value>
        [DataMember(Name="submitAMPM", EmitDefaultValue=false)]
        public string SubmitAMPM { get; set; }

        /// <summary>
        /// The date that the inspection was submitted.
        /// </summary>
        /// <value>The date that the inspection was submitted.</value>
        [DataMember(Name="submitDate", EmitDefaultValue=false)]
        public DateTime? SubmitDate { get; set; }

        /// <summary>
        /// The time that a new inspection is submitted. Civic Platform generates this value.
        /// </summary>
        /// <value>The time that a new inspection is submitted. Civic Platform generates this value.</value>
        [DataMember(Name="submitTime", EmitDefaultValue=false)]
        public string SubmitTime { get; set; }

        /// <summary>
        /// The total mileage for the inspection.
        /// </summary>
        /// <value>The total mileage for the inspection.</value>
        [DataMember(Name="totalMileage", EmitDefaultValue=false)]
        public float? TotalMileage { get; set; }

        /// <summary>
        /// The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.
        /// </summary>
        /// <value>The overall score of the inspection that includes the inspection result, inspection grade, checklist total score and checklist major violation option.</value>
        [DataMember(Name="totalScore", EmitDefaultValue=false)]
        public long? TotalScore { get; set; }

        /// <summary>
        /// The total amount of time used to do an inspection.
        /// </summary>
        /// <value>The total amount of time used to do an inspection.</value>
        [DataMember(Name="totalTime", EmitDefaultValue=false)]
        public double? TotalTime { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public InspectionTypeModel Type { get; set; }

        /// <summary>
        /// The number of time units (see timeUnitDuration) comprising an inspection.
        /// </summary>
        /// <value>The number of time units (see timeUnitDuration) comprising an inspection.</value>
        [DataMember(Name="unitNumber", EmitDefaultValue=false)]
        public string UnitNumber { get; set; }

        /// <summary>
        /// The amount of time comprising the smallest time unit for conducting an inspection.
        /// </summary>
        /// <value>The amount of time comprising the smallest time unit for conducting an inspection.</value>
        [DataMember(Name="units", EmitDefaultValue=false)]
        public double? Units { get; set; }

        /// <summary>
        /// A number, such as the license plate number or VIN, that identifies the vehicle used to complete an inspection.
        /// </summary>
        /// <value>A number, such as the license plate number or VIN, that identifies the vehicle used to complete an inspection.</value>
        [DataMember(Name="vehicleId", EmitDefaultValue=false)]
        public string VehicleId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InspectionRelatedModel {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Billable: ").Append(Billable).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CommentDisplay: ").Append(CommentDisplay).Append("\n");
            sb.Append("  CommentPublicVisible: ").Append(CommentPublicVisible).Append("\n");
            sb.Append("  CompletedAMPM: ").Append(CompletedAMPM).Append("\n");
            sb.Append("  CompletedDate: ").Append(CompletedDate).Append("\n");
            sb.Append("  CompletedTime: ").Append(CompletedTime).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  ContactFirstName: ").Append(ContactFirstName).Append("\n");
            sb.Append("  ContactLastName: ").Append(ContactLastName).Append("\n");
            sb.Append("  ContactMiddleName: ").Append(ContactMiddleName).Append("\n");
            sb.Append("  DesiredAMPM: ").Append(DesiredAMPM).Append("\n");
            sb.Append("  DesiredDate: ").Append(DesiredDate).Append("\n");
            sb.Append("  DesiredTime: ").Append(DesiredTime).Append("\n");
            sb.Append("  EndMileage: ").Append(EndMileage).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  EstimatedEndTime: ").Append(EstimatedEndTime).Append("\n");
            sb.Append("  EstimatedStartTime: ").Append(EstimatedStartTime).Append("\n");
            sb.Append("  GisAreaName: ").Append(GisAreaName).Append("\n");
            sb.Append("  Grade: ").Append(Grade).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InspectorFullName: ").Append(InspectorFullName).Append("\n");
            sb.Append("  InspectorId: ").Append(InspectorId).Append("\n");
            sb.Append("  IsAutoAssign: ").Append(IsAutoAssign).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  MajorViolation: ").Append(MajorViolation).Append("\n");
            sb.Append("  Overtime: ").Append(Overtime).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PublicVisible: ").Append(PublicVisible).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("  RequestAMPM: ").Append(RequestAMPM).Append("\n");
            sb.Append("  RequestComment: ").Append(RequestComment).Append("\n");
            sb.Append("  RequestDate: ").Append(RequestDate).Append("\n");
            sb.Append("  RequestTime: ").Append(RequestTime).Append("\n");
            sb.Append("  RequestorFirstName: ").Append(RequestorFirstName).Append("\n");
            sb.Append("  RequestorLastName: ").Append(RequestorLastName).Append("\n");
            sb.Append("  RequestorMiddleName: ").Append(RequestorMiddleName).Append("\n");
            sb.Append("  RequestorPhone: ").Append(RequestorPhone).Append("\n");
            sb.Append("  RequestorPhoneIDD: ").Append(RequestorPhoneIDD).Append("\n");
            sb.Append("  RequestorUserId: ").Append(RequestorUserId).Append("\n");
            sb.Append("  RequiredInspection: ").Append(RequiredInspection).Append("\n");
            sb.Append("  ResultComment: ").Append(ResultComment).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  ScheduleDate: ").Append(ScheduleDate).Append("\n");
            sb.Append("  ScheduleEndAMPM: ").Append(ScheduleEndAMPM).Append("\n");
            sb.Append("  ScheduleEndTime: ").Append(ScheduleEndTime).Append("\n");
            sb.Append("  ScheduleStartAMPM: ").Append(ScheduleStartAMPM).Append("\n");
            sb.Append("  ScheduleStartTime: ").Append(ScheduleStartTime).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  StartMileage: ").Append(StartMileage).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  SubmitAMPM: ").Append(SubmitAMPM).Append("\n");
            sb.Append("  SubmitDate: ").Append(SubmitDate).Append("\n");
            sb.Append("  SubmitTime: ").Append(SubmitTime).Append("\n");
            sb.Append("  TotalMileage: ").Append(TotalMileage).Append("\n");
            sb.Append("  TotalScore: ").Append(TotalScore).Append("\n");
            sb.Append("  TotalTime: ").Append(TotalTime).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitNumber: ").Append(UnitNumber).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  VehicleId: ").Append(VehicleId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InspectionRelatedModel);
        }

        /// <summary>
        /// Returns true if InspectionRelatedModel instances are equal
        /// </summary>
        /// <param name="input">Instance of InspectionRelatedModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InspectionRelatedModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Billable == input.Billable ||
                    (this.Billable != null &&
                    this.Billable.Equals(input.Billable))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.CommentDisplay == input.CommentDisplay ||
                    (this.CommentDisplay != null &&
                    this.CommentDisplay.Equals(input.CommentDisplay))
                ) && 
                (
                    this.CommentPublicVisible == input.CommentPublicVisible ||
                    this.CommentPublicVisible != null &&
                    this.CommentPublicVisible.SequenceEqual(input.CommentPublicVisible)
                ) && 
                (
                    this.CompletedAMPM == input.CompletedAMPM ||
                    (this.CompletedAMPM != null &&
                    this.CompletedAMPM.Equals(input.CompletedAMPM))
                ) && 
                (
                    this.CompletedDate == input.CompletedDate ||
                    (this.CompletedDate != null &&
                    this.CompletedDate.Equals(input.CompletedDate))
                ) && 
                (
                    this.CompletedTime == input.CompletedTime ||
                    (this.CompletedTime != null &&
                    this.CompletedTime.Equals(input.CompletedTime))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.ContactFirstName == input.ContactFirstName ||
                    (this.ContactFirstName != null &&
                    this.ContactFirstName.Equals(input.ContactFirstName))
                ) && 
                (
                    this.ContactLastName == input.ContactLastName ||
                    (this.ContactLastName != null &&
                    this.ContactLastName.Equals(input.ContactLastName))
                ) && 
                (
                    this.ContactMiddleName == input.ContactMiddleName ||
                    (this.ContactMiddleName != null &&
                    this.ContactMiddleName.Equals(input.ContactMiddleName))
                ) && 
                (
                    this.DesiredAMPM == input.DesiredAMPM ||
                    (this.DesiredAMPM != null &&
                    this.DesiredAMPM.Equals(input.DesiredAMPM))
                ) && 
                (
                    this.DesiredDate == input.DesiredDate ||
                    (this.DesiredDate != null &&
                    this.DesiredDate.Equals(input.DesiredDate))
                ) && 
                (
                    this.DesiredTime == input.DesiredTime ||
                    (this.DesiredTime != null &&
                    this.DesiredTime.Equals(input.DesiredTime))
                ) && 
                (
                    this.EndMileage == input.EndMileage ||
                    (this.EndMileage != null &&
                    this.EndMileage.Equals(input.EndMileage))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.EstimatedEndTime == input.EstimatedEndTime ||
                    (this.EstimatedEndTime != null &&
                    this.EstimatedEndTime.Equals(input.EstimatedEndTime))
                ) && 
                (
                    this.EstimatedStartTime == input.EstimatedStartTime ||
                    (this.EstimatedStartTime != null &&
                    this.EstimatedStartTime.Equals(input.EstimatedStartTime))
                ) && 
                (
                    this.GisAreaName == input.GisAreaName ||
                    (this.GisAreaName != null &&
                    this.GisAreaName.Equals(input.GisAreaName))
                ) && 
                (
                    this.Grade == input.Grade ||
                    (this.Grade != null &&
                    this.Grade.Equals(input.Grade))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InspectorFullName == input.InspectorFullName ||
                    (this.InspectorFullName != null &&
                    this.InspectorFullName.Equals(input.InspectorFullName))
                ) && 
                (
                    this.InspectorId == input.InspectorId ||
                    (this.InspectorId != null &&
                    this.InspectorId.Equals(input.InspectorId))
                ) && 
                (
                    this.IsAutoAssign == input.IsAutoAssign ||
                    (this.IsAutoAssign != null &&
                    this.IsAutoAssign.Equals(input.IsAutoAssign))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.MajorViolation == input.MajorViolation ||
                    (this.MajorViolation != null &&
                    this.MajorViolation.Equals(input.MajorViolation))
                ) && 
                (
                    this.Overtime == input.Overtime ||
                    (this.Overtime != null &&
                    this.Overtime.Equals(input.Overtime))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.PublicVisible == input.PublicVisible ||
                    (this.PublicVisible != null &&
                    this.PublicVisible.Equals(input.PublicVisible))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.RecordType == input.RecordType ||
                    (this.RecordType != null &&
                    this.RecordType.Equals(input.RecordType))
                ) && 
                (
                    this.Relationship == input.Relationship ||
                    (this.Relationship != null &&
                    this.Relationship.Equals(input.Relationship))
                ) && 
                (
                    this.RequestAMPM == input.RequestAMPM ||
                    (this.RequestAMPM != null &&
                    this.RequestAMPM.Equals(input.RequestAMPM))
                ) && 
                (
                    this.RequestComment == input.RequestComment ||
                    (this.RequestComment != null &&
                    this.RequestComment.Equals(input.RequestComment))
                ) && 
                (
                    this.RequestDate == input.RequestDate ||
                    (this.RequestDate != null &&
                    this.RequestDate.Equals(input.RequestDate))
                ) && 
                (
                    this.RequestTime == input.RequestTime ||
                    (this.RequestTime != null &&
                    this.RequestTime.Equals(input.RequestTime))
                ) && 
                (
                    this.RequestorFirstName == input.RequestorFirstName ||
                    (this.RequestorFirstName != null &&
                    this.RequestorFirstName.Equals(input.RequestorFirstName))
                ) && 
                (
                    this.RequestorLastName == input.RequestorLastName ||
                    (this.RequestorLastName != null &&
                    this.RequestorLastName.Equals(input.RequestorLastName))
                ) && 
                (
                    this.RequestorMiddleName == input.RequestorMiddleName ||
                    (this.RequestorMiddleName != null &&
                    this.RequestorMiddleName.Equals(input.RequestorMiddleName))
                ) && 
                (
                    this.RequestorPhone == input.RequestorPhone ||
                    (this.RequestorPhone != null &&
                    this.RequestorPhone.Equals(input.RequestorPhone))
                ) && 
                (
                    this.RequestorPhoneIDD == input.RequestorPhoneIDD ||
                    (this.RequestorPhoneIDD != null &&
                    this.RequestorPhoneIDD.Equals(input.RequestorPhoneIDD))
                ) && 
                (
                    this.RequestorUserId == input.RequestorUserId ||
                    (this.RequestorUserId != null &&
                    this.RequestorUserId.Equals(input.RequestorUserId))
                ) && 
                (
                    this.RequiredInspection == input.RequiredInspection ||
                    (this.RequiredInspection != null &&
                    this.RequiredInspection.Equals(input.RequiredInspection))
                ) && 
                (
                    this.ResultComment == input.ResultComment ||
                    (this.ResultComment != null &&
                    this.ResultComment.Equals(input.ResultComment))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    (this.ResultType != null &&
                    this.ResultType.Equals(input.ResultType))
                ) && 
                (
                    this.ScheduleDate == input.ScheduleDate ||
                    (this.ScheduleDate != null &&
                    this.ScheduleDate.Equals(input.ScheduleDate))
                ) && 
                (
                    this.ScheduleEndAMPM == input.ScheduleEndAMPM ||
                    (this.ScheduleEndAMPM != null &&
                    this.ScheduleEndAMPM.Equals(input.ScheduleEndAMPM))
                ) && 
                (
                    this.ScheduleEndTime == input.ScheduleEndTime ||
                    (this.ScheduleEndTime != null &&
                    this.ScheduleEndTime.Equals(input.ScheduleEndTime))
                ) && 
                (
                    this.ScheduleStartAMPM == input.ScheduleStartAMPM ||
                    (this.ScheduleStartAMPM != null &&
                    this.ScheduleStartAMPM.Equals(input.ScheduleStartAMPM))
                ) && 
                (
                    this.ScheduleStartTime == input.ScheduleStartTime ||
                    (this.ScheduleStartTime != null &&
                    this.ScheduleStartTime.Equals(input.ScheduleStartTime))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.StartMileage == input.StartMileage ||
                    (this.StartMileage != null &&
                    this.StartMileage.Equals(input.StartMileage))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.SubmitAMPM == input.SubmitAMPM ||
                    (this.SubmitAMPM != null &&
                    this.SubmitAMPM.Equals(input.SubmitAMPM))
                ) && 
                (
                    this.SubmitDate == input.SubmitDate ||
                    (this.SubmitDate != null &&
                    this.SubmitDate.Equals(input.SubmitDate))
                ) && 
                (
                    this.SubmitTime == input.SubmitTime ||
                    (this.SubmitTime != null &&
                    this.SubmitTime.Equals(input.SubmitTime))
                ) && 
                (
                    this.TotalMileage == input.TotalMileage ||
                    (this.TotalMileage != null &&
                    this.TotalMileage.Equals(input.TotalMileage))
                ) && 
                (
                    this.TotalScore == input.TotalScore ||
                    (this.TotalScore != null &&
                    this.TotalScore.Equals(input.TotalScore))
                ) && 
                (
                    this.TotalTime == input.TotalTime ||
                    (this.TotalTime != null &&
                    this.TotalTime.Equals(input.TotalTime))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnitNumber == input.UnitNumber ||
                    (this.UnitNumber != null &&
                    this.UnitNumber.Equals(input.UnitNumber))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                ) && 
                (
                    this.VehicleId == input.VehicleId ||
                    (this.VehicleId != null &&
                    this.VehicleId.Equals(input.VehicleId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Billable != null)
                    hashCode = hashCode * 59 + this.Billable.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.CommentDisplay != null)
                    hashCode = hashCode * 59 + this.CommentDisplay.GetHashCode();
                if (this.CommentPublicVisible != null)
                    hashCode = hashCode * 59 + this.CommentPublicVisible.GetHashCode();
                if (this.CompletedAMPM != null)
                    hashCode = hashCode * 59 + this.CompletedAMPM.GetHashCode();
                if (this.CompletedDate != null)
                    hashCode = hashCode * 59 + this.CompletedDate.GetHashCode();
                if (this.CompletedTime != null)
                    hashCode = hashCode * 59 + this.CompletedTime.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.ContactFirstName != null)
                    hashCode = hashCode * 59 + this.ContactFirstName.GetHashCode();
                if (this.ContactLastName != null)
                    hashCode = hashCode * 59 + this.ContactLastName.GetHashCode();
                if (this.ContactMiddleName != null)
                    hashCode = hashCode * 59 + this.ContactMiddleName.GetHashCode();
                if (this.DesiredAMPM != null)
                    hashCode = hashCode * 59 + this.DesiredAMPM.GetHashCode();
                if (this.DesiredDate != null)
                    hashCode = hashCode * 59 + this.DesiredDate.GetHashCode();
                if (this.DesiredTime != null)
                    hashCode = hashCode * 59 + this.DesiredTime.GetHashCode();
                if (this.EndMileage != null)
                    hashCode = hashCode * 59 + this.EndMileage.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.EstimatedEndTime != null)
                    hashCode = hashCode * 59 + this.EstimatedEndTime.GetHashCode();
                if (this.EstimatedStartTime != null)
                    hashCode = hashCode * 59 + this.EstimatedStartTime.GetHashCode();
                if (this.GisAreaName != null)
                    hashCode = hashCode * 59 + this.GisAreaName.GetHashCode();
                if (this.Grade != null)
                    hashCode = hashCode * 59 + this.Grade.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InspectorFullName != null)
                    hashCode = hashCode * 59 + this.InspectorFullName.GetHashCode();
                if (this.InspectorId != null)
                    hashCode = hashCode * 59 + this.InspectorId.GetHashCode();
                if (this.IsAutoAssign != null)
                    hashCode = hashCode * 59 + this.IsAutoAssign.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.MajorViolation != null)
                    hashCode = hashCode * 59 + this.MajorViolation.GetHashCode();
                if (this.Overtime != null)
                    hashCode = hashCode * 59 + this.Overtime.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.PublicVisible != null)
                    hashCode = hashCode * 59 + this.PublicVisible.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.RecordType != null)
                    hashCode = hashCode * 59 + this.RecordType.GetHashCode();
                if (this.Relationship != null)
                    hashCode = hashCode * 59 + this.Relationship.GetHashCode();
                if (this.RequestAMPM != null)
                    hashCode = hashCode * 59 + this.RequestAMPM.GetHashCode();
                if (this.RequestComment != null)
                    hashCode = hashCode * 59 + this.RequestComment.GetHashCode();
                if (this.RequestDate != null)
                    hashCode = hashCode * 59 + this.RequestDate.GetHashCode();
                if (this.RequestTime != null)
                    hashCode = hashCode * 59 + this.RequestTime.GetHashCode();
                if (this.RequestorFirstName != null)
                    hashCode = hashCode * 59 + this.RequestorFirstName.GetHashCode();
                if (this.RequestorLastName != null)
                    hashCode = hashCode * 59 + this.RequestorLastName.GetHashCode();
                if (this.RequestorMiddleName != null)
                    hashCode = hashCode * 59 + this.RequestorMiddleName.GetHashCode();
                if (this.RequestorPhone != null)
                    hashCode = hashCode * 59 + this.RequestorPhone.GetHashCode();
                if (this.RequestorPhoneIDD != null)
                    hashCode = hashCode * 59 + this.RequestorPhoneIDD.GetHashCode();
                if (this.RequestorUserId != null)
                    hashCode = hashCode * 59 + this.RequestorUserId.GetHashCode();
                if (this.RequiredInspection != null)
                    hashCode = hashCode * 59 + this.RequiredInspection.GetHashCode();
                if (this.ResultComment != null)
                    hashCode = hashCode * 59 + this.ResultComment.GetHashCode();
                if (this.ResultType != null)
                    hashCode = hashCode * 59 + this.ResultType.GetHashCode();
                if (this.ScheduleDate != null)
                    hashCode = hashCode * 59 + this.ScheduleDate.GetHashCode();
                if (this.ScheduleEndAMPM != null)
                    hashCode = hashCode * 59 + this.ScheduleEndAMPM.GetHashCode();
                if (this.ScheduleEndTime != null)
                    hashCode = hashCode * 59 + this.ScheduleEndTime.GetHashCode();
                if (this.ScheduleStartAMPM != null)
                    hashCode = hashCode * 59 + this.ScheduleStartAMPM.GetHashCode();
                if (this.ScheduleStartTime != null)
                    hashCode = hashCode * 59 + this.ScheduleStartTime.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.StartMileage != null)
                    hashCode = hashCode * 59 + this.StartMileage.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.SubmitAMPM != null)
                    hashCode = hashCode * 59 + this.SubmitAMPM.GetHashCode();
                if (this.SubmitDate != null)
                    hashCode = hashCode * 59 + this.SubmitDate.GetHashCode();
                if (this.SubmitTime != null)
                    hashCode = hashCode * 59 + this.SubmitTime.GetHashCode();
                if (this.TotalMileage != null)
                    hashCode = hashCode * 59 + this.TotalMileage.GetHashCode();
                if (this.TotalScore != null)
                    hashCode = hashCode * 59 + this.TotalScore.GetHashCode();
                if (this.TotalTime != null)
                    hashCode = hashCode * 59 + this.TotalTime.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitNumber != null)
                    hashCode = hashCode * 59 + this.UnitNumber.GetHashCode();
                if (this.Units != null)
                    hashCode = hashCode * 59 + this.Units.GetHashCode();
                if (this.VehicleId != null)
                    hashCode = hashCode * 59 + this.VehicleId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
