/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// AssetRecordTypeModel
    /// </summary>
    [DataContract]
    public partial class AssetRecordTypeModel :  IEquatable<AssetRecordTypeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetRecordTypeModel" /> class.
        /// </summary>
        /// <param name="alias">The record type alias..</param>
        /// <param name="associations">associations.</param>
        /// <param name="category">The 4th level in a 4-level record type structure (Group-Type-Subtype-Category)..</param>
        /// <param name="createable">Indicates whether or not the record can be created..</param>
        /// <param name="deletable">Indicates whether or not the record can be deleted..</param>
        /// <param name="filterName">The name of the record type filter which defines the record types to be displayed for the citizen user..</param>
        /// <param name="group">The 1st level in a 4-level record type structure (Group-Type-Subtype-Category)..</param>
        /// <param name="id">The record type id..</param>
        /// <param name="module">The module the record type belongs to..</param>
        /// <param name="readable">Indicates whether or not values for sibling fields are readable..</param>
        /// <param name="searchable">Indicates whether or not the item is searchable..</param>
        /// <param name="subType">The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category)..</param>
        /// <param name="text">The localized display text..</param>
        /// <param name="type">The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category)..</param>
        /// <param name="updatable">Indicates whether or not the item can be updated..</param>
        /// <param name="value">The stored value..</param>
        public AssetRecordTypeModel(string alias = default(string), RecordTypeAssociationsModel associations = default(RecordTypeAssociationsModel), string category = default(string), bool? createable = default(bool?), bool? deletable = default(bool?), string filterName = default(string), string group = default(string), string id = default(string), string module = default(string), bool? readable = default(bool?), bool? searchable = default(bool?), string subType = default(string), string text = default(string), string type = default(string), bool? updatable = default(bool?), string value = default(string))
        {
            this.Alias = alias;
            this.Associations = associations;
            this.Category = category;
            this.Createable = createable;
            this.Deletable = deletable;
            this.FilterName = filterName;
            this.Group = group;
            this.Id = id;
            this.Module = module;
            this.Readable = readable;
            this.Searchable = searchable;
            this.SubType = subType;
            this.Text = text;
            this.Type = type;
            this.Updatable = updatable;
            this.Value = value;
        }
        
        /// <summary>
        /// The record type alias.
        /// </summary>
        /// <value>The record type alias.</value>
        [DataMember(Name="alias", EmitDefaultValue=false)]
        public string Alias { get; set; }

        /// <summary>
        /// Gets or Sets Associations
        /// </summary>
        [DataMember(Name="associations", EmitDefaultValue=false)]
        public RecordTypeAssociationsModel Associations { get; set; }

        /// <summary>
        /// The 4th level in a 4-level record type structure (Group-Type-Subtype-Category).
        /// </summary>
        /// <value>The 4th level in a 4-level record type structure (Group-Type-Subtype-Category).</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Indicates whether or not the record can be created.
        /// </summary>
        /// <value>Indicates whether or not the record can be created.</value>
        [DataMember(Name="createable", EmitDefaultValue=false)]
        public bool? Createable { get; set; }

        /// <summary>
        /// Indicates whether or not the record can be deleted.
        /// </summary>
        /// <value>Indicates whether or not the record can be deleted.</value>
        [DataMember(Name="deletable", EmitDefaultValue=false)]
        public bool? Deletable { get; set; }

        /// <summary>
        /// The name of the record type filter which defines the record types to be displayed for the citizen user.
        /// </summary>
        /// <value>The name of the record type filter which defines the record types to be displayed for the citizen user.</value>
        [DataMember(Name="filterName", EmitDefaultValue=false)]
        public string FilterName { get; set; }

        /// <summary>
        /// The 1st level in a 4-level record type structure (Group-Type-Subtype-Category).
        /// </summary>
        /// <value>The 1st level in a 4-level record type structure (Group-Type-Subtype-Category).</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// The record type id.
        /// </summary>
        /// <value>The record type id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The module the record type belongs to.
        /// </summary>
        /// <value>The module the record type belongs to.</value>
        [DataMember(Name="module", EmitDefaultValue=false)]
        public string Module { get; set; }

        /// <summary>
        /// Indicates whether or not values for sibling fields are readable.
        /// </summary>
        /// <value>Indicates whether or not values for sibling fields are readable.</value>
        [DataMember(Name="readable", EmitDefaultValue=false)]
        public bool? Readable { get; set; }

        /// <summary>
        /// Indicates whether or not the item is searchable.
        /// </summary>
        /// <value>Indicates whether or not the item is searchable.</value>
        [DataMember(Name="searchable", EmitDefaultValue=false)]
        public bool? Searchable { get; set; }

        /// <summary>
        /// The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category).
        /// </summary>
        /// <value>The 3rd level in a 4-level record type structure (Group-Type-Subtype-Category).</value>
        [DataMember(Name="subType", EmitDefaultValue=false)]
        public string SubType { get; set; }

        /// <summary>
        /// The localized display text.
        /// </summary>
        /// <value>The localized display text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category).
        /// </summary>
        /// <value>The 2nd level in a 4-level record type structure (Group-Type-Subtype-Category).</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Indicates whether or not the item can be updated.
        /// </summary>
        /// <value>Indicates whether or not the item can be updated.</value>
        [DataMember(Name="updatable", EmitDefaultValue=false)]
        public bool? Updatable { get; set; }

        /// <summary>
        /// The stored value.
        /// </summary>
        /// <value>The stored value.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AssetRecordTypeModel {\n");
            sb.Append("  Alias: ").Append(Alias).Append("\n");
            sb.Append("  Associations: ").Append(Associations).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Createable: ").Append(Createable).Append("\n");
            sb.Append("  Deletable: ").Append(Deletable).Append("\n");
            sb.Append("  FilterName: ").Append(FilterName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Module: ").Append(Module).Append("\n");
            sb.Append("  Readable: ").Append(Readable).Append("\n");
            sb.Append("  Searchable: ").Append(Searchable).Append("\n");
            sb.Append("  SubType: ").Append(SubType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Updatable: ").Append(Updatable).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AssetRecordTypeModel);
        }

        /// <summary>
        /// Returns true if AssetRecordTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AssetRecordTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AssetRecordTypeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Alias == input.Alias ||
                    (this.Alias != null &&
                    this.Alias.Equals(input.Alias))
                ) && 
                (
                    this.Associations == input.Associations ||
                    (this.Associations != null &&
                    this.Associations.Equals(input.Associations))
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Createable == input.Createable ||
                    (this.Createable != null &&
                    this.Createable.Equals(input.Createable))
                ) && 
                (
                    this.Deletable == input.Deletable ||
                    (this.Deletable != null &&
                    this.Deletable.Equals(input.Deletable))
                ) && 
                (
                    this.FilterName == input.FilterName ||
                    (this.FilterName != null &&
                    this.FilterName.Equals(input.FilterName))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Module == input.Module ||
                    (this.Module != null &&
                    this.Module.Equals(input.Module))
                ) && 
                (
                    this.Readable == input.Readable ||
                    (this.Readable != null &&
                    this.Readable.Equals(input.Readable))
                ) && 
                (
                    this.Searchable == input.Searchable ||
                    (this.Searchable != null &&
                    this.Searchable.Equals(input.Searchable))
                ) && 
                (
                    this.SubType == input.SubType ||
                    (this.SubType != null &&
                    this.SubType.Equals(input.SubType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Updatable == input.Updatable ||
                    (this.Updatable != null &&
                    this.Updatable.Equals(input.Updatable))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Alias != null)
                    hashCode = hashCode * 59 + this.Alias.GetHashCode();
                if (this.Associations != null)
                    hashCode = hashCode * 59 + this.Associations.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Createable != null)
                    hashCode = hashCode * 59 + this.Createable.GetHashCode();
                if (this.Deletable != null)
                    hashCode = hashCode * 59 + this.Deletable.GetHashCode();
                if (this.FilterName != null)
                    hashCode = hashCode * 59 + this.FilterName.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Module != null)
                    hashCode = hashCode * 59 + this.Module.GetHashCode();
                if (this.Readable != null)
                    hashCode = hashCode * 59 + this.Readable.GetHashCode();
                if (this.Searchable != null)
                    hashCode = hashCode * 59 + this.Searchable.GetHashCode();
                if (this.SubType != null)
                    hashCode = hashCode * 59 + this.SubType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Updatable != null)
                    hashCode = hashCode * 59 + this.Updatable.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
