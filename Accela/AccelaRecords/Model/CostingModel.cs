/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// CostingModel
    /// </summary>
    [DataContract]
    public partial class CostingModel :  IEquatable<CostingModel>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not costing is distributed.
        /// </summary>
        /// <value>Indicates whether or not costing is distributed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DistributeFlagEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not costing is distributed.
        /// </summary>
        /// <value>Indicates whether or not costing is distributed.</value>
        [DataMember(Name="distributeFlag", EmitDefaultValue=false)]
        public DistributeFlagEnum? DistributeFlag { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CostingModel" /> class.
        /// </summary>
        /// <param name="comments">Comments about the cost..</param>
        /// <param name="costAccount">The cost account name..</param>
        /// <param name="costDate">The date when the cost applied..</param>
        /// <param name="costFactor">costFactor.</param>
        /// <param name="costItem">The cost item name..</param>
        /// <param name="dispCostingCostItem">The cost item display name..</param>
        /// <param name="distributeFlag">Indicates whether or not costing is distributed..</param>
        /// <param name="endTime">The end time associated to the cost item..</param>
        /// <param name="fixedRate">The fixed rate associated to the cost item..</param>
        /// <param name="id">The cost item system id assigned by the Civic Platform server..</param>
        /// <param name="quantity">The cost item quantity..</param>
        /// <param name="quantityDetail">Details about the cost item quantity..</param>
        /// <param name="quantityDetailList">quantityDetailList.</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="relatedAsgnNbr">Related cost item..</param>
        /// <param name="startTime">The start time associated to the cost item..</param>
        /// <param name="status">status.</param>
        /// <param name="totalCost">The total cost..</param>
        /// <param name="type">type.</param>
        /// <param name="unitOfMeasure">unitOfMeasure.</param>
        /// <param name="unitRate">The cost unit rate..</param>
        /// <param name="workOrderTaskCode">The work order task code associated to the cost item..</param>
        /// <param name="workOrderTaskCodeIndex">The order of the work order task..</param>
        public CostingModel(string comments = default(string), string costAccount = default(string), DateTime? costDate = default(DateTime?), CostingModelCostFactor costFactor = default(CostingModelCostFactor), string costItem = default(string), string dispCostingCostItem = default(string), DistributeFlagEnum? distributeFlag = default(DistributeFlagEnum?), string endTime = default(string), double? fixedRate = default(double?), long? id = default(long?), double? quantity = default(double?), string quantityDetail = default(string), CostingQuantityModel quantityDetailList = default(CostingQuantityModel), RecordIdModel recordId = default(RecordIdModel), long? relatedAsgnNbr = default(long?), string startTime = default(string), CostingModelStatus status = default(CostingModelStatus), double? totalCost = default(double?), CostingModelType type = default(CostingModelType), CostingModelUnitOfMeasure unitOfMeasure = default(CostingModelUnitOfMeasure), double? unitRate = default(double?), string workOrderTaskCode = default(string), long? workOrderTaskCodeIndex = default(long?))
        {
            this.Comments = comments;
            this.CostAccount = costAccount;
            this.CostDate = costDate;
            this.CostFactor = costFactor;
            this.CostItem = costItem;
            this.DispCostingCostItem = dispCostingCostItem;
            this.DistributeFlag = distributeFlag;
            this.EndTime = endTime;
            this.FixedRate = fixedRate;
            this.Id = id;
            this.Quantity = quantity;
            this.QuantityDetail = quantityDetail;
            this.QuantityDetailList = quantityDetailList;
            this.RecordId = recordId;
            this.RelatedAsgnNbr = relatedAsgnNbr;
            this.StartTime = startTime;
            this.Status = status;
            this.TotalCost = totalCost;
            this.Type = type;
            this.UnitOfMeasure = unitOfMeasure;
            this.UnitRate = unitRate;
            this.WorkOrderTaskCode = workOrderTaskCode;
            this.WorkOrderTaskCodeIndex = workOrderTaskCodeIndex;
        }
        
        /// <summary>
        /// Comments about the cost.
        /// </summary>
        /// <value>Comments about the cost.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The cost account name.
        /// </summary>
        /// <value>The cost account name.</value>
        [DataMember(Name="costAccount", EmitDefaultValue=false)]
        public string CostAccount { get; set; }

        /// <summary>
        /// The date when the cost applied.
        /// </summary>
        /// <value>The date when the cost applied.</value>
        [DataMember(Name="costDate", EmitDefaultValue=false)]
        public DateTime? CostDate { get; set; }

        /// <summary>
        /// Gets or Sets CostFactor
        /// </summary>
        [DataMember(Name="costFactor", EmitDefaultValue=false)]
        public CostingModelCostFactor CostFactor { get; set; }

        /// <summary>
        /// The cost item name.
        /// </summary>
        /// <value>The cost item name.</value>
        [DataMember(Name="costItem", EmitDefaultValue=false)]
        public string CostItem { get; set; }

        /// <summary>
        /// The cost item display name.
        /// </summary>
        /// <value>The cost item display name.</value>
        [DataMember(Name="dispCostingCostItem", EmitDefaultValue=false)]
        public string DispCostingCostItem { get; set; }


        /// <summary>
        /// The end time associated to the cost item.
        /// </summary>
        /// <value>The end time associated to the cost item.</value>
        [DataMember(Name="endTime", EmitDefaultValue=false)]
        public string EndTime { get; set; }

        /// <summary>
        /// The fixed rate associated to the cost item.
        /// </summary>
        /// <value>The fixed rate associated to the cost item.</value>
        [DataMember(Name="fixedRate", EmitDefaultValue=false)]
        public double? FixedRate { get; set; }

        /// <summary>
        /// The cost item system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The cost item system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The cost item quantity.
        /// </summary>
        /// <value>The cost item quantity.</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public double? Quantity { get; set; }

        /// <summary>
        /// Details about the cost item quantity.
        /// </summary>
        /// <value>Details about the cost item quantity.</value>
        [DataMember(Name="quantityDetail", EmitDefaultValue=false)]
        public string QuantityDetail { get; set; }

        /// <summary>
        /// Gets or Sets QuantityDetailList
        /// </summary>
        [DataMember(Name="quantityDetailList", EmitDefaultValue=false)]
        public CostingQuantityModel QuantityDetailList { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// Related cost item.
        /// </summary>
        /// <value>Related cost item.</value>
        [DataMember(Name="relatedAsgnNbr", EmitDefaultValue=false)]
        public long? RelatedAsgnNbr { get; set; }

        /// <summary>
        /// The start time associated to the cost item.
        /// </summary>
        /// <value>The start time associated to the cost item.</value>
        [DataMember(Name="startTime", EmitDefaultValue=false)]
        public string StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public CostingModelStatus Status { get; set; }

        /// <summary>
        /// The total cost.
        /// </summary>
        /// <value>The total cost.</value>
        [DataMember(Name="totalCost", EmitDefaultValue=false)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public CostingModelType Type { get; set; }

        /// <summary>
        /// Gets or Sets UnitOfMeasure
        /// </summary>
        [DataMember(Name="unitOfMeasure", EmitDefaultValue=false)]
        public CostingModelUnitOfMeasure UnitOfMeasure { get; set; }

        /// <summary>
        /// The cost unit rate.
        /// </summary>
        /// <value>The cost unit rate.</value>
        [DataMember(Name="unitRate", EmitDefaultValue=false)]
        public double? UnitRate { get; set; }

        /// <summary>
        /// The work order task code associated to the cost item.
        /// </summary>
        /// <value>The work order task code associated to the cost item.</value>
        [DataMember(Name="workOrderTaskCode", EmitDefaultValue=false)]
        public string WorkOrderTaskCode { get; set; }

        /// <summary>
        /// The order of the work order task.
        /// </summary>
        /// <value>The order of the work order task.</value>
        [DataMember(Name="workOrderTaskCodeIndex", EmitDefaultValue=false)]
        public long? WorkOrderTaskCodeIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CostingModel {\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  CostAccount: ").Append(CostAccount).Append("\n");
            sb.Append("  CostDate: ").Append(CostDate).Append("\n");
            sb.Append("  CostFactor: ").Append(CostFactor).Append("\n");
            sb.Append("  CostItem: ").Append(CostItem).Append("\n");
            sb.Append("  DispCostingCostItem: ").Append(DispCostingCostItem).Append("\n");
            sb.Append("  DistributeFlag: ").Append(DistributeFlag).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  FixedRate: ").Append(FixedRate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  QuantityDetail: ").Append(QuantityDetail).Append("\n");
            sb.Append("  QuantityDetailList: ").Append(QuantityDetailList).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  RelatedAsgnNbr: ").Append(RelatedAsgnNbr).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UnitOfMeasure: ").Append(UnitOfMeasure).Append("\n");
            sb.Append("  UnitRate: ").Append(UnitRate).Append("\n");
            sb.Append("  WorkOrderTaskCode: ").Append(WorkOrderTaskCode).Append("\n");
            sb.Append("  WorkOrderTaskCodeIndex: ").Append(WorkOrderTaskCodeIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CostingModel);
        }

        /// <summary>
        /// Returns true if CostingModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CostingModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CostingModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.CostAccount == input.CostAccount ||
                    (this.CostAccount != null &&
                    this.CostAccount.Equals(input.CostAccount))
                ) && 
                (
                    this.CostDate == input.CostDate ||
                    (this.CostDate != null &&
                    this.CostDate.Equals(input.CostDate))
                ) && 
                (
                    this.CostFactor == input.CostFactor ||
                    (this.CostFactor != null &&
                    this.CostFactor.Equals(input.CostFactor))
                ) && 
                (
                    this.CostItem == input.CostItem ||
                    (this.CostItem != null &&
                    this.CostItem.Equals(input.CostItem))
                ) && 
                (
                    this.DispCostingCostItem == input.DispCostingCostItem ||
                    (this.DispCostingCostItem != null &&
                    this.DispCostingCostItem.Equals(input.DispCostingCostItem))
                ) && 
                (
                    this.DistributeFlag == input.DistributeFlag ||
                    (this.DistributeFlag != null &&
                    this.DistributeFlag.Equals(input.DistributeFlag))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.FixedRate == input.FixedRate ||
                    (this.FixedRate != null &&
                    this.FixedRate.Equals(input.FixedRate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.QuantityDetail == input.QuantityDetail ||
                    (this.QuantityDetail != null &&
                    this.QuantityDetail.Equals(input.QuantityDetail))
                ) && 
                (
                    this.QuantityDetailList == input.QuantityDetailList ||
                    (this.QuantityDetailList != null &&
                    this.QuantityDetailList.Equals(input.QuantityDetailList))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.RelatedAsgnNbr == input.RelatedAsgnNbr ||
                    (this.RelatedAsgnNbr != null &&
                    this.RelatedAsgnNbr.Equals(input.RelatedAsgnNbr))
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TotalCost == input.TotalCost ||
                    (this.TotalCost != null &&
                    this.TotalCost.Equals(input.TotalCost))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UnitOfMeasure == input.UnitOfMeasure ||
                    (this.UnitOfMeasure != null &&
                    this.UnitOfMeasure.Equals(input.UnitOfMeasure))
                ) && 
                (
                    this.UnitRate == input.UnitRate ||
                    (this.UnitRate != null &&
                    this.UnitRate.Equals(input.UnitRate))
                ) && 
                (
                    this.WorkOrderTaskCode == input.WorkOrderTaskCode ||
                    (this.WorkOrderTaskCode != null &&
                    this.WorkOrderTaskCode.Equals(input.WorkOrderTaskCode))
                ) && 
                (
                    this.WorkOrderTaskCodeIndex == input.WorkOrderTaskCodeIndex ||
                    (this.WorkOrderTaskCodeIndex != null &&
                    this.WorkOrderTaskCodeIndex.Equals(input.WorkOrderTaskCodeIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.CostAccount != null)
                    hashCode = hashCode * 59 + this.CostAccount.GetHashCode();
                if (this.CostDate != null)
                    hashCode = hashCode * 59 + this.CostDate.GetHashCode();
                if (this.CostFactor != null)
                    hashCode = hashCode * 59 + this.CostFactor.GetHashCode();
                if (this.CostItem != null)
                    hashCode = hashCode * 59 + this.CostItem.GetHashCode();
                if (this.DispCostingCostItem != null)
                    hashCode = hashCode * 59 + this.DispCostingCostItem.GetHashCode();
                if (this.DistributeFlag != null)
                    hashCode = hashCode * 59 + this.DistributeFlag.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                if (this.FixedRate != null)
                    hashCode = hashCode * 59 + this.FixedRate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.QuantityDetail != null)
                    hashCode = hashCode * 59 + this.QuantityDetail.GetHashCode();
                if (this.QuantityDetailList != null)
                    hashCode = hashCode * 59 + this.QuantityDetailList.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.RelatedAsgnNbr != null)
                    hashCode = hashCode * 59 + this.RelatedAsgnNbr.GetHashCode();
                if (this.StartTime != null)
                    hashCode = hashCode * 59 + this.StartTime.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TotalCost != null)
                    hashCode = hashCode * 59 + this.TotalCost.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UnitOfMeasure != null)
                    hashCode = hashCode * 59 + this.UnitOfMeasure.GetHashCode();
                if (this.UnitRate != null)
                    hashCode = hashCode * 59 + this.UnitRate.GetHashCode();
                if (this.WorkOrderTaskCode != null)
                    hashCode = hashCode * 59 + this.WorkOrderTaskCode.GetHashCode();
                if (this.WorkOrderTaskCodeIndex != null)
                    hashCode = hashCode * 59 + this.WorkOrderTaskCodeIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
