/* 
 * Documents
 *
 * Document and DocumentReview APIs
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaDocuments.Client.SwaggerDateConverter;

namespace AccelaDocuments.Model
{
    /// <summary>
    /// DocumentCommentUpdateModel
    /// </summary>
    [DataContract]
        public partial class DocumentCommentUpdateModel :  IEquatable<DocumentCommentUpdateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentCommentUpdateModel" /> class.
        /// </summary>
        /// <param name="comment">Comments or notes about the document..</param>
        /// <param name="createdBy">The user id of the individual who created the comment..</param>
        /// <param name="createdDate">The date the comment is created..</param>
        /// <param name="discipline">discipline.</param>
        /// <param name="pageNumber">The document page number the comment applies to..</param>
        /// <param name="status">status.</param>
        public DocumentCommentUpdateModel(string comment = default(string), string createdBy = default(string), DateTime? createdDate = default(DateTime?), DocumentCommentModelDiscipline discipline = default(DocumentCommentModelDiscipline), long? pageNumber = default(long?), DocumentCommentModelStatus status = default(DocumentCommentModelStatus))
        {
            this.Comment = comment;
            this.CreatedBy = createdBy;
            this.CreatedDate = createdDate;
            this.Discipline = discipline;
            this.PageNumber = pageNumber;
            this.Status = status;
        }
        
        /// <summary>
        /// Comments or notes about the document.
        /// </summary>
        /// <value>Comments or notes about the document.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// The user id of the individual who created the comment.
        /// </summary>
        /// <value>The user id of the individual who created the comment.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The date the comment is created.
        /// </summary>
        /// <value>The date the comment is created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Discipline
        /// </summary>
        [DataMember(Name="discipline", EmitDefaultValue=false)]
        public DocumentCommentModelDiscipline Discipline { get; set; }

        /// <summary>
        /// The document page number the comment applies to.
        /// </summary>
        /// <value>The document page number the comment applies to.</value>
        [DataMember(Name="pageNumber", EmitDefaultValue=false)]
        public long? PageNumber { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public DocumentCommentModelStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentCommentUpdateModel {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Discipline: ").Append(Discipline).Append("\n");
            sb.Append("  PageNumber: ").Append(PageNumber).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentCommentUpdateModel);
        }

        /// <summary>
        /// Returns true if DocumentCommentUpdateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentCommentUpdateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentCommentUpdateModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Discipline == input.Discipline ||
                    (this.Discipline != null &&
                    this.Discipline.Equals(input.Discipline))
                ) && 
                (
                    this.PageNumber == input.PageNumber ||
                    (this.PageNumber != null &&
                    this.PageNumber.Equals(input.PageNumber))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Discipline != null)
                    hashCode = hashCode * 59 + this.Discipline.GetHashCode();
                if (this.PageNumber != null)
                    hashCode = hashCode * 59 + this.PageNumber.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
