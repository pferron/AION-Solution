/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// PartLocationModel
    /// </summary>
    [DataContract]
    public partial class PartLocationModel :  IEquatable<PartLocationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PartLocationModel" /> class.
        /// </summary>
        /// <param name="address1">The first line of the address of the part location..</param>
        /// <param name="address2">The second line of the address of the part location..</param>
        /// <param name="businessName">A secondary business name for the applicable individual..</param>
        /// <param name="city">The name of the city..</param>
        /// <param name="comments">Comments or notes about the part location..</param>
        /// <param name="contactFname">The first name of the contact.</param>
        /// <param name="contactLname">The last name of the contact..</param>
        /// <param name="contactTitle">The title of the contact..</param>
        /// <param name="fax">The fax number for the contact..</param>
        /// <param name="faxCountryCode">Fax Number Country Code.</param>
        /// <param name="id">The id of the part location assigned by the Civic Platform server..</param>
        /// <param name="phone">The number associated with the entity..</param>
        /// <param name="phoneCountryCode">The country code for the assoicated phone number..</param>
        /// <param name="resColumns">resColumns.</param>
        /// <param name="state">The state corresponding to the address on record..</param>
        /// <param name="zip">The zip code for the part location..</param>
        public PartLocationModel(string address1 = default(string), string address2 = default(string), string businessName = default(string), string city = default(string), string comments = default(string), string contactFname = default(string), string contactLname = default(string), string contactTitle = default(string), string fax = default(string), string faxCountryCode = default(string), long? id = default(long?), string phone = default(string), string phoneCountryCode = default(string), List<string> resColumns = default(List<string>), string state = default(string), string zip = default(string))
        {
            this.Address1 = address1;
            this.Address2 = address2;
            this.BusinessName = businessName;
            this.City = city;
            this.Comments = comments;
            this.ContactFname = contactFname;
            this.ContactLname = contactLname;
            this.ContactTitle = contactTitle;
            this.Fax = fax;
            this.FaxCountryCode = faxCountryCode;
            this.Id = id;
            this.Phone = phone;
            this.PhoneCountryCode = phoneCountryCode;
            this.ResColumns = resColumns;
            this.State = state;
            this.Zip = zip;
        }
        
        /// <summary>
        /// The first line of the address of the part location.
        /// </summary>
        /// <value>The first line of the address of the part location.</value>
        [DataMember(Name="address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }

        /// <summary>
        /// The second line of the address of the part location.
        /// </summary>
        /// <value>The second line of the address of the part location.</value>
        [DataMember(Name="address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }

        /// <summary>
        /// A secondary business name for the applicable individual.
        /// </summary>
        /// <value>A secondary business name for the applicable individual.</value>
        [DataMember(Name="businessName", EmitDefaultValue=false)]
        public string BusinessName { get; set; }

        /// <summary>
        /// The name of the city.
        /// </summary>
        /// <value>The name of the city.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Comments or notes about the part location.
        /// </summary>
        /// <value>Comments or notes about the part location.</value>
        [DataMember(Name="comments", EmitDefaultValue=false)]
        public string Comments { get; set; }

        /// <summary>
        /// The first name of the contact
        /// </summary>
        /// <value>The first name of the contact</value>
        [DataMember(Name="contactFname", EmitDefaultValue=false)]
        public string ContactFname { get; set; }

        /// <summary>
        /// The last name of the contact.
        /// </summary>
        /// <value>The last name of the contact.</value>
        [DataMember(Name="contactLname", EmitDefaultValue=false)]
        public string ContactLname { get; set; }

        /// <summary>
        /// The title of the contact.
        /// </summary>
        /// <value>The title of the contact.</value>
        [DataMember(Name="contactTitle", EmitDefaultValue=false)]
        public string ContactTitle { get; set; }

        /// <summary>
        /// The fax number for the contact.
        /// </summary>
        /// <value>The fax number for the contact.</value>
        [DataMember(Name="fax", EmitDefaultValue=false)]
        public string Fax { get; set; }

        /// <summary>
        /// Fax Number Country Code
        /// </summary>
        /// <value>Fax Number Country Code</value>
        [DataMember(Name="faxCountryCode", EmitDefaultValue=false)]
        public string FaxCountryCode { get; set; }

        /// <summary>
        /// The id of the part location assigned by the Civic Platform server.
        /// </summary>
        /// <value>The id of the part location assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// The number associated with the entity.
        /// </summary>
        /// <value>The number associated with the entity.</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }

        /// <summary>
        /// The country code for the assoicated phone number.
        /// </summary>
        /// <value>The country code for the assoicated phone number.</value>
        [DataMember(Name="phoneCountryCode", EmitDefaultValue=false)]
        public string PhoneCountryCode { get; set; }

        /// <summary>
        /// Gets or Sets ResColumns
        /// </summary>
        [DataMember(Name="resColumns", EmitDefaultValue=false)]
        public List<string> ResColumns { get; set; }

        /// <summary>
        /// The state corresponding to the address on record.
        /// </summary>
        /// <value>The state corresponding to the address on record.</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// The zip code for the part location.
        /// </summary>
        /// <value>The zip code for the part location.</value>
        [DataMember(Name="zip", EmitDefaultValue=false)]
        public string Zip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PartLocationModel {\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  BusinessName: ").Append(BusinessName).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Comments: ").Append(Comments).Append("\n");
            sb.Append("  ContactFname: ").Append(ContactFname).Append("\n");
            sb.Append("  ContactLname: ").Append(ContactLname).Append("\n");
            sb.Append("  ContactTitle: ").Append(ContactTitle).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("  FaxCountryCode: ").Append(FaxCountryCode).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  PhoneCountryCode: ").Append(PhoneCountryCode).Append("\n");
            sb.Append("  ResColumns: ").Append(ResColumns).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PartLocationModel);
        }

        /// <summary>
        /// Returns true if PartLocationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PartLocationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PartLocationModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address1 == input.Address1 ||
                    (this.Address1 != null &&
                    this.Address1.Equals(input.Address1))
                ) && 
                (
                    this.Address2 == input.Address2 ||
                    (this.Address2 != null &&
                    this.Address2.Equals(input.Address2))
                ) && 
                (
                    this.BusinessName == input.BusinessName ||
                    (this.BusinessName != null &&
                    this.BusinessName.Equals(input.BusinessName))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.Comments == input.Comments ||
                    (this.Comments != null &&
                    this.Comments.Equals(input.Comments))
                ) && 
                (
                    this.ContactFname == input.ContactFname ||
                    (this.ContactFname != null &&
                    this.ContactFname.Equals(input.ContactFname))
                ) && 
                (
                    this.ContactLname == input.ContactLname ||
                    (this.ContactLname != null &&
                    this.ContactLname.Equals(input.ContactLname))
                ) && 
                (
                    this.ContactTitle == input.ContactTitle ||
                    (this.ContactTitle != null &&
                    this.ContactTitle.Equals(input.ContactTitle))
                ) && 
                (
                    this.Fax == input.Fax ||
                    (this.Fax != null &&
                    this.Fax.Equals(input.Fax))
                ) && 
                (
                    this.FaxCountryCode == input.FaxCountryCode ||
                    (this.FaxCountryCode != null &&
                    this.FaxCountryCode.Equals(input.FaxCountryCode))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Phone == input.Phone ||
                    (this.Phone != null &&
                    this.Phone.Equals(input.Phone))
                ) && 
                (
                    this.PhoneCountryCode == input.PhoneCountryCode ||
                    (this.PhoneCountryCode != null &&
                    this.PhoneCountryCode.Equals(input.PhoneCountryCode))
                ) && 
                (
                    this.ResColumns == input.ResColumns ||
                    this.ResColumns != null &&
                    this.ResColumns.SequenceEqual(input.ResColumns)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Zip == input.Zip ||
                    (this.Zip != null &&
                    this.Zip.Equals(input.Zip))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address1 != null)
                    hashCode = hashCode * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hashCode = hashCode * 59 + this.Address2.GetHashCode();
                if (this.BusinessName != null)
                    hashCode = hashCode * 59 + this.BusinessName.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.Comments != null)
                    hashCode = hashCode * 59 + this.Comments.GetHashCode();
                if (this.ContactFname != null)
                    hashCode = hashCode * 59 + this.ContactFname.GetHashCode();
                if (this.ContactLname != null)
                    hashCode = hashCode * 59 + this.ContactLname.GetHashCode();
                if (this.ContactTitle != null)
                    hashCode = hashCode * 59 + this.ContactTitle.GetHashCode();
                if (this.Fax != null)
                    hashCode = hashCode * 59 + this.Fax.GetHashCode();
                if (this.FaxCountryCode != null)
                    hashCode = hashCode * 59 + this.FaxCountryCode.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Phone != null)
                    hashCode = hashCode * 59 + this.Phone.GetHashCode();
                if (this.PhoneCountryCode != null)
                    hashCode = hashCode * 59 + this.PhoneCountryCode.GetHashCode();
                if (this.ResColumns != null)
                    hashCode = hashCode * 59 + this.ResColumns.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Zip != null)
                    hashCode = hashCode * 59 + this.Zip.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
