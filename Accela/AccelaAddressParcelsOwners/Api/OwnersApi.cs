/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAddressParcelsOwners.Client;
using AccelaAddressParcelsOwners.Model;

namespace AccelaAddressParcelsOwners.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOwnersApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get All Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseOwnerModelWithCustomFormsArray</returns>
        ResponseOwnerModelWithCustomFormsArray V4GetOwners (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseOwnerModelWithCustomFormsArray</returns>
        ApiResponse<ResponseOwnerModelWithCustomFormsArray> V4GetOwnersWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Owner
        /// </summary>
        /// <remarks>
        /// Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseOwnerModelWithCustomForms</returns>
        ResponseOwnerModelWithCustomForms V4GetOwnersId (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Owner
        /// </summary>
        /// <remarks>
        /// Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseOwnerModelWithCustomForms</returns>
        ApiResponse<ResponseOwnerModelWithCustomForms> V4GetOwnersIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Owner Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        ResponseConditionModelArray V4GetOwnersOwnerIdConditions (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Owner Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        ApiResponse<ResponseConditionModelArray> V4GetOwnersOwnerIdConditionsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get All Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseOwnerModelWithCustomFormsArray</returns>
        System.Threading.Tasks.Task<ResponseOwnerModelWithCustomFormsArray> V4GetOwnersAsync (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Owners
        /// </summary>
        /// <remarks>
        /// Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseOwnerModelWithCustomFormsArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseOwnerModelWithCustomFormsArray>> V4GetOwnersAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        /// <summary>
        /// Get Owner
        /// </summary>
        /// <remarks>
        /// Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseOwnerModelWithCustomForms</returns>
        System.Threading.Tasks.Task<ResponseOwnerModelWithCustomForms> V4GetOwnersIdAsync (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Owner
        /// </summary>
        /// <remarks>
        /// Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseOwnerModelWithCustomForms)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseOwnerModelWithCustomForms>> V4GetOwnersIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null);
        /// <summary>
        /// Get All Owner Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetOwnersOwnerIdConditionsAsync (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);

        /// <summary>
        /// Get All Owner Conditions
        /// </summary>
        /// <remarks>
        /// Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </remarks>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetOwnersOwnerIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OwnersApi : IOwnersApi
    {
        private AccelaAddressParcelsOwners.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OwnersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OwnersApi(String basePath)
        {
            this.Configuration = new AccelaAddressParcelsOwners.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAddressParcelsOwners.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OwnersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OwnersApi(AccelaAddressParcelsOwners.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAddressParcelsOwners.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAddressParcelsOwners.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAddressParcelsOwners.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAddressParcelsOwners.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get All Owners Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseOwnerModelWithCustomFormsArray</returns>
        public ResponseOwnerModelWithCustomFormsArray V4GetOwners (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseOwnerModelWithCustomFormsArray> localVarResponse = V4GetOwnersWithHttpInfo(contentType, authorization, xAccelaAppid, fullName, firstName, lastName, parcelId, email, city, state, country, expand, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Owners Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseOwnerModelWithCustomFormsArray</returns>
        public ApiResponse< ResponseOwnerModelWithCustomFormsArray > V4GetOwnersWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling OwnersApi->V4GetOwners");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OwnersApi->V4GetOwners");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling OwnersApi->V4GetOwners");

            var localVarPath = "/v4/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fullName", fullName)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (parcelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parcelId", parcelId)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetOwners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOwnerModelWithCustomFormsArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseOwnerModelWithCustomFormsArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOwnerModelWithCustomFormsArray)));
        }

        /// <summary>
        /// Get All Owners Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseOwnerModelWithCustomFormsArray</returns>
        public async System.Threading.Tasks.Task<ResponseOwnerModelWithCustomFormsArray> V4GetOwnersAsync (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseOwnerModelWithCustomFormsArray> localVarResponse = await V4GetOwnersAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, fullName, firstName, lastName, parcelId, email, city, state, country, expand, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Owners Gets a list of reference owners in the agency database. Specify at least one filter criteria.    **API Endpoint**:  GET /v4/owners   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="fullName">Filter by owner&#39;s full name. (optional)</param>
        /// <param name="firstName">Filter by owner&#39;s first name. (optional)</param>
        /// <param name="lastName">Filter by owner&#39;s last name. (optional)</param>
        /// <param name="parcelId">Filter by owner&#39;s parcel id. (optional)</param>
        /// <param name="email">Filter by owner&#39;s email. (optional)</param>
        /// <param name="city">Filter by owner&#39;s city. (optional)</param>
        /// <param name="state">Filter by owner&#39;s state. (optional)</param>
        /// <param name="country">Filter by owner&#39;s country. (optional)</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseOwnerModelWithCustomFormsArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseOwnerModelWithCustomFormsArray>> V4GetOwnersAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string fullName = null, string firstName = null, string lastName = null, string parcelId = null, string email = null, string city = null, string state = null, string country = null, string expand = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling OwnersApi->V4GetOwners");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OwnersApi->V4GetOwners");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling OwnersApi->V4GetOwners");

            var localVarPath = "/v4/owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fullName", fullName)); // query parameter
            if (firstName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (parcelId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "parcelId", parcelId)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (city != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "city", city)); // query parameter
            if (state != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "state", state)); // query parameter
            if (country != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "country", country)); // query parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetOwners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOwnerModelWithCustomFormsArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseOwnerModelWithCustomFormsArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOwnerModelWithCustomFormsArray)));
        }

        /// <summary>
        /// Get Owner Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseOwnerModelWithCustomForms</returns>
        public ResponseOwnerModelWithCustomForms V4GetOwnersId (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseOwnerModelWithCustomForms> localVarResponse = V4GetOwnersIdWithHttpInfo(contentType, authorization, xAccelaAppid, id, expand, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Owner Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseOwnerModelWithCustomForms</returns>
        public ApiResponse< ResponseOwnerModelWithCustomForms > V4GetOwnersIdWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling OwnersApi->V4GetOwnersId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OwnersApi->V4GetOwnersId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling OwnersApi->V4GetOwnersId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OwnersApi->V4GetOwnersId");

            var localVarPath = "/v4/owners/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetOwnersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOwnerModelWithCustomForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseOwnerModelWithCustomForms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOwnerModelWithCustomForms)));
        }

        /// <summary>
        /// Get Owner Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseOwnerModelWithCustomForms</returns>
        public async System.Threading.Tasks.Task<ResponseOwnerModelWithCustomForms> V4GetOwnersIdAsync (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseOwnerModelWithCustomForms> localVarResponse = await V4GetOwnersIdAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, id, expand, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Owner Gets information about a reference owner.    **API Endpoint**:  GET /v4/owners/{id}   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 7.3.2  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid.</param>
        /// <param name="id">The system id of the owner to fetch.</param>
        /// <param name="expand">Related objects to be returned with the response. The related object(s) will be returned if data exists; if data does not exist, the requested object(s) will not be included in the response.   Added in Civic Platform version: 9.3.0 (API-4591) (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseOwnerModelWithCustomForms)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseOwnerModelWithCustomForms>> V4GetOwnersIdAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string id, string expand = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling OwnersApi->V4GetOwnersId");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OwnersApi->V4GetOwnersId");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling OwnersApi->V4GetOwnersId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling OwnersApi->V4GetOwnersId");

            var localVarPath = "/v4/owners/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetOwnersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOwnerModelWithCustomForms>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseOwnerModelWithCustomForms) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOwnerModelWithCustomForms)));
        }

        /// <summary>
        /// Get All Owner Conditions Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ResponseConditionModelArray</returns>
        public ResponseConditionModelArray V4GetOwnersOwnerIdConditions (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = V4GetOwnersOwnerIdConditionsWithHttpInfo(contentType, authorization, xAccelaAppid, ownerId, type, name, status, offset, limit, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Owner Conditions Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseConditionModelArray</returns>
        public ApiResponse< ResponseConditionModelArray > V4GetOwnersOwnerIdConditionsWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling OwnersApi->V4GetOwnersOwnerIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OwnersApi->V4GetOwnersOwnerIdConditions");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling OwnersApi->V4GetOwnersOwnerIdConditions");
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new ApiException(400, "Missing required parameter 'ownerId' when calling OwnersApi->V4GetOwnersOwnerIdConditions");

            var localVarPath = "/v4/owners/{ownerId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerId != null) localVarPathParams.Add("ownerId", this.Configuration.ApiClient.ParameterToString(ownerId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetOwnersOwnerIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

        /// <summary>
        /// Get All Owner Conditions Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseConditionModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseConditionModelArray> V4GetOwnersOwnerIdConditionsAsync (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseConditionModelArray> localVarResponse = await V4GetOwnersOwnerIdConditionsAsyncWithHttpInfo(contentType, authorization, xAccelaAppid, ownerId, type, name, status, offset, limit, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Owner Conditions Gets the conditions on a reference owner.    **API Endpoint**:  GET /v4/owners/{ownerId}/conditions   **Scope**:  owners   **App Type**:  All   **Authorization Type**:  Access token   **Civic Platform version**: 8.0.0  
        /// </summary>
        /// <exception cref="AccelaAddressParcelsOwners.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="xAccelaAppid">clientid</param>
        /// <param name="ownerId">The system id of the owner to fetch.</param>
        /// <param name="type">Filter by condition type.See[Get All Condition Types](. / api - settings.html # operation / v4.get.settings.conditions.types) (optional)</param>
        /// <param name="name">Filter by condition name. (optional)</param>
        /// <param name="status">Filter by condition status.See[Get All Standard Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditions.statuses), [Get All Approval Condition Statuses](. / api - settings.html # operation / v4.get.settings.conditionApprovals.statuses) (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array.For example,  if offset is 100,the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="fields">Comma - delimited names of fields to be returned in the response.Note - Field names are case -sensitive and only first - level fields are supported.Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N.Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseConditionModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseConditionModelArray>> V4GetOwnersOwnerIdConditionsAsyncWithHttpInfo (string contentType, string authorization, string xAccelaAppid, string ownerId, string type = null, string name = null, string status = null, long? offset = null, long? limit = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling OwnersApi->V4GetOwnersOwnerIdConditions");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling OwnersApi->V4GetOwnersOwnerIdConditions");
            // verify the required parameter 'xAccelaAppid' is set
            if (xAccelaAppid == null)
                throw new ApiException(400, "Missing required parameter 'xAccelaAppid' when calling OwnersApi->V4GetOwnersOwnerIdConditions");
            // verify the required parameter 'ownerId' is set
            if (ownerId == null)
                throw new ApiException(400, "Missing required parameter 'ownerId' when calling OwnersApi->V4GetOwnersOwnerIdConditions");

            var localVarPath = "/v4/owners/{ownerId}/conditions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ownerId != null) localVarPathParams.Add("ownerId", this.Configuration.ApiClient.ParameterToString(ownerId)); // path parameter
            if (type != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "type", type)); // query parameter
            if (name != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (xAccelaAppid != null) localVarHeaderParams.Add("x-accela-appid", this.Configuration.ApiClient.ParameterToString(xAccelaAppid)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetOwnersOwnerIdConditions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseConditionModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ResponseConditionModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseConditionModelArray)));
        }

    }
}
