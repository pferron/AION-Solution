/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// RecordAdditionalModel
    /// </summary>
    [DataContract]
    public partial class RecordAdditionalModel :  IEquatable<RecordAdditionalModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecordAdditionalModel" /> class.
        /// </summary>
        /// <param name="buildingCount">The number of buildings associated with the record..</param>
        /// <param name="constructionType">constructionType.</param>
        /// <param name="estimatedValue">The application&#39;s estimated value..</param>
        /// <param name="houseUnit">The house unit associated with the application..</param>
        /// <param name="publicOwned">A flag that indicates whether or not the public owns the item..</param>
        /// <param name="recordId">recordId.</param>
        public RecordAdditionalModel(long? buildingCount = default(long?), RecordAdditionalModelConstructionType constructionType = default(RecordAdditionalModelConstructionType), double? estimatedValue = default(double?), long? houseUnit = default(long?), string publicOwned = default(string), RecordIdSimpleModel recordId = default(RecordIdSimpleModel))
        {
            this.BuildingCount = buildingCount;
            this.ConstructionType = constructionType;
            this.EstimatedValue = estimatedValue;
            this.HouseUnit = houseUnit;
            this.PublicOwned = publicOwned;
            this.RecordId = recordId;
        }
        
        /// <summary>
        /// The number of buildings associated with the record.
        /// </summary>
        /// <value>The number of buildings associated with the record.</value>
        [DataMember(Name="buildingCount", EmitDefaultValue=false)]
        public long? BuildingCount { get; set; }

        /// <summary>
        /// Gets or Sets ConstructionType
        /// </summary>
        [DataMember(Name="constructionType", EmitDefaultValue=false)]
        public RecordAdditionalModelConstructionType ConstructionType { get; set; }

        /// <summary>
        /// The application&#39;s estimated value.
        /// </summary>
        /// <value>The application&#39;s estimated value.</value>
        [DataMember(Name="estimatedValue", EmitDefaultValue=false)]
        public double? EstimatedValue { get; set; }

        /// <summary>
        /// The house unit associated with the application.
        /// </summary>
        /// <value>The house unit associated with the application.</value>
        [DataMember(Name="houseUnit", EmitDefaultValue=false)]
        public long? HouseUnit { get; set; }

        /// <summary>
        /// A flag that indicates whether or not the public owns the item.
        /// </summary>
        /// <value>A flag that indicates whether or not the public owns the item.</value>
        [DataMember(Name="publicOwned", EmitDefaultValue=false)]
        public string PublicOwned { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdSimpleModel RecordId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecordAdditionalModel {\n");
            sb.Append("  BuildingCount: ").Append(BuildingCount).Append("\n");
            sb.Append("  ConstructionType: ").Append(ConstructionType).Append("\n");
            sb.Append("  EstimatedValue: ").Append(EstimatedValue).Append("\n");
            sb.Append("  HouseUnit: ").Append(HouseUnit).Append("\n");
            sb.Append("  PublicOwned: ").Append(PublicOwned).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecordAdditionalModel);
        }

        /// <summary>
        /// Returns true if RecordAdditionalModel instances are equal
        /// </summary>
        /// <param name="input">Instance of RecordAdditionalModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecordAdditionalModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuildingCount == input.BuildingCount ||
                    (this.BuildingCount != null &&
                    this.BuildingCount.Equals(input.BuildingCount))
                ) && 
                (
                    this.ConstructionType == input.ConstructionType ||
                    (this.ConstructionType != null &&
                    this.ConstructionType.Equals(input.ConstructionType))
                ) && 
                (
                    this.EstimatedValue == input.EstimatedValue ||
                    (this.EstimatedValue != null &&
                    this.EstimatedValue.Equals(input.EstimatedValue))
                ) && 
                (
                    this.HouseUnit == input.HouseUnit ||
                    (this.HouseUnit != null &&
                    this.HouseUnit.Equals(input.HouseUnit))
                ) && 
                (
                    this.PublicOwned == input.PublicOwned ||
                    (this.PublicOwned != null &&
                    this.PublicOwned.Equals(input.PublicOwned))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuildingCount != null)
                    hashCode = hashCode * 59 + this.BuildingCount.GetHashCode();
                if (this.ConstructionType != null)
                    hashCode = hashCode * 59 + this.ConstructionType.GetHashCode();
                if (this.EstimatedValue != null)
                    hashCode = hashCode * 59 + this.EstimatedValue.GetHashCode();
                if (this.HouseUnit != null)
                    hashCode = hashCode * 59 + this.HouseUnit.GetHashCode();
                if (this.PublicOwned != null)
                    hashCode = hashCode * 59 + this.PublicOwned.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
