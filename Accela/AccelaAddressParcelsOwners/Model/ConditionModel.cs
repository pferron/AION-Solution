/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAddressParcelsOwners.Client.SwaggerDateConverter;

namespace AccelaAddressParcelsOwners.Model
{
    /// <summary>
    /// ConditionModel
    /// </summary>
    [DataContract]
    public partial class ConditionModel :  IEquatable<ConditionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConditionModel" /> class.
        /// </summary>
        /// <param name="actionbyDepartment">actionbyDepartment.</param>
        /// <param name="actionbyUser">actionbyUser.</param>
        /// <param name="activeStatus">activeStatus.</param>
        /// <param name="additionalInformation">An unlimited text field to use if other fields are filled..</param>
        /// <param name="appliedDate">The date when condition is applied. The Applied Date defaults to the current date in any of the following scenarios: 1) you are adding a standard condition, 2) you are creating a new condition, or 3) The condition is auto-assigned to a record..</param>
        /// <param name="appliedbyDepartment">appliedbyDepartment.</param>
        /// <param name="appliedbyUser">appliedbyUser.</param>
        /// <param name="displayNoticeInAgency">Indicates whether or not to display the condition notice in Civic Platform when a condition is applied..</param>
        /// <param name="displayNoticeInCitizens">Indicates whether or not to display the condition notice in Citizen Access when a condition to a record or parcel is applied..</param>
        /// <param name="displayNoticeInCitizensFee">Indicates whether or not to display the condition notice in Citizen Access Fee Estimate page when a condition to a record or parcel is applied..</param>
        /// <param name="effectiveDate">The date when the condition becomes effective..</param>
        /// <param name="expirationDate">The date when the condition expires..</param>
        /// <param name="group">group.</param>
        /// <param name="id">The condition system id assigned by the Civic Platform server..</param>
        /// <param name="inheritable">inheritable.</param>
        /// <param name="isIncludeNameInNotice">Indicates whether or not to display the condition name in the notice..</param>
        /// <param name="isIncludeShortCommentsInNotice">Indicates whether or not to display the condition comments in the notice..</param>
        /// <param name="longComments">Narrative comments to help identify the purpose or uses of the standard condition..</param>
        /// <param name="name">The full name for the application contact..</param>
        /// <param name="ownerNumber">(For owner conditions only) The owner number the condition applies to..</param>
        /// <param name="parcelNumber">(For parcel conditions only) The parcel number the condition applies to..</param>
        /// <param name="priority">priority.</param>
        /// <param name="publicDisplayMessage">Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Citizen Access (ACA)..</param>
        /// <param name="resolutionAction">The action performed in response to a condition..</param>
        /// <param name="serviceProviderCode">The unique agency identifier..</param>
        /// <param name="severity">severity.</param>
        /// <param name="shortComments">A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it.</param>
        /// <param name="status">status.</param>
        /// <param name="statusDate">The date when the current status changed..</param>
        /// <param name="statusType">The status type for a standard condition or an approval condition, applied or not applied for example..</param>
        /// <param name="type">type.</param>
        public ConditionModel(ConditionModelActionbyDepartment actionbyDepartment = default(ConditionModelActionbyDepartment), ConditionModelActionbyUser actionbyUser = default(ConditionModelActionbyUser), ConditionModelActiveStatus activeStatus = default(ConditionModelActiveStatus), string additionalInformation = default(string), DateTime? appliedDate = default(DateTime?), ConditionModelAppliedbyDepartment appliedbyDepartment = default(ConditionModelAppliedbyDepartment), ConditionModelAppliedbyUser appliedbyUser = default(ConditionModelAppliedbyUser), bool? displayNoticeInAgency = default(bool?), bool? displayNoticeInCitizens = default(bool?), bool? displayNoticeInCitizensFee = default(bool?), DateTime? effectiveDate = default(DateTime?), DateTime? expirationDate = default(DateTime?), ConditionModelGroup group = default(ConditionModelGroup), long? id = default(long?), ConditionModelInheritable inheritable = default(ConditionModelInheritable), bool? isIncludeNameInNotice = default(bool?), bool? isIncludeShortCommentsInNotice = default(bool?), string longComments = default(string), string name = default(string), string ownerNumber = default(string), string parcelNumber = default(string), ConditionModelPriority priority = default(ConditionModelPriority), string publicDisplayMessage = default(string), string resolutionAction = default(string), string serviceProviderCode = default(string), ConditionModelSeverity severity = default(ConditionModelSeverity), string shortComments = default(string), ConditionModelStatus status = default(ConditionModelStatus), DateTime? statusDate = default(DateTime?), string statusType = default(string), ConditionModelType type = default(ConditionModelType))
        {
            this.ActionbyDepartment = actionbyDepartment;
            this.ActionbyUser = actionbyUser;
            this.ActiveStatus = activeStatus;
            this.AdditionalInformation = additionalInformation;
            this.AppliedDate = appliedDate;
            this.AppliedbyDepartment = appliedbyDepartment;
            this.AppliedbyUser = appliedbyUser;
            this.DisplayNoticeInAgency = displayNoticeInAgency;
            this.DisplayNoticeInCitizens = displayNoticeInCitizens;
            this.DisplayNoticeInCitizensFee = displayNoticeInCitizensFee;
            this.EffectiveDate = effectiveDate;
            this.ExpirationDate = expirationDate;
            this.Group = group;
            this.Id = id;
            this.Inheritable = inheritable;
            this.IsIncludeNameInNotice = isIncludeNameInNotice;
            this.IsIncludeShortCommentsInNotice = isIncludeShortCommentsInNotice;
            this.LongComments = longComments;
            this.Name = name;
            this.OwnerNumber = ownerNumber;
            this.ParcelNumber = parcelNumber;
            this.Priority = priority;
            this.PublicDisplayMessage = publicDisplayMessage;
            this.ResolutionAction = resolutionAction;
            this.ServiceProviderCode = serviceProviderCode;
            this.Severity = severity;
            this.ShortComments = shortComments;
            this.Status = status;
            this.StatusDate = statusDate;
            this.StatusType = statusType;
            this.Type = type;
        }
        
        /// <summary>
        /// Gets or Sets ActionbyDepartment
        /// </summary>
        [DataMember(Name="actionbyDepartment", EmitDefaultValue=false)]
        public ConditionModelActionbyDepartment ActionbyDepartment { get; set; }

        /// <summary>
        /// Gets or Sets ActionbyUser
        /// </summary>
        [DataMember(Name="actionbyUser", EmitDefaultValue=false)]
        public ConditionModelActionbyUser ActionbyUser { get; set; }

        /// <summary>
        /// Gets or Sets ActiveStatus
        /// </summary>
        [DataMember(Name="activeStatus", EmitDefaultValue=false)]
        public ConditionModelActiveStatus ActiveStatus { get; set; }

        /// <summary>
        /// An unlimited text field to use if other fields are filled.
        /// </summary>
        /// <value>An unlimited text field to use if other fields are filled.</value>
        [DataMember(Name="additionalInformation", EmitDefaultValue=false)]
        public string AdditionalInformation { get; set; }

        /// <summary>
        /// The date when condition is applied. The Applied Date defaults to the current date in any of the following scenarios: 1) you are adding a standard condition, 2) you are creating a new condition, or 3) The condition is auto-assigned to a record.
        /// </summary>
        /// <value>The date when condition is applied. The Applied Date defaults to the current date in any of the following scenarios: 1) you are adding a standard condition, 2) you are creating a new condition, or 3) The condition is auto-assigned to a record.</value>
        [DataMember(Name="appliedDate", EmitDefaultValue=false)]
        public DateTime? AppliedDate { get; set; }

        /// <summary>
        /// Gets or Sets AppliedbyDepartment
        /// </summary>
        [DataMember(Name="appliedbyDepartment", EmitDefaultValue=false)]
        public ConditionModelAppliedbyDepartment AppliedbyDepartment { get; set; }

        /// <summary>
        /// Gets or Sets AppliedbyUser
        /// </summary>
        [DataMember(Name="appliedbyUser", EmitDefaultValue=false)]
        public ConditionModelAppliedbyUser AppliedbyUser { get; set; }

        /// <summary>
        /// Indicates whether or not to display the condition notice in Civic Platform when a condition is applied.
        /// </summary>
        /// <value>Indicates whether or not to display the condition notice in Civic Platform when a condition is applied.</value>
        [DataMember(Name="displayNoticeInAgency", EmitDefaultValue=false)]
        public bool? DisplayNoticeInAgency { get; set; }

        /// <summary>
        /// Indicates whether or not to display the condition notice in Citizen Access when a condition to a record or parcel is applied.
        /// </summary>
        /// <value>Indicates whether or not to display the condition notice in Citizen Access when a condition to a record or parcel is applied.</value>
        [DataMember(Name="displayNoticeInCitizens", EmitDefaultValue=false)]
        public bool? DisplayNoticeInCitizens { get; set; }

        /// <summary>
        /// Indicates whether or not to display the condition notice in Citizen Access Fee Estimate page when a condition to a record or parcel is applied.
        /// </summary>
        /// <value>Indicates whether or not to display the condition notice in Citizen Access Fee Estimate page when a condition to a record or parcel is applied.</value>
        [DataMember(Name="displayNoticeInCitizensFee", EmitDefaultValue=false)]
        public bool? DisplayNoticeInCitizensFee { get; set; }

        /// <summary>
        /// The date when the condition becomes effective.
        /// </summary>
        /// <value>The date when the condition becomes effective.</value>
        [DataMember(Name="effectiveDate", EmitDefaultValue=false)]
        public DateTime? EffectiveDate { get; set; }

        /// <summary>
        /// The date when the condition expires.
        /// </summary>
        /// <value>The date when the condition expires.</value>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public ConditionModelGroup Group { get; set; }

        /// <summary>
        /// The condition system id assigned by the Civic Platform server.
        /// </summary>
        /// <value>The condition system id assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Inheritable
        /// </summary>
        [DataMember(Name="inheritable", EmitDefaultValue=false)]
        public ConditionModelInheritable Inheritable { get; set; }

        /// <summary>
        /// Indicates whether or not to display the condition name in the notice.
        /// </summary>
        /// <value>Indicates whether or not to display the condition name in the notice.</value>
        [DataMember(Name="isIncludeNameInNotice", EmitDefaultValue=false)]
        public bool? IsIncludeNameInNotice { get; set; }

        /// <summary>
        /// Indicates whether or not to display the condition comments in the notice.
        /// </summary>
        /// <value>Indicates whether or not to display the condition comments in the notice.</value>
        [DataMember(Name="isIncludeShortCommentsInNotice", EmitDefaultValue=false)]
        public bool? IsIncludeShortCommentsInNotice { get; set; }

        /// <summary>
        /// Narrative comments to help identify the purpose or uses of the standard condition.
        /// </summary>
        /// <value>Narrative comments to help identify the purpose or uses of the standard condition.</value>
        [DataMember(Name="longComments", EmitDefaultValue=false)]
        public string LongComments { get; set; }

        /// <summary>
        /// The full name for the application contact.
        /// </summary>
        /// <value>The full name for the application contact.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// (For owner conditions only) The owner number the condition applies to.
        /// </summary>
        /// <value>(For owner conditions only) The owner number the condition applies to.</value>
        [DataMember(Name="ownerNumber", EmitDefaultValue=false)]
        public string OwnerNumber { get; set; }

        /// <summary>
        /// (For parcel conditions only) The parcel number the condition applies to.
        /// </summary>
        /// <value>(For parcel conditions only) The parcel number the condition applies to.</value>
        [DataMember(Name="parcelNumber", EmitDefaultValue=false)]
        public string ParcelNumber { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public ConditionModelPriority Priority { get; set; }

        /// <summary>
        /// Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Citizen Access (ACA).
        /// </summary>
        /// <value>Text entered into this field displays in the condition notice or condition status bar for the Condition Name for the public user in Accela IVR (AIVR) and Citizen Access (ACA).</value>
        [DataMember(Name="publicDisplayMessage", EmitDefaultValue=false)]
        public string PublicDisplayMessage { get; set; }

        /// <summary>
        /// The action performed in response to a condition.
        /// </summary>
        /// <value>The action performed in response to a condition.</value>
        [DataMember(Name="resolutionAction", EmitDefaultValue=false)]
        public string ResolutionAction { get; set; }

        /// <summary>
        /// The unique agency identifier.
        /// </summary>
        /// <value>The unique agency identifier.</value>
        [DataMember(Name="serviceProviderCode", EmitDefaultValue=false)]
        public string ServiceProviderCode { get; set; }

        /// <summary>
        /// Gets or Sets Severity
        /// </summary>
        [DataMember(Name="severity", EmitDefaultValue=false)]
        public ConditionModelSeverity Severity { get; set; }

        /// <summary>
        /// A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it
        /// </summary>
        /// <value>A brief description of the condition name. For example, the text may describe the situation that requires the system to apply the condition. You can set these short comments to display when a user accesses an application with this condition applied to it</value>
        [DataMember(Name="shortComments", EmitDefaultValue=false)]
        public string ShortComments { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public ConditionModelStatus Status { get; set; }

        /// <summary>
        /// The date when the current status changed.
        /// </summary>
        /// <value>The date when the current status changed.</value>
        [DataMember(Name="statusDate", EmitDefaultValue=false)]
        public DateTime? StatusDate { get; set; }

        /// <summary>
        /// The status type for a standard condition or an approval condition, applied or not applied for example.
        /// </summary>
        /// <value>The status type for a standard condition or an approval condition, applied or not applied for example.</value>
        [DataMember(Name="statusType", EmitDefaultValue=false)]
        public string StatusType { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public ConditionModelType Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConditionModel {\n");
            sb.Append("  ActionbyDepartment: ").Append(ActionbyDepartment).Append("\n");
            sb.Append("  ActionbyUser: ").Append(ActionbyUser).Append("\n");
            sb.Append("  ActiveStatus: ").Append(ActiveStatus).Append("\n");
            sb.Append("  AdditionalInformation: ").Append(AdditionalInformation).Append("\n");
            sb.Append("  AppliedDate: ").Append(AppliedDate).Append("\n");
            sb.Append("  AppliedbyDepartment: ").Append(AppliedbyDepartment).Append("\n");
            sb.Append("  AppliedbyUser: ").Append(AppliedbyUser).Append("\n");
            sb.Append("  DisplayNoticeInAgency: ").Append(DisplayNoticeInAgency).Append("\n");
            sb.Append("  DisplayNoticeInCitizens: ").Append(DisplayNoticeInCitizens).Append("\n");
            sb.Append("  DisplayNoticeInCitizensFee: ").Append(DisplayNoticeInCitizensFee).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Inheritable: ").Append(Inheritable).Append("\n");
            sb.Append("  IsIncludeNameInNotice: ").Append(IsIncludeNameInNotice).Append("\n");
            sb.Append("  IsIncludeShortCommentsInNotice: ").Append(IsIncludeShortCommentsInNotice).Append("\n");
            sb.Append("  LongComments: ").Append(LongComments).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerNumber: ").Append(OwnerNumber).Append("\n");
            sb.Append("  ParcelNumber: ").Append(ParcelNumber).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  PublicDisplayMessage: ").Append(PublicDisplayMessage).Append("\n");
            sb.Append("  ResolutionAction: ").Append(ResolutionAction).Append("\n");
            sb.Append("  ServiceProviderCode: ").Append(ServiceProviderCode).Append("\n");
            sb.Append("  Severity: ").Append(Severity).Append("\n");
            sb.Append("  ShortComments: ").Append(ShortComments).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusDate: ").Append(StatusDate).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConditionModel);
        }

        /// <summary>
        /// Returns true if ConditionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ConditionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConditionModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ActionbyDepartment == input.ActionbyDepartment ||
                    (this.ActionbyDepartment != null &&
                    this.ActionbyDepartment.Equals(input.ActionbyDepartment))
                ) && 
                (
                    this.ActionbyUser == input.ActionbyUser ||
                    (this.ActionbyUser != null &&
                    this.ActionbyUser.Equals(input.ActionbyUser))
                ) && 
                (
                    this.ActiveStatus == input.ActiveStatus ||
                    (this.ActiveStatus != null &&
                    this.ActiveStatus.Equals(input.ActiveStatus))
                ) && 
                (
                    this.AdditionalInformation == input.AdditionalInformation ||
                    (this.AdditionalInformation != null &&
                    this.AdditionalInformation.Equals(input.AdditionalInformation))
                ) && 
                (
                    this.AppliedDate == input.AppliedDate ||
                    (this.AppliedDate != null &&
                    this.AppliedDate.Equals(input.AppliedDate))
                ) && 
                (
                    this.AppliedbyDepartment == input.AppliedbyDepartment ||
                    (this.AppliedbyDepartment != null &&
                    this.AppliedbyDepartment.Equals(input.AppliedbyDepartment))
                ) && 
                (
                    this.AppliedbyUser == input.AppliedbyUser ||
                    (this.AppliedbyUser != null &&
                    this.AppliedbyUser.Equals(input.AppliedbyUser))
                ) && 
                (
                    this.DisplayNoticeInAgency == input.DisplayNoticeInAgency ||
                    (this.DisplayNoticeInAgency != null &&
                    this.DisplayNoticeInAgency.Equals(input.DisplayNoticeInAgency))
                ) && 
                (
                    this.DisplayNoticeInCitizens == input.DisplayNoticeInCitizens ||
                    (this.DisplayNoticeInCitizens != null &&
                    this.DisplayNoticeInCitizens.Equals(input.DisplayNoticeInCitizens))
                ) && 
                (
                    this.DisplayNoticeInCitizensFee == input.DisplayNoticeInCitizensFee ||
                    (this.DisplayNoticeInCitizensFee != null &&
                    this.DisplayNoticeInCitizensFee.Equals(input.DisplayNoticeInCitizensFee))
                ) && 
                (
                    this.EffectiveDate == input.EffectiveDate ||
                    (this.EffectiveDate != null &&
                    this.EffectiveDate.Equals(input.EffectiveDate))
                ) && 
                (
                    this.ExpirationDate == input.ExpirationDate ||
                    (this.ExpirationDate != null &&
                    this.ExpirationDate.Equals(input.ExpirationDate))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Inheritable == input.Inheritable ||
                    (this.Inheritable != null &&
                    this.Inheritable.Equals(input.Inheritable))
                ) && 
                (
                    this.IsIncludeNameInNotice == input.IsIncludeNameInNotice ||
                    (this.IsIncludeNameInNotice != null &&
                    this.IsIncludeNameInNotice.Equals(input.IsIncludeNameInNotice))
                ) && 
                (
                    this.IsIncludeShortCommentsInNotice == input.IsIncludeShortCommentsInNotice ||
                    (this.IsIncludeShortCommentsInNotice != null &&
                    this.IsIncludeShortCommentsInNotice.Equals(input.IsIncludeShortCommentsInNotice))
                ) && 
                (
                    this.LongComments == input.LongComments ||
                    (this.LongComments != null &&
                    this.LongComments.Equals(input.LongComments))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OwnerNumber == input.OwnerNumber ||
                    (this.OwnerNumber != null &&
                    this.OwnerNumber.Equals(input.OwnerNumber))
                ) && 
                (
                    this.ParcelNumber == input.ParcelNumber ||
                    (this.ParcelNumber != null &&
                    this.ParcelNumber.Equals(input.ParcelNumber))
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.PublicDisplayMessage == input.PublicDisplayMessage ||
                    (this.PublicDisplayMessage != null &&
                    this.PublicDisplayMessage.Equals(input.PublicDisplayMessage))
                ) && 
                (
                    this.ResolutionAction == input.ResolutionAction ||
                    (this.ResolutionAction != null &&
                    this.ResolutionAction.Equals(input.ResolutionAction))
                ) && 
                (
                    this.ServiceProviderCode == input.ServiceProviderCode ||
                    (this.ServiceProviderCode != null &&
                    this.ServiceProviderCode.Equals(input.ServiceProviderCode))
                ) && 
                (
                    this.Severity == input.Severity ||
                    (this.Severity != null &&
                    this.Severity.Equals(input.Severity))
                ) && 
                (
                    this.ShortComments == input.ShortComments ||
                    (this.ShortComments != null &&
                    this.ShortComments.Equals(input.ShortComments))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusDate == input.StatusDate ||
                    (this.StatusDate != null &&
                    this.StatusDate.Equals(input.StatusDate))
                ) && 
                (
                    this.StatusType == input.StatusType ||
                    (this.StatusType != null &&
                    this.StatusType.Equals(input.StatusType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActionbyDepartment != null)
                    hashCode = hashCode * 59 + this.ActionbyDepartment.GetHashCode();
                if (this.ActionbyUser != null)
                    hashCode = hashCode * 59 + this.ActionbyUser.GetHashCode();
                if (this.ActiveStatus != null)
                    hashCode = hashCode * 59 + this.ActiveStatus.GetHashCode();
                if (this.AdditionalInformation != null)
                    hashCode = hashCode * 59 + this.AdditionalInformation.GetHashCode();
                if (this.AppliedDate != null)
                    hashCode = hashCode * 59 + this.AppliedDate.GetHashCode();
                if (this.AppliedbyDepartment != null)
                    hashCode = hashCode * 59 + this.AppliedbyDepartment.GetHashCode();
                if (this.AppliedbyUser != null)
                    hashCode = hashCode * 59 + this.AppliedbyUser.GetHashCode();
                if (this.DisplayNoticeInAgency != null)
                    hashCode = hashCode * 59 + this.DisplayNoticeInAgency.GetHashCode();
                if (this.DisplayNoticeInCitizens != null)
                    hashCode = hashCode * 59 + this.DisplayNoticeInCitizens.GetHashCode();
                if (this.DisplayNoticeInCitizensFee != null)
                    hashCode = hashCode * 59 + this.DisplayNoticeInCitizensFee.GetHashCode();
                if (this.EffectiveDate != null)
                    hashCode = hashCode * 59 + this.EffectiveDate.GetHashCode();
                if (this.ExpirationDate != null)
                    hashCode = hashCode * 59 + this.ExpirationDate.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Inheritable != null)
                    hashCode = hashCode * 59 + this.Inheritable.GetHashCode();
                if (this.IsIncludeNameInNotice != null)
                    hashCode = hashCode * 59 + this.IsIncludeNameInNotice.GetHashCode();
                if (this.IsIncludeShortCommentsInNotice != null)
                    hashCode = hashCode * 59 + this.IsIncludeShortCommentsInNotice.GetHashCode();
                if (this.LongComments != null)
                    hashCode = hashCode * 59 + this.LongComments.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.OwnerNumber != null)
                    hashCode = hashCode * 59 + this.OwnerNumber.GetHashCode();
                if (this.ParcelNumber != null)
                    hashCode = hashCode * 59 + this.ParcelNumber.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.PublicDisplayMessage != null)
                    hashCode = hashCode * 59 + this.PublicDisplayMessage.GetHashCode();
                if (this.ResolutionAction != null)
                    hashCode = hashCode * 59 + this.ResolutionAction.GetHashCode();
                if (this.ServiceProviderCode != null)
                    hashCode = hashCode * 59 + this.ServiceProviderCode.GetHashCode();
                if (this.Severity != null)
                    hashCode = hashCode * 59 + this.Severity.GetHashCode();
                if (this.ShortComments != null)
                    hashCode = hashCode * 59 + this.ShortComments.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusDate != null)
                    hashCode = hashCode * 59 + this.StatusDate.GetHashCode();
                if (this.StatusType != null)
                    hashCode = hashCode * 59 + this.StatusType.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
