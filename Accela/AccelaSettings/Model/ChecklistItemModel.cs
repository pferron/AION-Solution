/* 
 * Settings
 *
 * The Settings API provides configuration values that have been defined in Civic Platform Administration, typically as standard choice values. The Settings APIs are helpful when you need reference or custom-configured values in your API calls.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaSettings.Client.SwaggerDateConverter;

namespace AccelaSettings.Model
{
    /// <summary>
    /// Contains the checklist items.
    /// </summary>
    [DataContract]
    public partial class ChecklistItemModel :  IEquatable<ChecklistItemModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChecklistItemModel" /> class.
        /// </summary>
        /// <param name="comment">Comments about the checklist item..</param>
        /// <param name="defaultScore"> The default score associated with the checklist item..</param>
        /// <param name="displayOrder"> The order of the item in comparison to the other items..</param>
        /// <param name="id">The ID of the checklist item assigned by the Civic Platform server..</param>
        /// <param name="isCarryOver"> Indicates whether or not the checklist is a carry-over..</param>
        /// <param name="isCommentVisible"> Indicates whether or not the comment is visible in a checklist..</param>
        /// <param name="isCritical"> Indicates whether or not the checklist item is critical..</param>
        /// <param name="isMaxPointsVisible"> Indicates whether or not to display the maximum points for the inspection checklist..</param>
        /// <param name="isScoreVisible"> Indicates whether or not to display the inspection checklist score..</param>
        /// <param name="maxPoints"> The number of points allowed for an inspection, after which the inspection fails..</param>
        /// <param name="statusGroup">Defines a set of status values for use with inspection types that conform to similar code requirements. For example, status groups for building related inspections, such as mechanical, electrical, uniform plumbing, and zoning..</param>
        /// <param name="statuses">Uses several parameters to characterize the status of one or more inspection checklists.</param>
        /// <param name="text">The checklist item name..</param>
        public ChecklistItemModel(string comment = default(string), long? defaultScore = default(long?), long? displayOrder = default(long?), long? id = default(long?), string isCarryOver = default(string), string isCommentVisible = default(string), string isCritical = default(string), string isMaxPointsVisible = default(string), string isScoreVisible = default(string), double? maxPoints = default(double?), string statusGroup = default(string), List<ChecklistItemStatusModel> statuses = default(List<ChecklistItemStatusModel>), string text = default(string))
        {
            this.Comment = comment;
            this.DefaultScore = defaultScore;
            this.DisplayOrder = displayOrder;
            this.Id = id;
            this.IsCarryOver = isCarryOver;
            this.IsCommentVisible = isCommentVisible;
            this.IsCritical = isCritical;
            this.IsMaxPointsVisible = isMaxPointsVisible;
            this.IsScoreVisible = isScoreVisible;
            this.MaxPoints = maxPoints;
            this.StatusGroup = statusGroup;
            this.Statuses = statuses;
            this.Text = text;
        }
        
        /// <summary>
        /// Comments about the checklist item.
        /// </summary>
        /// <value>Comments about the checklist item.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        ///  The default score associated with the checklist item.
        /// </summary>
        /// <value> The default score associated with the checklist item.</value>
        [DataMember(Name="defaultScore", EmitDefaultValue=false)]
        public long? DefaultScore { get; set; }

        /// <summary>
        ///  The order of the item in comparison to the other items.
        /// </summary>
        /// <value> The order of the item in comparison to the other items.</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        /// The ID of the checklist item assigned by the Civic Platform server.
        /// </summary>
        /// <value>The ID of the checklist item assigned by the Civic Platform server.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        ///  Indicates whether or not the checklist is a carry-over.
        /// </summary>
        /// <value> Indicates whether or not the checklist is a carry-over.</value>
        [DataMember(Name="isCarryOver", EmitDefaultValue=false)]
        public string IsCarryOver { get; set; }

        /// <summary>
        ///  Indicates whether or not the comment is visible in a checklist.
        /// </summary>
        /// <value> Indicates whether or not the comment is visible in a checklist.</value>
        [DataMember(Name="isCommentVisible", EmitDefaultValue=false)]
        public string IsCommentVisible { get; set; }

        /// <summary>
        ///  Indicates whether or not the checklist item is critical.
        /// </summary>
        /// <value> Indicates whether or not the checklist item is critical.</value>
        [DataMember(Name="isCritical", EmitDefaultValue=false)]
        public string IsCritical { get; set; }

        /// <summary>
        ///  Indicates whether or not to display the maximum points for the inspection checklist.
        /// </summary>
        /// <value> Indicates whether or not to display the maximum points for the inspection checklist.</value>
        [DataMember(Name="isMaxPointsVisible", EmitDefaultValue=false)]
        public string IsMaxPointsVisible { get; set; }

        /// <summary>
        ///  Indicates whether or not to display the inspection checklist score.
        /// </summary>
        /// <value> Indicates whether or not to display the inspection checklist score.</value>
        [DataMember(Name="isScoreVisible", EmitDefaultValue=false)]
        public string IsScoreVisible { get; set; }

        /// <summary>
        ///  The number of points allowed for an inspection, after which the inspection fails.
        /// </summary>
        /// <value> The number of points allowed for an inspection, after which the inspection fails.</value>
        [DataMember(Name="maxPoints", EmitDefaultValue=false)]
        public double? MaxPoints { get; set; }

        /// <summary>
        /// Defines a set of status values for use with inspection types that conform to similar code requirements. For example, status groups for building related inspections, such as mechanical, electrical, uniform plumbing, and zoning.
        /// </summary>
        /// <value>Defines a set of status values for use with inspection types that conform to similar code requirements. For example, status groups for building related inspections, such as mechanical, electrical, uniform plumbing, and zoning.</value>
        [DataMember(Name="statusGroup", EmitDefaultValue=false)]
        public string StatusGroup { get; set; }

        /// <summary>
        /// Uses several parameters to characterize the status of one or more inspection checklists
        /// </summary>
        /// <value>Uses several parameters to characterize the status of one or more inspection checklists</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public List<ChecklistItemStatusModel> Statuses { get; set; }

        /// <summary>
        /// The checklist item name.
        /// </summary>
        /// <value>The checklist item name.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChecklistItemModel {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DefaultScore: ").Append(DefaultScore).Append("\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCarryOver: ").Append(IsCarryOver).Append("\n");
            sb.Append("  IsCommentVisible: ").Append(IsCommentVisible).Append("\n");
            sb.Append("  IsCritical: ").Append(IsCritical).Append("\n");
            sb.Append("  IsMaxPointsVisible: ").Append(IsMaxPointsVisible).Append("\n");
            sb.Append("  IsScoreVisible: ").Append(IsScoreVisible).Append("\n");
            sb.Append("  MaxPoints: ").Append(MaxPoints).Append("\n");
            sb.Append("  StatusGroup: ").Append(StatusGroup).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChecklistItemModel);
        }

        /// <summary>
        /// Returns true if ChecklistItemModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ChecklistItemModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChecklistItemModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comment == input.Comment ||
                    (this.Comment != null &&
                    this.Comment.Equals(input.Comment))
                ) && 
                (
                    this.DefaultScore == input.DefaultScore ||
                    (this.DefaultScore != null &&
                    this.DefaultScore.Equals(input.DefaultScore))
                ) && 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsCarryOver == input.IsCarryOver ||
                    (this.IsCarryOver != null &&
                    this.IsCarryOver.Equals(input.IsCarryOver))
                ) && 
                (
                    this.IsCommentVisible == input.IsCommentVisible ||
                    (this.IsCommentVisible != null &&
                    this.IsCommentVisible.Equals(input.IsCommentVisible))
                ) && 
                (
                    this.IsCritical == input.IsCritical ||
                    (this.IsCritical != null &&
                    this.IsCritical.Equals(input.IsCritical))
                ) && 
                (
                    this.IsMaxPointsVisible == input.IsMaxPointsVisible ||
                    (this.IsMaxPointsVisible != null &&
                    this.IsMaxPointsVisible.Equals(input.IsMaxPointsVisible))
                ) && 
                (
                    this.IsScoreVisible == input.IsScoreVisible ||
                    (this.IsScoreVisible != null &&
                    this.IsScoreVisible.Equals(input.IsScoreVisible))
                ) && 
                (
                    this.MaxPoints == input.MaxPoints ||
                    (this.MaxPoints != null &&
                    this.MaxPoints.Equals(input.MaxPoints))
                ) && 
                (
                    this.StatusGroup == input.StatusGroup ||
                    (this.StatusGroup != null &&
                    this.StatusGroup.Equals(input.StatusGroup))
                ) && 
                (
                    this.Statuses == input.Statuses ||
                    this.Statuses != null &&
                    this.Statuses.SequenceEqual(input.Statuses)
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comment != null)
                    hashCode = hashCode * 59 + this.Comment.GetHashCode();
                if (this.DefaultScore != null)
                    hashCode = hashCode * 59 + this.DefaultScore.GetHashCode();
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsCarryOver != null)
                    hashCode = hashCode * 59 + this.IsCarryOver.GetHashCode();
                if (this.IsCommentVisible != null)
                    hashCode = hashCode * 59 + this.IsCommentVisible.GetHashCode();
                if (this.IsCritical != null)
                    hashCode = hashCode * 59 + this.IsCritical.GetHashCode();
                if (this.IsMaxPointsVisible != null)
                    hashCode = hashCode * 59 + this.IsMaxPointsVisible.GetHashCode();
                if (this.IsScoreVisible != null)
                    hashCode = hashCode * 59 + this.IsScoreVisible.GetHashCode();
                if (this.MaxPoints != null)
                    hashCode = hashCode * 59 + this.MaxPoints.GetHashCode();
                if (this.StatusGroup != null)
                    hashCode = hashCode * 59 + this.StatusGroup.GetHashCode();
                if (this.Statuses != null)
                    hashCode = hashCode * 59 + this.Statuses.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
