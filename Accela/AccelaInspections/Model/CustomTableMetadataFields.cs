/* 
 * Inspections
 *
 * Use the Inspections API to manage inspection records during their complete lifecycle from application submittal to permit issuance or license issuance. Your agency may need to complete inspections on new property developments, homes, or complaints.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaInspections.Client.SwaggerDateConverter;

namespace AccelaInspections.Model
{
    /// <summary>
    /// CustomTableMetadataFields
    /// </summary>
    [DataContract]
    public partial class CustomTableMetadataFields :  IEquatable<CustomTableMetadataFields>, IValidatableObject
    {
        /// <summary>
        /// Indicates whether or not the field is read-only.
        /// </summary>
        /// <value>Indicates whether or not the field is read-only.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsReadonlyEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the field is read-only.
        /// </summary>
        /// <value>Indicates whether or not the field is read-only.</value>
        [DataMember(Name="isReadonly", EmitDefaultValue=false)]
        public IsReadonlyEnum? IsReadonly { get; set; }
        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IsRequiredEnum
        {
            
            /// <summary>
            /// Enum Y for value: Y
            /// </summary>
            [EnumMember(Value = "Y")]
            Y = 1,
            
            /// <summary>
            /// Enum N for value: N
            /// </summary>
            [EnumMember(Value = "N")]
            N = 2
        }

        /// <summary>
        /// Indicates whether or not the field is required.
        /// </summary>
        /// <value>Indicates whether or not the field is required.</value>
        [DataMember(Name="isRequired", EmitDefaultValue=false)]
        public IsRequiredEnum? IsRequired { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomTableMetadataFields" /> class.
        /// </summary>
        /// <param name="displayOrder">The field&#39;s display order..</param>
        /// <param name="fieldType">The field&#39;s data type..</param>
        /// <param name="id">The field id..</param>
        /// <param name="isReadonly">Indicates whether or not the field is read-only..</param>
        /// <param name="isRequired">Indicates whether or not the field is required..</param>
        /// <param name="maxLength">The field&#39;s maximum field length..</param>
        public CustomTableMetadataFields(long? displayOrder = default(long?), string fieldType = default(string), string id = default(string), IsReadonlyEnum? isReadonly = default(IsReadonlyEnum?), IsRequiredEnum? isRequired = default(IsRequiredEnum?), long? maxLength = default(long?))
        {
            this.DisplayOrder = displayOrder;
            this.FieldType = fieldType;
            this.Id = id;
            this.IsReadonly = isReadonly;
            this.IsRequired = isRequired;
            this.MaxLength = maxLength;
        }
        
        /// <summary>
        /// The field&#39;s display order.
        /// </summary>
        /// <value>The field&#39;s display order.</value>
        [DataMember(Name="displayOrder", EmitDefaultValue=false)]
        public long? DisplayOrder { get; set; }

        /// <summary>
        /// The field&#39;s data type.
        /// </summary>
        /// <value>The field&#39;s data type.</value>
        [DataMember(Name="fieldType", EmitDefaultValue=false)]
        public string FieldType { get; set; }

        /// <summary>
        /// The field id.
        /// </summary>
        /// <value>The field id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }



        /// <summary>
        /// The field&#39;s maximum field length.
        /// </summary>
        /// <value>The field&#39;s maximum field length.</value>
        [DataMember(Name="maxLength", EmitDefaultValue=false)]
        public long? MaxLength { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomTableMetadataFields {\n");
            sb.Append("  DisplayOrder: ").Append(DisplayOrder).Append("\n");
            sb.Append("  FieldType: ").Append(FieldType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsReadonly: ").Append(IsReadonly).Append("\n");
            sb.Append("  IsRequired: ").Append(IsRequired).Append("\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomTableMetadataFields);
        }

        /// <summary>
        /// Returns true if CustomTableMetadataFields instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomTableMetadataFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomTableMetadataFields input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DisplayOrder == input.DisplayOrder ||
                    (this.DisplayOrder != null &&
                    this.DisplayOrder.Equals(input.DisplayOrder))
                ) && 
                (
                    this.FieldType == input.FieldType ||
                    (this.FieldType != null &&
                    this.FieldType.Equals(input.FieldType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsReadonly == input.IsReadonly ||
                    (this.IsReadonly != null &&
                    this.IsReadonly.Equals(input.IsReadonly))
                ) && 
                (
                    this.IsRequired == input.IsRequired ||
                    (this.IsRequired != null &&
                    this.IsRequired.Equals(input.IsRequired))
                ) && 
                (
                    this.MaxLength == input.MaxLength ||
                    (this.MaxLength != null &&
                    this.MaxLength.Equals(input.MaxLength))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DisplayOrder != null)
                    hashCode = hashCode * 59 + this.DisplayOrder.GetHashCode();
                if (this.FieldType != null)
                    hashCode = hashCode * 59 + this.FieldType.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.IsReadonly != null)
                    hashCode = hashCode * 59 + this.IsReadonly.GetHashCode();
                if (this.IsRequired != null)
                    hashCode = hashCode * 59 + this.IsRequired.GetHashCode();
                if (this.MaxLength != null)
                    hashCode = hashCode * 59 + this.MaxLength.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
