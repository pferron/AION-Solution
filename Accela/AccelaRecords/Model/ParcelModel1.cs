/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// ParcelModel1
    /// </summary>
    [DataContract]
    public partial class ParcelModel1 :  IEquatable<ParcelModel1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelModel1" /> class.
        /// </summary>
        /// <param name="block">block.</param>
        /// <param name="book">book.</param>
        /// <param name="censusTract">censusTract.</param>
        /// <param name="councilDistrict">councilDistrict.</param>
        /// <param name="exemptionValue">exemptionValue.</param>
        /// <param name="gisSequenceNumber">gisSequenceNumber.</param>
        /// <param name="id">id.</param>
        /// <param name="improvedValue">improvedValue.</param>
        /// <param name="isPrimary">isPrimary.</param>
        /// <param name="landValue">landValue.</param>
        /// <param name="legalDescription">legalDescription.</param>
        /// <param name="lot">lot.</param>
        /// <param name="mapNumber">mapNumber.</param>
        /// <param name="mapReferenceInfo">mapReferenceInfo.</param>
        /// <param name="page">page.</param>
        /// <param name="parcel">parcel.</param>
        /// <param name="parcelArea">parcelArea.</param>
        /// <param name="parcelNumber">parcelNumber.</param>
        /// <param name="planArea">planArea.</param>
        /// <param name="range">range.</param>
        /// <param name="section">section.</param>
        /// <param name="status">status.</param>
        /// <param name="subdivision">subdivision.</param>
        /// <param name="supervisorDistrict">supervisorDistrict.</param>
        /// <param name="township">township.</param>
        /// <param name="tract">tract.</param>
        public ParcelModel1(string block = default(string), string book = default(string), string censusTract = default(string), string councilDistrict = default(string), double? exemptionValue = default(double?), long? gisSequenceNumber = default(long?), string id = default(string), double? improvedValue = default(double?), string isPrimary = default(string), double? landValue = default(double?), string legalDescription = default(string), string lot = default(string), string mapNumber = default(string), string mapReferenceInfo = default(string), string page = default(string), string parcel = default(string), double? parcelArea = default(double?), string parcelNumber = default(string), string planArea = default(string), string range = default(string), long? section = default(long?), IdentifierModel status = default(IdentifierModel), IdentifierModel subdivision = default(IdentifierModel), string supervisorDistrict = default(string), string township = default(string), string tract = default(string))
        {
            this.Block = block;
            this.Book = book;
            this.CensusTract = censusTract;
            this.CouncilDistrict = councilDistrict;
            this.ExemptionValue = exemptionValue;
            this.GisSequenceNumber = gisSequenceNumber;
            this.Id = id;
            this.ImprovedValue = improvedValue;
            this.IsPrimary = isPrimary;
            this.LandValue = landValue;
            this.LegalDescription = legalDescription;
            this.Lot = lot;
            this.MapNumber = mapNumber;
            this.MapReferenceInfo = mapReferenceInfo;
            this.Page = page;
            this.Parcel = parcel;
            this.ParcelArea = parcelArea;
            this.ParcelNumber = parcelNumber;
            this.PlanArea = planArea;
            this.Range = range;
            this.Section = section;
            this.Status = status;
            this.Subdivision = subdivision;
            this.SupervisorDistrict = supervisorDistrict;
            this.Township = township;
            this.Tract = tract;
        }
        
        /// <summary>
        /// Gets or Sets Block
        /// </summary>
        [DataMember(Name="block", EmitDefaultValue=false)]
        public string Block { get; set; }

        /// <summary>
        /// Gets or Sets Book
        /// </summary>
        [DataMember(Name="book", EmitDefaultValue=false)]
        public string Book { get; set; }

        /// <summary>
        /// Gets or Sets CensusTract
        /// </summary>
        [DataMember(Name="censusTract", EmitDefaultValue=false)]
        public string CensusTract { get; set; }

        /// <summary>
        /// Gets or Sets CouncilDistrict
        /// </summary>
        [DataMember(Name="councilDistrict", EmitDefaultValue=false)]
        public string CouncilDistrict { get; set; }

        /// <summary>
        /// Gets or Sets ExemptionValue
        /// </summary>
        [DataMember(Name="exemptionValue", EmitDefaultValue=false)]
        public double? ExemptionValue { get; set; }

        /// <summary>
        /// Gets or Sets GisSequenceNumber
        /// </summary>
        [DataMember(Name="gisSequenceNumber", EmitDefaultValue=false)]
        public long? GisSequenceNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImprovedValue
        /// </summary>
        [DataMember(Name="improvedValue", EmitDefaultValue=false)]
        public double? ImprovedValue { get; set; }

        /// <summary>
        /// Gets or Sets IsPrimary
        /// </summary>
        [DataMember(Name="isPrimary", EmitDefaultValue=false)]
        public string IsPrimary { get; set; }

        /// <summary>
        /// Gets or Sets LandValue
        /// </summary>
        [DataMember(Name="landValue", EmitDefaultValue=false)]
        public double? LandValue { get; set; }

        /// <summary>
        /// Gets or Sets LegalDescription
        /// </summary>
        [DataMember(Name="legalDescription", EmitDefaultValue=false)]
        public string LegalDescription { get; set; }

        /// <summary>
        /// Gets or Sets Lot
        /// </summary>
        [DataMember(Name="lot", EmitDefaultValue=false)]
        public string Lot { get; set; }

        /// <summary>
        /// Gets or Sets MapNumber
        /// </summary>
        [DataMember(Name="mapNumber", EmitDefaultValue=false)]
        public string MapNumber { get; set; }

        /// <summary>
        /// Gets or Sets MapReferenceInfo
        /// </summary>
        [DataMember(Name="mapReferenceInfo", EmitDefaultValue=false)]
        public string MapReferenceInfo { get; set; }

        /// <summary>
        /// Gets or Sets Page
        /// </summary>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public string Page { get; set; }

        /// <summary>
        /// Gets or Sets Parcel
        /// </summary>
        [DataMember(Name="parcel", EmitDefaultValue=false)]
        public string Parcel { get; set; }

        /// <summary>
        /// Gets or Sets ParcelArea
        /// </summary>
        [DataMember(Name="parcelArea", EmitDefaultValue=false)]
        public double? ParcelArea { get; set; }

        /// <summary>
        /// Gets or Sets ParcelNumber
        /// </summary>
        [DataMember(Name="parcelNumber", EmitDefaultValue=false)]
        public string ParcelNumber { get; set; }

        /// <summary>
        /// Gets or Sets PlanArea
        /// </summary>
        [DataMember(Name="planArea", EmitDefaultValue=false)]
        public string PlanArea { get; set; }

        /// <summary>
        /// Gets or Sets Range
        /// </summary>
        [DataMember(Name="range", EmitDefaultValue=false)]
        public string Range { get; set; }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name="section", EmitDefaultValue=false)]
        public long? Section { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public IdentifierModel Status { get; set; }

        /// <summary>
        /// Gets or Sets Subdivision
        /// </summary>
        [DataMember(Name="subdivision", EmitDefaultValue=false)]
        public IdentifierModel Subdivision { get; set; }

        /// <summary>
        /// Gets or Sets SupervisorDistrict
        /// </summary>
        [DataMember(Name="supervisorDistrict", EmitDefaultValue=false)]
        public string SupervisorDistrict { get; set; }

        /// <summary>
        /// Gets or Sets Township
        /// </summary>
        [DataMember(Name="township", EmitDefaultValue=false)]
        public string Township { get; set; }

        /// <summary>
        /// Gets or Sets Tract
        /// </summary>
        [DataMember(Name="tract", EmitDefaultValue=false)]
        public string Tract { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelModel1 {\n");
            sb.Append("  Block: ").Append(Block).Append("\n");
            sb.Append("  Book: ").Append(Book).Append("\n");
            sb.Append("  CensusTract: ").Append(CensusTract).Append("\n");
            sb.Append("  CouncilDistrict: ").Append(CouncilDistrict).Append("\n");
            sb.Append("  ExemptionValue: ").Append(ExemptionValue).Append("\n");
            sb.Append("  GisSequenceNumber: ").Append(GisSequenceNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImprovedValue: ").Append(ImprovedValue).Append("\n");
            sb.Append("  IsPrimary: ").Append(IsPrimary).Append("\n");
            sb.Append("  LandValue: ").Append(LandValue).Append("\n");
            sb.Append("  LegalDescription: ").Append(LegalDescription).Append("\n");
            sb.Append("  Lot: ").Append(Lot).Append("\n");
            sb.Append("  MapNumber: ").Append(MapNumber).Append("\n");
            sb.Append("  MapReferenceInfo: ").Append(MapReferenceInfo).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Parcel: ").Append(Parcel).Append("\n");
            sb.Append("  ParcelArea: ").Append(ParcelArea).Append("\n");
            sb.Append("  ParcelNumber: ").Append(ParcelNumber).Append("\n");
            sb.Append("  PlanArea: ").Append(PlanArea).Append("\n");
            sb.Append("  Range: ").Append(Range).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Subdivision: ").Append(Subdivision).Append("\n");
            sb.Append("  SupervisorDistrict: ").Append(SupervisorDistrict).Append("\n");
            sb.Append("  Township: ").Append(Township).Append("\n");
            sb.Append("  Tract: ").Append(Tract).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelModel1);
        }

        /// <summary>
        /// Returns true if ParcelModel1 instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelModel1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelModel1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Block == input.Block ||
                    (this.Block != null &&
                    this.Block.Equals(input.Block))
                ) && 
                (
                    this.Book == input.Book ||
                    (this.Book != null &&
                    this.Book.Equals(input.Book))
                ) && 
                (
                    this.CensusTract == input.CensusTract ||
                    (this.CensusTract != null &&
                    this.CensusTract.Equals(input.CensusTract))
                ) && 
                (
                    this.CouncilDistrict == input.CouncilDistrict ||
                    (this.CouncilDistrict != null &&
                    this.CouncilDistrict.Equals(input.CouncilDistrict))
                ) && 
                (
                    this.ExemptionValue == input.ExemptionValue ||
                    (this.ExemptionValue != null &&
                    this.ExemptionValue.Equals(input.ExemptionValue))
                ) && 
                (
                    this.GisSequenceNumber == input.GisSequenceNumber ||
                    (this.GisSequenceNumber != null &&
                    this.GisSequenceNumber.Equals(input.GisSequenceNumber))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImprovedValue == input.ImprovedValue ||
                    (this.ImprovedValue != null &&
                    this.ImprovedValue.Equals(input.ImprovedValue))
                ) && 
                (
                    this.IsPrimary == input.IsPrimary ||
                    (this.IsPrimary != null &&
                    this.IsPrimary.Equals(input.IsPrimary))
                ) && 
                (
                    this.LandValue == input.LandValue ||
                    (this.LandValue != null &&
                    this.LandValue.Equals(input.LandValue))
                ) && 
                (
                    this.LegalDescription == input.LegalDescription ||
                    (this.LegalDescription != null &&
                    this.LegalDescription.Equals(input.LegalDescription))
                ) && 
                (
                    this.Lot == input.Lot ||
                    (this.Lot != null &&
                    this.Lot.Equals(input.Lot))
                ) && 
                (
                    this.MapNumber == input.MapNumber ||
                    (this.MapNumber != null &&
                    this.MapNumber.Equals(input.MapNumber))
                ) && 
                (
                    this.MapReferenceInfo == input.MapReferenceInfo ||
                    (this.MapReferenceInfo != null &&
                    this.MapReferenceInfo.Equals(input.MapReferenceInfo))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.Parcel == input.Parcel ||
                    (this.Parcel != null &&
                    this.Parcel.Equals(input.Parcel))
                ) && 
                (
                    this.ParcelArea == input.ParcelArea ||
                    (this.ParcelArea != null &&
                    this.ParcelArea.Equals(input.ParcelArea))
                ) && 
                (
                    this.ParcelNumber == input.ParcelNumber ||
                    (this.ParcelNumber != null &&
                    this.ParcelNumber.Equals(input.ParcelNumber))
                ) && 
                (
                    this.PlanArea == input.PlanArea ||
                    (this.PlanArea != null &&
                    this.PlanArea.Equals(input.PlanArea))
                ) && 
                (
                    this.Range == input.Range ||
                    (this.Range != null &&
                    this.Range.Equals(input.Range))
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Subdivision == input.Subdivision ||
                    (this.Subdivision != null &&
                    this.Subdivision.Equals(input.Subdivision))
                ) && 
                (
                    this.SupervisorDistrict == input.SupervisorDistrict ||
                    (this.SupervisorDistrict != null &&
                    this.SupervisorDistrict.Equals(input.SupervisorDistrict))
                ) && 
                (
                    this.Township == input.Township ||
                    (this.Township != null &&
                    this.Township.Equals(input.Township))
                ) && 
                (
                    this.Tract == input.Tract ||
                    (this.Tract != null &&
                    this.Tract.Equals(input.Tract))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Block != null)
                    hashCode = hashCode * 59 + this.Block.GetHashCode();
                if (this.Book != null)
                    hashCode = hashCode * 59 + this.Book.GetHashCode();
                if (this.CensusTract != null)
                    hashCode = hashCode * 59 + this.CensusTract.GetHashCode();
                if (this.CouncilDistrict != null)
                    hashCode = hashCode * 59 + this.CouncilDistrict.GetHashCode();
                if (this.ExemptionValue != null)
                    hashCode = hashCode * 59 + this.ExemptionValue.GetHashCode();
                if (this.GisSequenceNumber != null)
                    hashCode = hashCode * 59 + this.GisSequenceNumber.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImprovedValue != null)
                    hashCode = hashCode * 59 + this.ImprovedValue.GetHashCode();
                if (this.IsPrimary != null)
                    hashCode = hashCode * 59 + this.IsPrimary.GetHashCode();
                if (this.LandValue != null)
                    hashCode = hashCode * 59 + this.LandValue.GetHashCode();
                if (this.LegalDescription != null)
                    hashCode = hashCode * 59 + this.LegalDescription.GetHashCode();
                if (this.Lot != null)
                    hashCode = hashCode * 59 + this.Lot.GetHashCode();
                if (this.MapNumber != null)
                    hashCode = hashCode * 59 + this.MapNumber.GetHashCode();
                if (this.MapReferenceInfo != null)
                    hashCode = hashCode * 59 + this.MapReferenceInfo.GetHashCode();
                if (this.Page != null)
                    hashCode = hashCode * 59 + this.Page.GetHashCode();
                if (this.Parcel != null)
                    hashCode = hashCode * 59 + this.Parcel.GetHashCode();
                if (this.ParcelArea != null)
                    hashCode = hashCode * 59 + this.ParcelArea.GetHashCode();
                if (this.ParcelNumber != null)
                    hashCode = hashCode * 59 + this.ParcelNumber.GetHashCode();
                if (this.PlanArea != null)
                    hashCode = hashCode * 59 + this.PlanArea.GetHashCode();
                if (this.Range != null)
                    hashCode = hashCode * 59 + this.Range.GetHashCode();
                if (this.Section != null)
                    hashCode = hashCode * 59 + this.Section.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Subdivision != null)
                    hashCode = hashCode * 59 + this.Subdivision.GetHashCode();
                if (this.SupervisorDistrict != null)
                    hashCode = hashCode * 59 + this.SupervisorDistrict.GetHashCode();
                if (this.Township != null)
                    hashCode = hashCode * 59 + this.Township.GetHashCode();
                if (this.Tract != null)
                    hashCode = hashCode * 59 + this.Tract.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
