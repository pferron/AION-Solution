/* 
 * Records
 *
 * Construct APIs for transactional records and related record resources
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaRecords.Client.SwaggerDateConverter;

namespace AccelaRecords.Model
{
    /// <summary>
    /// WorkflowTaskCommentModel
    /// </summary>
    [DataContract]
    public partial class WorkflowTaskCommentModel :  IEquatable<WorkflowTaskCommentModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkflowTaskCommentModel" /> class.
        /// </summary>
        /// <param name="action">Audit trail action type like &#39;payment allocation&#39;.</param>
        /// <param name="createdBy">The unique user id of the individual that created the entry..</param>
        /// <param name="createdDate">The date the entry was created..</param>
        /// <param name="recordId">recordId.</param>
        /// <param name="text">The comment text..</param>
        /// <param name="workflowTaskId">The id of the workflow task..</param>
        public WorkflowTaskCommentModel(string action = default(string), string createdBy = default(string), DateTime? createdDate = default(DateTime?), RecordIdModel recordId = default(RecordIdModel), string text = default(string), string workflowTaskId = default(string))
        {
            this.Action = action;
            this.CreatedBy = createdBy;
            this.CreatedDate = createdDate;
            this.RecordId = recordId;
            this.Text = text;
            this.WorkflowTaskId = workflowTaskId;
        }
        
        /// <summary>
        /// Audit trail action type like &#39;payment allocation&#39;
        /// </summary>
        /// <value>Audit trail action type like &#39;payment allocation&#39;</value>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// The unique user id of the individual that created the entry.
        /// </summary>
        /// <value>The unique user id of the individual that created the entry.</value>
        [DataMember(Name="createdBy", EmitDefaultValue=false)]
        public string CreatedBy { get; set; }

        /// <summary>
        /// The date the entry was created.
        /// </summary>
        /// <value>The date the entry was created.</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets RecordId
        /// </summary>
        [DataMember(Name="recordId", EmitDefaultValue=false)]
        public RecordIdModel RecordId { get; set; }

        /// <summary>
        /// The comment text.
        /// </summary>
        /// <value>The comment text.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The id of the workflow task.
        /// </summary>
        /// <value>The id of the workflow task.</value>
        [DataMember(Name="workflowTaskId", EmitDefaultValue=false)]
        public string WorkflowTaskId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowTaskCommentModel {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  WorkflowTaskId: ").Append(WorkflowTaskId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WorkflowTaskCommentModel);
        }

        /// <summary>
        /// Returns true if WorkflowTaskCommentModel instances are equal
        /// </summary>
        /// <param name="input">Instance of WorkflowTaskCommentModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowTaskCommentModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Action == input.Action ||
                    (this.Action != null &&
                    this.Action.Equals(input.Action))
                ) && 
                (
                    this.CreatedBy == input.CreatedBy ||
                    (this.CreatedBy != null &&
                    this.CreatedBy.Equals(input.CreatedBy))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.WorkflowTaskId == input.WorkflowTaskId ||
                    (this.WorkflowTaskId != null &&
                    this.WorkflowTaskId.Equals(input.WorkflowTaskId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Action != null)
                    hashCode = hashCode * 59 + this.Action.GetHashCode();
                if (this.CreatedBy != null)
                    hashCode = hashCode * 59 + this.CreatedBy.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.WorkflowTaskId != null)
                    hashCode = hashCode * 59 + this.WorkflowTaskId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
