/* 
 * Payments
 *
 * The Payments API enables apps to submit payment transactions on Civic Platform records. The Payments API provides two ways of accepting payments: 1: ***Using third-party payment vendors***  Payment API endpoints that save payment information from an external third-party payment vendor, to which the user is redirected for payment processing:   **Initialize Payment** - Initializes a Civic Platform payment transaction with a citizen's payment information such as record ID, third-party merchant account ID, and payment method. The Initialize Payment API returns a transaction ID which should be used as the payment ID when calling the Commit Payment API to save the payment details from the third-party merchant into Civic Platform.   **Commit Payment** - Triggers PaymentReceiveBefore and PaymentReceiveAfter events which can interact with third-party payment processing, and saves payment details in Civic Platform. Use the transaction ID returned by the Initialize Payment API to identify the payment transaction to be committed. Note that an app cannot use the Commit Payment API unless a Construct agency administrator enables the Payment Enabled setting on [Construct Admin Portal](https://admin.accela.com) > Agencies > {Agency} > Apps.  2: ***Using Civic Platform payment adapters***  Payment API endpoint that processes and saves payment transactions using a Civic Platform payment adapter:   **Create Payment** - Processes a payment using the default Civic Platform payment adapter.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaPayments.Client.SwaggerDateConverter;

namespace AccelaPayments.Model
{
    /// <summary>
    /// PaymentCommitResultModel
    /// </summary>
    [DataContract]
        public partial class PaymentCommitResultModel :  IEquatable<PaymentCommitResultModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentCommitResultModel" /> class.
        /// </summary>
        /// <param name="completePayments">completePayments.</param>
        /// <param name="message">Response message for the payment transaction..</param>
        public PaymentCommitResultModel(PaymentCompleteModel completePayments = default(PaymentCompleteModel), string message = default(string))
        {
            this.CompletePayments = completePayments;
            this.Message = message;
        }
        
        /// <summary>
        /// Gets or Sets CompletePayments
        /// </summary>
        [DataMember(Name="completePayments", EmitDefaultValue=false)]
        public PaymentCompleteModel CompletePayments { get; set; }

        /// <summary>
        /// Response message for the payment transaction.
        /// </summary>
        /// <value>Response message for the payment transaction.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentCommitResultModel {\n");
            sb.Append("  CompletePayments: ").Append(CompletePayments).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentCommitResultModel);
        }

        /// <summary>
        /// Returns true if PaymentCommitResultModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentCommitResultModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentCommitResultModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompletePayments == input.CompletePayments ||
                    (this.CompletePayments != null &&
                    this.CompletePayments.Equals(input.CompletePayments))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompletePayments != null)
                    hashCode = hashCode * 59 + this.CompletePayments.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
