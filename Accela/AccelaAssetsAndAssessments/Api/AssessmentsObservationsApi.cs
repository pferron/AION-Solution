/* 
 * Assets and Assessments
 *
 * The Assets and Assessments APIs enable apps to manage assets and their related condition assessments.
 *
 * OpenAPI spec version: v4-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using AccelaAssetsAndAssessments.Client;
using AccelaAssetsAndAssessments.Model;

namespace AccelaAssetsAndAssessments.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAssessmentsObservationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Condition Assessment Observations
        /// </summary>
        /// <remarks>
        /// Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        ResponseCustomAttributeModelArray V4GetAssessmentsIdObservations (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get Condition Assessment Observations
        /// </summary>
        /// <remarks>
        /// Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        ApiResponse<ResponseCustomAttributeModelArray> V4GetAssessmentsIdObservationsWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type
        /// </summary>
        /// <remarks>
        /// Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAttributeMetadataModelArray</returns>
        ResponseAttributeMetadataModelArray V4GetAssessmentsIdObservationsMeta (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type
        /// </summary>
        /// <remarks>
        /// Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAttributeMetadataModelArray</returns>
        ApiResponse<ResponseAttributeMetadataModelArray> V4GetAssessmentsIdObservationsMetaWithHttpInfo (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Update Assessment Observations
        /// </summary>
        /// <remarks>
        /// Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        ResponseResultModelArray V4PutAssessmentsIdObservations (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Update Assessment Observations
        /// </summary>
        /// <remarks>
        /// Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        ApiResponse<ResponseResultModelArray> V4PutAssessmentsIdObservationsWithHttpInfo (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Condition Assessment Observations
        /// </summary>
        /// <remarks>
        /// Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetAssessmentsIdObservationsAsync (string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Get Condition Assessment Observations
        /// </summary>
        /// <remarks>
        /// Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetAssessmentsIdObservationsAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null);
        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type
        /// </summary>
        /// <remarks>
        /// Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAttributeMetadataModelArray</returns>
        System.Threading.Tasks.Task<ResponseAttributeMetadataModelArray> V4GetAssessmentsIdObservationsMetaAsync (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null);

        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type
        /// </summary>
        /// <remarks>
        /// Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAttributeMetadataModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseAttributeMetadataModelArray>> V4GetAssessmentsIdObservationsMetaAsyncWithHttpInfo (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null);
        /// <summary>
        /// Update Assessment Observations
        /// </summary>
        /// <remarks>
        /// Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        System.Threading.Tasks.Task<ResponseResultModelArray> V4PutAssessmentsIdObservationsAsync (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null);

        /// <summary>
        /// Update Assessment Observations
        /// </summary>
        /// <remarks>
        /// Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </remarks>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutAssessmentsIdObservationsAsyncWithHttpInfo (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AssessmentsObservationsApi : IAssessmentsObservationsApi
    {
        private AccelaAssetsAndAssessments.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsObservationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AssessmentsObservationsApi(String basePath)
        {
            this.Configuration = new AccelaAssetsAndAssessments.Client.Configuration { BasePath = basePath };

            ExceptionFactory = AccelaAssetsAndAssessments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsObservationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AssessmentsObservationsApi()
        {
            this.Configuration = AccelaAssetsAndAssessments.Client.Configuration.Default;

            ExceptionFactory = AccelaAssetsAndAssessments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AssessmentsObservationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AssessmentsObservationsApi(AccelaAssetsAndAssessments.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = AccelaAssetsAndAssessments.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = AccelaAssetsAndAssessments.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public AccelaAssetsAndAssessments.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public AccelaAssetsAndAssessments.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Condition Assessment Observations Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseCustomAttributeModelArray</returns>
        public ResponseCustomAttributeModelArray V4GetAssessmentsIdObservations (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = V4GetAssessmentsIdObservationsWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Condition Assessment Observations Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseCustomAttributeModelArray</returns>
        public ApiResponse< ResponseCustomAttributeModelArray > V4GetAssessmentsIdObservationsWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservations");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservations");

            var localVarPath = "/v4/assessments/{id}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAssessmentsIdObservations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get Condition Assessment Observations Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseCustomAttributeModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseCustomAttributeModelArray> V4GetAssessmentsIdObservationsAsync (string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseCustomAttributeModelArray> localVarResponse = await V4GetAssessmentsIdObservationsAsyncWithHttpInfo(contentType, authorization, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Condition Assessment Observations Returns observation data associated to a given condition assessment.    **API Endpoint**:  GET /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseCustomAttributeModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseCustomAttributeModelArray>> V4GetAssessmentsIdObservationsAsyncWithHttpInfo (string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservations");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservations");

            var localVarPath = "/v4/assessments/{id}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAssessmentsIdObservations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseCustomAttributeModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseCustomAttributeModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseCustomAttributeModelArray)));
        }

        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseAttributeMetadataModelArray</returns>
        public ResponseAttributeMetadataModelArray V4GetAssessmentsIdObservationsMeta (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAttributeMetadataModelArray> localVarResponse = V4GetAssessmentsIdObservationsMetaWithHttpInfo(contentType, authorization, id, limit, offset, fields, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseAttributeMetadataModelArray</returns>
        public ApiResponse< ResponseAttributeMetadataModelArray > V4GetAssessmentsIdObservationsMetaWithHttpInfo (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservationsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservationsMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservationsMeta");

            var localVarPath = "/v4/assessments/{id}/observations/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAssessmentsIdObservationsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAttributeMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAttributeMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAttributeMetadataModelArray)));
        }

        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseAttributeMetadataModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseAttributeMetadataModelArray> V4GetAssessmentsIdObservationsMetaAsync (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
             ApiResponse<ResponseAttributeMetadataModelArray> localVarResponse = await V4GetAssessmentsIdObservationsMetaAsyncWithHttpInfo(contentType, authorization, id, limit, offset, fields, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Observations Metadata for Condition Assessment Type Returns the custom observations metadata of the condition assessment type. The observations metadata is configured for the condition assessment type in Civic Platform Administration.    **API Endpoint**:  GET /v4/assessments/{id}/observations/meta   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the condition assessment to fetch.</param>
        /// <param name="limit">Search result size limit. (optional)</param>
        /// <param name="offset">The offset position of the first record in the results response array. For example, if offset is 100, the first item in the results array in the response is the 100th record in the search result list. (optional)</param>
        /// <param name="fields">Comma-delimited names of fields to be returned in the response. Note - Field names are case-sensitive and only first-level fields are supported. Invalid field names are ignored. (optional)</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseAttributeMetadataModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseAttributeMetadataModelArray>> V4GetAssessmentsIdObservationsMetaAsyncWithHttpInfo (string contentType, string authorization, string id, long? limit = null, long? offset = null, string fields = null, string lang = null)
        {
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservationsMeta");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservationsMeta");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssessmentsObservationsApi->V4GetAssessmentsIdObservationsMeta");

            var localVarPath = "/v4/assessments/{id}/observations/meta";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4GetAssessmentsIdObservationsMeta", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseAttributeMetadataModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseAttributeMetadataModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseAttributeMetadataModelArray)));
        }

        /// <summary>
        /// Update Assessment Observations Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ResponseResultModelArray</returns>
        public ResponseResultModelArray V4PutAssessmentsIdObservations (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = V4PutAssessmentsIdObservationsWithHttpInfo(body, contentType, authorization, id, lang);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Assessment Observations Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>ApiResponse of ResponseResultModelArray</returns>
        public ApiResponse< ResponseResultModelArray > V4PutAssessmentsIdObservationsWithHttpInfo (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");

            var localVarPath = "/v4/assessments/{id}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutAssessmentsIdObservations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

        /// <summary>
        /// Update Assessment Observations Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ResponseResultModelArray</returns>
        public async System.Threading.Tasks.Task<ResponseResultModelArray> V4PutAssessmentsIdObservationsAsync (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null)
        {
             ApiResponse<ResponseResultModelArray> localVarResponse = await V4PutAssessmentsIdObservationsAsyncWithHttpInfo(body, contentType, authorization, id, lang);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Assessment Observations Creates, updates, and deletes observations for a given condition assessment. Use the {action} field in the request array item to specify whether the observation is to be created, updated, or deleted. To create or update an observation, specify the observation custom fields in the fields{} request array item. To determine the observation custom fields for the given assessment:   1.   For the requested assessment {id}, get the assessment type.value from [Get Condition Assessment](./api-assets-assessments.html#operation/v4.get.assessments.id).   2. For the assessment type.value, get the custom field metadata identified by {attributeName} from [Get Observations Metadata for Condition Assessment Type](./api-assets-assessments.html#operation/v4.get.assessments.id.observations.meta).    **API Endpoint**:  PUT /v4/assessments/{id}/observations   **Scope**:  assessments   **App Type**:  Agency   **Authorization Type**:  Access token   **Civic Platform version**: 9.0.0  
        /// </summary>
        /// <exception cref="AccelaAssetsAndAssessments.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Observation information to be updated.</param>
        /// <param name="contentType">Must be application/x-www-form-urlencoded.</param>
        /// <param name="authorization">Construct oAuth2 authentication token</param>
        /// <param name="id">The ID of the observation to update</param>
        /// <param name="lang">Language parameter to support I18N. Default language is en_US. (optional)</param>
        /// <returns>Task of ApiResponse (ResponseResultModelArray)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseResultModelArray>> V4PutAssessmentsIdObservationsAsyncWithHttpInfo (List<CustomAttributeModel> body, string contentType, string authorization, string id, string lang = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");
            // verify the required parameter 'contentType' is set
            if (contentType == null)
                throw new ApiException(400, "Missing required parameter 'contentType' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AssessmentsObservationsApi->V4PutAssessmentsIdObservations");

            var localVarPath = "/v4/assessments/{id}/observations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (lang != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "lang", lang)); // query parameter
            if (contentType != null) localVarHeaderParams.Add("Content-Type", this.Configuration.ApiClient.ParameterToString(contentType)); // header parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V4PutAssessmentsIdObservations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseResultModelArray>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseResultModelArray) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseResultModelArray)));
        }

    }
}
