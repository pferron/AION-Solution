/* 
 * Addresses, Parcels, Owners
 *
 * Use the Address-Parcel-Owner (\"APO\") API to get, create, and update reference information about addresses, parcels, and owners used in land or property management solutions. Because reference APO can be associated to multiple transactional records, a reference APO object cannot be deleted.
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = AccelaAddressParcelsOwners.Client.SwaggerDateConverter;

namespace AccelaAddressParcelsOwners.Model
{
    /// <summary>
    /// Contains a custom form consisting of the custom form id and custom field name and value pairs. For example in JSON, \&quot;My Custom Field\&quot;: \&quot;My Custom Value\&quot;. The custom form data uses the configured address-parcel-owner template metadata. The custom fields use the configured address-parcel-owner template metadata. Note the following custom field data types: &lt;br/&gt;**For a Text field**, the maximum length is 256.  &lt;br/&gt;**For a Number field**, any numeric form is allowed, including negative numbers.  &lt;br/&gt;**For a Date field**, the format is MM/dd/yyyy.  &lt;br/&gt;**For a Time field**, the format is hh:mm.  &lt;br/&gt;**For a TextArea field**, the maximum length is 4000 characters, and allows line return characters.  &lt;br/&gt;**For a DropdownList field**, the dropdown list values are in the options[] array.  &lt;br/&gt;**For a CheckBox field**, the (case-sensitive) valid values are \&quot;UNCHECKED\&quot;and \&quot;CHECKED\&quot;.  &lt;br/&gt;**For a Radio(Y/N) field**, the (case-sensitive) valid values are \&quot;Yes\&quot;and \&quot;No\&quot;.
    /// </summary>
    [DataContract]
    public partial class CustomAttributeModel :  IEquatable<CustomAttributeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAttributeModel" /> class.
        /// </summary>
        /// <param name="id">The custom form id..</param>
        /// <param name="aCustomFieldName">The name of a custom field..</param>
        /// <param name="aCustomFieldValue">The value of a custom field..</param>
        public CustomAttributeModel(string id = default(string), string aCustomFieldName = default(string), string aCustomFieldValue = default(string))
        {
            this.Id = id;
            this.ACustomFieldName = aCustomFieldName;
            this.ACustomFieldValue = aCustomFieldValue;
        }
        
        /// <summary>
        /// The custom form id.
        /// </summary>
        /// <value>The custom form id.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The name of a custom field.
        /// </summary>
        /// <value>The name of a custom field.</value>
        [DataMember(Name="&lt;aCustomFieldName&gt;", EmitDefaultValue=false)]
        public string ACustomFieldName { get; set; }

        /// <summary>
        /// The value of a custom field.
        /// </summary>
        /// <value>The value of a custom field.</value>
        [DataMember(Name="&lt;aCustomFieldValue&gt;", EmitDefaultValue=false)]
        public string ACustomFieldValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomAttributeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ACustomFieldName: ").Append(ACustomFieldName).Append("\n");
            sb.Append("  ACustomFieldValue: ").Append(ACustomFieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CustomAttributeModel);
        }

        /// <summary>
        /// Returns true if CustomAttributeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of CustomAttributeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomAttributeModel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ACustomFieldName == input.ACustomFieldName ||
                    (this.ACustomFieldName != null &&
                    this.ACustomFieldName.Equals(input.ACustomFieldName))
                ) && 
                (
                    this.ACustomFieldValue == input.ACustomFieldValue ||
                    (this.ACustomFieldValue != null &&
                    this.ACustomFieldValue.Equals(input.ACustomFieldValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ACustomFieldName != null)
                    hashCode = hashCode * 59 + this.ACustomFieldName.GetHashCode();
                if (this.ACustomFieldValue != null)
                    hashCode = hashCode * 59 + this.ACustomFieldValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
